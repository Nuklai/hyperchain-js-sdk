{
  "version": 3,
  "sources": ["../node_modules/big-integer/BigInteger.js", "../src/constants/endpoints.ts", "../node_modules/@avalabs/avalanchejs/node_modules/@scure/base/lib/esm/index.js", "../node_modules/@noble/hashes/src/cryptoNode.ts", "../node_modules/@noble/hashes/src/utils.ts", "../node_modules/@noble/hashes/src/_assert.ts", "../node_modules/@noble/hashes/src/_sha2.ts", "../node_modules/@noble/hashes/src/sha256.ts", "../node_modules/@noble/hashes/src/ripemd160.ts", "../node_modules/@avalabs/avalanchejs/node_modules/tslib/tslib.es6.js", "../node_modules/@avalabs/avalanchejs/src/constants/node.ts", "../node_modules/@avalabs/avalanchejs/src/utils/address.ts", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/hashes/esm/_assert.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/hashes/esm/_u64.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/hashes/esm/utils.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/hashes/esm/sha3.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/abstract/utils.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/abstract/modular.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/abstract/curve.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/abstract/weierstrass.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/abstract/hash-to-curve.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/hashes/esm/hmac.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/_shortw_utils.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/secp256k1.js", "../node_modules/@avalabs/avalanchejs/node_modules/@ethereumjs/rlp/dist/esm/index.js", "../node_modules/@avalabs/avalanchejs/node_modules/micro-eth-signer/lib/esm/index.js", "../node_modules/@avalabs/avalanchejs/src/utils/buffer.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/primatives.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/constants.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/common/address.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/common/types.ts", "../node_modules/@avalabs/avalanchejs/src/utils/base58.ts", "../node_modules/@avalabs/avalanchejs/src/utils/bytesCompare.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/common/id.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/common/nodeId.ts", "../node_modules/@avalabs/avalanchejs/src/constants/networkIDs.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/transaction.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/avaxTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/int.ts", "../node_modules/@avalabs/avalanchejs/src/fixtures/utils/bytesFor.ts", "../node_modules/@avalabs/avalanchejs/src/utils/serializeList.ts", "../node_modules/@avalabs/avalanchejs/src/utils/struct.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/bigintpr.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/byte.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/bytes.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/short.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/primitives/stringpr.ts", "../node_modules/@avalabs/avalanchejs/src/utils/typeGuards.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/signature.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/credential.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/input.ts", "../node_modules/@avalabs/avalanchejs/src/utils/addressesFromBytes.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/outputOwners.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/mintOutput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/transferOutput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/mintOperation.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/outputOwnersList.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/transferInput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/secp256k1/index.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/utxoId.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/transferableInput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/transferableOutput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/baseTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/abstractTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/baseTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/codec/codec.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/codec/manager.ts", "../node_modules/@avalabs/avalanchejs/src/constants/codec.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/nft/mintOperation.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/nft/mintOutput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/nft/transferOutput.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/nft/transferOperation.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/nft/index.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/fxs/nft/credential.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/initialState.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/createAssetTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/exportTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/importTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/transferableOp.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/operationTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/codec.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/abstractTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/input.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/types.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/exportTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/output.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/importTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/codec.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/abstractTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/validator.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/addDelegatorTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/abstractSubnetTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/subnetValidator.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/addSubnetValidatorTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/addValidatorTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/advanceTimeTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/createChainTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/createSubnetTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/exportTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/importTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/rewardValidatorTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/stakeableLockIn.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/stakeableLockOut.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/addPermissionlessValidatorTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/addPermissionlessDelegatorTx.ts", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/secp256k1/index.js", "../node_modules/@avalabs/avalanchejs/src/crypto/secp256k1.ts", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/abstract/bls.js", "../node_modules/@avalabs/avalanchejs/node_modules/@noble/curves/esm/bls12-381.js", "../node_modules/@avalabs/avalanchejs/src/crypto/bls.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/proofOfPossession.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/signer.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/removeSubnetValidatorTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/transferSubnetOwnershipTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/transformSubnetTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/baseTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/codec.ts", "../node_modules/@avalabs/avalanchejs/src/utils/packTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/signedTx.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/typeGuards.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avm/typeGuards.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/evm/typeGuards.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/pvm/typeGuards.ts", "../node_modules/@avalabs/avalanchejs/src/utils/costs.ts", "../node_modules/@avalabs/avalanchejs/src/utils/UTXOSet/UTXOSet.ts", "../node_modules/@avalabs/avalanchejs/src/utils/removeDuplicateUTXOs.ts", "../node_modules/@avalabs/avalanchejs/src/utils/addChecksum.ts", "../node_modules/@avalabs/avalanchejs/src/utils/matchOwners.ts", "../node_modules/@avalabs/avalanchejs/src/utils/addressMap.ts", "../node_modules/@avalabs/avalanchejs/src/utils/getTransferableInputsByTx.ts", "../node_modules/@avalabs/avalanchejs/src/utils/getTransferableOutputsByTx.ts", "../node_modules/@avalabs/avalanchejs/src/utils/getBurnedAmountByTx.ts", "../node_modules/@avalabs/avalanchejs/src/utils/devutils.ts", "../node_modules/@avalabs/avalanchejs/src/utils/validateBurnedAmount.ts", "../node_modules/@avalabs/avalanchejs/src/serializable/avax/utxo.ts", "../node_modules/@avalabs/avalanchejs/src/signer/addTxSignatures.ts", "../node_modules/@avalabs/avalanchejs/src/constants/public-urls.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/rpc.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/baseApi.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/chainAPI.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/avaxApi.ts", "../node_modules/@avalabs/avalanchejs/src/vms/avm/api.ts", "../node_modules/@avalabs/avalanchejs/src/utils/builderUtils.ts", "../node_modules/@avalabs/avalanchejs/src/utils/sort.ts", "../node_modules/@avalabs/avalanchejs/src/utils/transferableAmounts.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/defaultSpendOptions.ts", "../node_modules/@avalabs/avalanchejs/src/constants/zeroValue.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/unsignedTx.ts", "../node_modules/@avalabs/avalanchejs/src/vms/utils/calculateSpend/calculateSpend.ts", "../node_modules/@avalabs/avalanchejs/src/utils/bigintMath.ts", "../node_modules/@avalabs/avalanchejs/src/vms/utils/calculateSpend/utils/verifySignaturesMatch.ts", "../node_modules/@avalabs/avalanchejs/src/vms/avm/utxoCalculationFns/useAvmAndCorethUTXOs.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/builder.ts", "../node_modules/@avalabs/avalanchejs/src/vms/avm/builder.ts", "../node_modules/@avalabs/avalanchejs/src/vms/common/evmUnsignedTx.ts", "../node_modules/@avalabs/avalanchejs/src/info/info.ts", "../node_modules/@avalabs/avalanchejs/src/vms/context/context.ts", "../node_modules/@avalabs/avalanchejs/src/vms/evm/api.ts", "../node_modules/@avalabs/avalanchejs/src/vms/evm/builder.ts", "../node_modules/@avalabs/avalanchejs/src/vms/pvm/utxoCalculationFns/useSpendableLockedUTXOs.ts", "../node_modules/@avalabs/avalanchejs/src/vms/pvm/utxoCalculationFns/useUnlockedUTXOs.ts", "../node_modules/@avalabs/avalanchejs/src/utils/consolidate.ts", "../node_modules/@avalabs/avalanchejs/src/vms/utils/consolidateOutputs.ts", "../node_modules/@avalabs/avalanchejs/src/vms/pvm/utxoCalculationFns/useConsolidateOutputs.ts", "../node_modules/@avalabs/avalanchejs/src/vms/pvm/api.ts", "../node_modules/@avalabs/avalanchejs/src/vms/pvm/builder.ts", "../src/common/rpc.ts", "../src/common/baseApi.ts", "../src/constants/hypervm.ts", "../src/utils/hashing.ts", "../src/utils/address.ts", "../src/constants/consts.ts", "../src/utils/utils.ts", "../src/utils/codec.ts", "../src/transactions/baseTx.ts", "../src/transactions/fees.ts", "../node_modules/@noble/ed25519/index.js", "../src/crypto/ed25519.ts", "../src/utils/hex.ts", "../src/auth/ed25519.ts", "../src/actions/transfer.ts", "../node_modules/@noble/curves/node_modules/@noble/hashes/src/_assert.ts", "../node_modules/@noble/curves/node_modules/@noble/hashes/src/cryptoNode.ts", "../node_modules/@noble/curves/node_modules/@noble/hashes/src/utils.ts", "../node_modules/@noble/curves/node_modules/@noble/hashes/src/_md.ts", "../node_modules/@noble/curves/node_modules/@noble/hashes/src/sha256.ts", "../node_modules/@noble/curves/src/abstract/utils.ts", "../node_modules/@noble/curves/src/abstract/modular.ts", "../node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../node_modules/@noble/curves/src/abstract/curve.ts", "../node_modules/@noble/curves/src/abstract/weierstrass.ts", "../node_modules/@noble/curves/src/abstract/bls.ts", "../node_modules/@noble/curves/src/bls12-381.ts", "../src/auth/bls.ts", "../src/transactions/transaction.ts", "../src/services/rpc.ts", "../src/actions/index.ts", "../src/auth/index.ts", "../src/utils/base64.ts", "../src/auth/provider.ts", "../src/common/index.ts", "../src/config.ts", "../src/constants/index.ts", "../src/crypto/index.ts", "../src/services/index.ts", "../src/transactions/index.ts", "../src/utils/index.ts", "../src/index.ts"],
  "sourcesContent": ["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10 || alphabet) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10 || alphabet) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nexport const MAINNET_PUBLIC_API_BASE_URL =\n  'http://api-mainnet.nuklaivm-dev.net:9650'\nexport const TESTNET_PUBLIC_API_BASE_URL =\n  'http://api-devnet.nuklaivm-dev.net:9650'\n\nexport const HYPERCHAIN_ID = 'zepWp9PbeU9HLHebQ8gXkvxBYH5Bz4v8SoWXE6kyjjwNaMJfC'\nexport const HYPERCHAIN_ENDPOINT = `/ext/bc/${HYPERCHAIN_ID}`\n\nexport const COREAPI_PATH = 'coreapi'\nexport const COREAPI_METHOD_PREFIX = 'hypersdk'\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = /* @__PURE__ */ genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = /* @__PURE__ */ genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n// legacy export, bad name\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = /* @__PURE__ */ genBech32('bech32');\nexport const bech32m = /* @__PURE__ */ genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto =\n  nc && typeof nc === 'object' && 'webcrypto' in nc ? (nc.webcrypto as any) : undefined;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!isBytes(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    if (!isBytes(a)) throw new Error('Uint8Array expected');\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\n// copied from utils\nfunction isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word: number, shift: number) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends SHA2<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n", "export const customInspectSymbol = Symbol.for('nodejs.util.inspect.custom');\n", "import { bech32 } from '@scure/base';\n\nconst addressSep = '-';\n\n// parse takes in an address string and returns an array of\n// [chain ID alias, bech32 HRP, address bytes].\nexport function parse(addrStr: string): [string, string, Uint8Array] {\n  const parts = addrStr.split(addressSep);\n  if (parts.length < 2) {\n    throw new Error(`Invalid address: ${addrStr}`);\n  }\n\n  const chainID = parts[0];\n  const rawAddr = parts[1];\n\n  const [hrp, addr] = parseBech32(rawAddr);\n\n  return [chainID, hrp, addr];\n}\n\nexport function bech32ToBytes(addrStr: string): Uint8Array {\n  return parse(addrStr)[2];\n}\n\n// format takes in a chain ID alias, bech32 HRP, and byte slice to produce a\n// string for an address.\nexport function format(chainIDAlias: string, hrp: string, addr: Uint8Array) {\n  const addrStr = formatBech32(hrp, addr);\n  return `${chainIDAlias}${addressSep}${addrStr}`;\n}\n\n// parseBech32 takes a bech32 address as input and returns the HRP and data\n// section of a bech32 address.\nexport function parseBech32(addrStr: string): [string, Uint8Array] {\n  const { prefix, words } = bech32.decode(addrStr);\n  return [prefix, bech32.fromWords(words)];\n}\n\n// formatBech32 takes an address's bytes as input and returns a bech32 address.\nexport function formatBech32(hrp: string, payload: Uint8Array) {\n  const words = bech32.toWords(payload);\n  return bech32.encode(hrp, words);\n}\n", "function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map", "const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!isBytes(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map", "import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    let res = new Uint8Array(sum);\n    let pad = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!ut.isBytes(data))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map", "import { mod } from './modular.js';\nimport { bytesToNumberBE, isBytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\nfunction validateDST(dst) {\n    if (isBytes(dst))\n        return dst;\n    if (typeof dst === 'string')\n        return utf8ToBytes(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    abytes(msg);\n    abytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    abytes(msg);\n    abytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    abytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map", "import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map", "/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nexport function encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nexport function decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexport const utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nexport const RLP = { encode, decode };\n//# sourceMappingURL=index.js.map", "/*! micro-eth-signer - MIT License (c) 2021 Paul Miller (paulmillr.com) */\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { bytesToHex, hexToBytes as _hexToBytes } from '@noble/hashes/utils';\nimport { isBytes } from '@noble/curves/abstract/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport * as RLP from '@ethereumjs/rlp';\nexport const CHAIN_TYPES = { mainnet: 1, ropsten: 3, rinkeby: 4, goerli: 5, kovan: 42 };\nexport const TRANSACTION_TYPES = { legacy: 0, eip2930: 1, eip1559: 2 };\n// All secp methods are in this object. This makes secp library easily replaceable\nconst secp = {\n    getPublicKey65b: (priv) => secp256k1.getPublicKey(priv, false),\n    normalizePublicKeyTo65b: (pub) => secp256k1.ProjectivePoint.fromHex(pub).toRawBytes(false),\n    sign: (msg, priv, opts) => {\n        return secp256k1.sign(msg, priv, {\n            extraEntropy: opts?.extraEntropy === false ? undefined : true,\n        });\n    },\n    signAsync: async (msg, priv, opts) => {\n        return secp256k1.sign(msg, priv, {\n            extraEntropy: opts?.extraEntropy === false ? undefined : true,\n        });\n    },\n    sigRecoverPub: (rsrec, msg, checkHighS = true) => {\n        const sig = new secp256k1.Signature(rsrec.r, rsrec.s).addRecoveryBit(rsrec.recovery);\n        if (checkHighS && sig.hasHighS())\n            throw new Error('Invalid signature: s is invalid');\n        return sig.recoverPublicKey(msg).toRawBytes();\n    },\n};\nexport function add0x(hex) {\n    return /^0x/i.test(hex) ? hex : `0x${hex}`;\n}\nexport function strip0x(hex) {\n    return hex.replace(/^0x/i, '');\n}\nexport function hexToBytes(hex) {\n    return _hexToBytes(strip0x(hex));\n}\nexport function numberTo0xHex(num) {\n    const hex = num.toString(16);\n    const x2 = hex.length & 1 ? `0${hex}` : hex;\n    return add0x(x2);\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return hex ? BigInt(add0x(hex)) : 0n;\n}\nfunction isObject(item) {\n    return item != null && typeof item === 'object';\n}\nfunction cloneDeep(obj) {\n    if (Array.isArray(obj)) {\n        return obj.map(cloneDeep);\n    }\n    else if (typeof obj === 'bigint') {\n        return BigInt(obj);\n    }\n    else if (typeof obj === 'object') {\n        // should be last, so it won't catch other types\n        let res = {};\n        for (let key in obj)\n            res[key] = cloneDeep(obj[key]);\n        return res;\n    }\n    else\n        return obj;\n}\n// The order is important.\nconst FIELDS = ['nonce', 'gasPrice', 'gasLimit', 'to', 'value', 'data', 'v', 'r', 's'];\n// prettier-ignore\nconst FIELDS2930 = [\n    'chainId', 'nonce', 'gasPrice', 'gasLimit',\n    'to', 'value', 'data', 'accessList', 'yParity', 'r', 's'\n];\n// prettier-ignore\nconst FIELDS1559 = [\n    'chainId', 'nonce', 'maxPriorityFeePerGas', 'maxFeePerGas', 'gasLimit',\n    'to', 'value', 'data', 'accessList', 'yParity', 'r', 's'\n];\nconst TypeToFields = {\n    legacy: FIELDS,\n    eip2930: FIELDS2930,\n    eip1559: FIELDS1559,\n};\n// Normalizes field to format which can easily be serialized by rlp (strings & arrays)\n// prettier-ignore\nconst FIELD_NUMBER = new Set([\n    'chainId', 'nonce', 'gasPrice', 'maxPriorityFeePerGas', 'maxFeePerGas',\n    'gasLimit', 'value', 'v', 'yParity', 'r', 's'\n]);\nconst FIELD_DATA = new Set(['data', 'to', 'storageKey', 'address']);\nfunction normalizeField(field, value) {\n    // can be number, bignumber, decimal number in string (123), hex number in string (0x123)\n    if (FIELD_NUMBER.has(field)) {\n        // bytes\n        if (isBytes(value))\n            value = add0x(bytesToHex(value));\n        if (field === 'yParity' && typeof value === 'boolean')\n            value = value ? '0x1' : '0x0';\n        // '123' -> 0x7b (handles both hex and non-hex numbers)\n        if (typeof value === 'string')\n            value = BigInt(value === '0x' ? '0x0' : value);\n        // 123 -> '0x7b' && 1 -> 0x01\n        if (typeof value === 'number' || typeof value === 'bigint')\n            value = numberTo0xHex(value);\n        // 21000, default / minimum\n        if (field === 'gasLimit' && (!value || BigInt(value) === 0n))\n            value = '0x5208';\n        if (typeof value !== 'string')\n            throw new TypeError(`Invalid type for field ${field}`);\n        // should be hex string starting with '0x' at this point.\n        if (field === 'gasPrice' && BigInt(value) === 0n)\n            throw new TypeError('The gasPrice must have non-zero value');\n        // '0x00' and '' serializes differently\n        return BigInt(value) === 0n ? '' : value;\n    }\n    // Can be string or Uint8Array\n    if (FIELD_DATA.has(field)) {\n        if (!value)\n            value = '';\n        if (isBytes(value))\n            value = bytesToHex(value);\n        if (typeof value !== 'string')\n            throw new TypeError(`Invalid type for field ${field}`);\n        value = add0x(value);\n        return value === '0x' ? '' : value;\n    }\n    if (field === 'accessList') {\n        if (!value)\n            return [];\n        let res = {};\n        if (Array.isArray(value)) {\n            for (let access of value) {\n                if (Array.isArray(access)) {\n                    // AccessList\n                    if (access.length !== 2 || !Array.isArray(access[1]))\n                        throw new TypeError(`Invalid type for field ${field}`);\n                    const key = normalizeField('address', access[0]);\n                    if (!res[key])\n                        res[key] = new Set();\n                    for (let i of access[1])\n                        res[key].add(normalizeField('storageKey', i));\n                }\n                else {\n                    // {address: string, storageKeys: string[]}[]\n                    if (!isObject(access) || !access.address || !Array.isArray(access.storageKeys))\n                        throw new TypeError(`Invalid type for field ${field}`);\n                    const key = normalizeField('address', access.address);\n                    if (!res[key])\n                        res[key] = new Set();\n                    for (let i of access.storageKeys)\n                        res[key].add(normalizeField('storageKey', i));\n                }\n            }\n        }\n        else {\n            // {[address]: string[]}\n            if (!isObject(value) || isBytes(value))\n                throw new TypeError(`Invalid type for field ${field}`);\n            for (let k in value) {\n                const key = normalizeField('address', k);\n                // undefined/empty allowed\n                if (!value[k])\n                    continue;\n                if (!Array.isArray(value[k]))\n                    throw new TypeError(`Invalid type for field ${field}`);\n                res[key] = new Set(value[k].map((i) => normalizeField('storageKey', i)));\n            }\n        }\n        return Object.keys(res).map((i) => [i, Array.from(res[i])]);\n    }\n    throw new TypeError(`Invalid type for field ${field}`);\n}\nfunction possibleTypes(input) {\n    let types = new Set(Object.keys(TRANSACTION_TYPES));\n    const keys = new Set(Object.keys(input));\n    if (keys.has('maxPriorityFeePerGas') || keys.has('maxFeePerGas')) {\n        types.delete('legacy');\n        types.delete('eip2930');\n    }\n    if (keys.has('accessList') || keys.has('yParity'))\n        types.delete('legacy');\n    if (keys.has('gasPrice'))\n        types.delete('eip1559');\n    return types;\n}\nconst RawTxLength = { 9: 'legacy', 11: 'eip2930', 12: 'eip1559' };\nconst RawTxLengthRev = { legacy: 9, eip2930: 11, eip1559: 12 };\nfunction rawToSerialized(input, chain, type) {\n    let chainId;\n    if (chain)\n        chainId = CHAIN_TYPES[chain];\n    if (Array.isArray(input)) {\n        if (!type)\n            type = RawTxLength[input.length];\n        if (!type || RawTxLengthRev[type] !== input.length)\n            throw new Error(`Invalid fields length for ${type}`);\n    }\n    else {\n        const types = possibleTypes(input);\n        if (type && !types.has(type)) {\n            throw new Error(`Invalid type=${type}. Possible types with current fields: ${Array.from(types)}`);\n        }\n        if (!type) {\n            if (types.has('legacy'))\n                type = 'legacy';\n            else if (!types.size)\n                throw new Error('Impossible fields set');\n            else\n                type = Array.from(types)[0];\n        }\n        if (input.chainId) {\n            if (chain) {\n                const fromChain = normalizeField('chainId', CHAIN_TYPES[chain]);\n                const fromInput = normalizeField('chainId', input.chainId);\n                if (fromChain !== fromInput) {\n                    throw new Error(`Both chain=${chain}(${fromChain}) and chainId=${input.chainId}(${fromInput}) specified at same time`);\n                }\n            }\n            chainId = input.chainId;\n        }\n        else\n            input.chainId = chainId;\n        input = TypeToFields[type].map((key) => input[key]);\n    }\n    if (input) {\n        const sign = input.slice(-3);\n        // remove signature if any of fields is empty\n        if (!sign[0] || !sign[1] || !sign[2]) {\n            input = input.slice(0, -3);\n            // EIP-155\n            if (type === 'legacy' && chainId)\n                input.push(normalizeField('chainId', chainId), '', '');\n        }\n    }\n    let normalized = input.map((value, i) => normalizeField(TypeToFields[type][i], value));\n    if (chainId)\n        chainId = normalizeField('chainId', chainId);\n    if (type !== 'legacy' && chainId && normalized[0] !== chainId)\n        throw new Error(`ChainId=${normalized[0]} incompatible with Chain=${chainId}`);\n    const tNum = TRANSACTION_TYPES[type];\n    return (tNum ? `0x0${tNum}` : '0x') + bytesToHex(RLP.encode(normalized));\n}\nexport const Address = {\n    fromPrivateKey(key) {\n        if (typeof key === 'string')\n            key = hexToBytes(key);\n        return Address.fromPublicKey(secp.getPublicKey65b(key));\n    },\n    fromPublicKey(key) {\n        const pub = secp.normalizePublicKeyTo65b(key);\n        const addr = bytesToHex(keccak_256(pub.subarray(1, 65))).slice(24);\n        return Address.checksum(addr);\n    },\n    // ETH addr checksum is calculated by hashing the string with keccak.\n    // NOTE: it hashes *string*, not a bytearray: keccak('beef') not keccak([0xbe, 0xef])\n    checksum(nonChecksummedAddress) {\n        const addr = strip0x(nonChecksummedAddress.toLowerCase());\n        if (addr.length !== 40)\n            throw new Error('Invalid address, must have 40 chars');\n        const hash = strip0x(bytesToHex(keccak_256(addr)));\n        let checksummed = '';\n        for (let i = 0; i < addr.length; i++) {\n            // If ith character is 9 to f then make it uppercase\n            const nth = Number.parseInt(hash[i], 16);\n            let char = addr[i];\n            if (nth > 7)\n                char = char.toUpperCase();\n            checksummed += char;\n        }\n        return add0x(checksummed);\n    },\n    verifyChecksum(address) {\n        const addr = strip0x(address);\n        if (addr.length !== 40)\n            throw new Error('Invalid address, must have 40 chars');\n        if (addr === addr.toLowerCase() || addr === addr.toUpperCase())\n            return true;\n        const hash = bytesToHex(keccak_256(addr.toLowerCase()));\n        for (let i = 0; i < 40; i++) {\n            // the nth letter should be uppercase if the nth digit of casemap is 1\n            const char = addr[i];\n            const nth = Number.parseInt(hash[i], 16);\n            if (nth > 7 && char.toUpperCase() !== char)\n                return false;\n            if (nth <= 7 && char.toLowerCase() !== char)\n                return false;\n        }\n        return true;\n    },\n};\nexport class Transaction {\n    constructor(data, chain, hardfork = Transaction.DEFAULT_HARDFORK, type) {\n        this.hardfork = hardfork;\n        let norm;\n        if (typeof data === 'string') {\n            norm = data;\n        }\n        else if (data instanceof Uint8Array) {\n            norm = bytesToHex(data);\n        }\n        else if (Array.isArray(data) || (typeof data === 'object' && data != null)) {\n            norm = rawToSerialized(data, chain, type);\n        }\n        else {\n            throw new TypeError('Expected valid serialized tx');\n        }\n        if (norm.length <= 6)\n            throw new Error('Invalid tx length');\n        this.hex = add0x(norm);\n        let txData;\n        const prevType = type;\n        if (this.hex.startsWith('0x01'))\n            [txData, type] = [add0x(this.hex.slice(4)), 'eip2930'];\n        else if (this.hex.startsWith('0x02'))\n            [txData, type] = [add0x(this.hex.slice(4)), 'eip1559'];\n        else\n            [txData, type] = [this.hex, 'legacy'];\n        if (prevType && prevType !== type)\n            throw new Error('Invalid transaction type');\n        this.type = type;\n        const ui8a = RLP.decode(txData);\n        this.raw = ui8a.reduce((res, value, i) => {\n            const name = TypeToFields[type][i];\n            if (!name)\n                return res;\n            res[name] = normalizeField(name, value);\n            return res;\n        }, {});\n        if (!this.raw.chainId) {\n            // Unsigned transaction with EIP-155\n            if (type === 'legacy' && !this.raw.r && !this.raw.s) {\n                this.raw.chainId = this.raw.v;\n                this.raw.v = '';\n            }\n        }\n        if (!this.raw.chainId) {\n            this.raw.chainId = normalizeField('chainId', CHAIN_TYPES[chain || Transaction.DEFAULT_CHAIN]);\n        }\n        this.isSigned = !!(this.raw.r && this.raw.r !== '0x');\n    }\n    isNew() {\n        return this.type === 'eip1559';\n    }\n    get bytes() {\n        return hexToBytes(this.hex);\n    }\n    equals(other) {\n        return this.getMessageToSign() === other.getMessageToSign();\n    }\n    get chain() {\n        for (let k in CHAIN_TYPES)\n            if (CHAIN_TYPES[k] === Number(this.raw.chainId))\n                return k;\n        return undefined;\n    }\n    get sender() {\n        const sender = this.recoverSenderPublicKey();\n        if (!sender)\n            throw new Error('Invalid signed transaction');\n        return Address.fromPublicKey(sender);\n    }\n    get gasPrice() {\n        if (this.isNew())\n            throw new Error('Field only available for \"legacy\" transactions');\n        return BigInt(this.raw.gasPrice);\n    }\n    // maxFeePerGas: Represents the maximum amount that a user is willing to pay for their tx (inclusive of baseFeePerGas and maxPriorityFeePerGas)\n    get maxFeePerGas() {\n        if (!this.isNew())\n            throw new Error('Field only available for \"eip1559\" transactions');\n        return BigInt(this.raw.maxFeePerGas);\n    }\n    get maxPriorityFeePerGas() {\n        if (!this.isNew())\n            throw new Error('Field only available for \"eip1559\" transactions');\n        return BigInt(this.raw.maxPriorityFeePerGas);\n    }\n    get gasLimit() {\n        return BigInt(this.raw.gasLimit);\n    }\n    // Amount in wei\n    get amount() {\n        return BigInt(this.raw.value);\n    }\n    // Total fee in wei\n    get fee() {\n        const price = this.isNew() ? this.maxFeePerGas : this.gasPrice;\n        return price * this.gasLimit;\n    }\n    // Amount + fee in wei\n    get upfrontCost() {\n        return this.amount + this.fee;\n    }\n    // Checksummed address\n    get to() {\n        return Address.checksum(this.raw.to);\n    }\n    // Nonce is a counter that represents a number of outgoing transactions on the acct\n    get nonce() {\n        return Number.parseInt(this.raw.nonce, 16) || 0;\n    }\n    supportsReplayProtection() {\n        const properBlock = !['chainstart', 'homestead', 'dao', 'tangerineWhistle'].includes(this.hardfork);\n        if (!this.isSigned)\n            return true; // Unsigned, supports EIP155\n        const v = Number(hexToNumber(this.raw.v));\n        const chainId = Number(this.raw.chainId);\n        const meetsConditions = v === chainId * 2 + 35 || v === chainId * 2 + 36;\n        return properBlock && meetsConditions;\n    }\n    getMessageToSign(signed = false) {\n        let values = TypeToFields[this.type].map((i) => this.raw[i]);\n        if (!signed) {\n            // TODO: merge with line #252 somehow? (same strip & EIP-155)\n            // Strip signature (last 3 values)\n            values = values.slice(0, -3);\n            // EIP-155\n            if (this.type === 'legacy' && this.supportsReplayProtection())\n                values.push(this.raw.chainId, '', '');\n        }\n        let encoded = RLP.encode(values);\n        if (this.type !== 'legacy')\n            encoded = new Uint8Array([TRANSACTION_TYPES[this.type], ...Array.from(encoded)]);\n        return bytesToHex(keccak_256(encoded));\n    }\n    // Used in block explorers etc\n    get hash() {\n        if (!this.isSigned)\n            throw new Error('Expected signed transaction');\n        return this.getMessageToSign(true);\n    }\n    sign(privateKey, extraEntropy = false) {\n        if (this.isSigned)\n            throw new Error('Expected unsigned transaction');\n        if (typeof privateKey === 'string')\n            privateKey = strip0x(privateKey);\n        const sig = secp.sign(this.getMessageToSign(), privateKey, { extraEntropy });\n        const rec = sig.recovery;\n        const chainId = Number(this.raw.chainId);\n        const vv = this.type === 'legacy' ? (chainId ? rec + (chainId * 2 + 35) : rec + 27) : rec;\n        const [v, r, s] = [vv, sig.r, sig.s].map(numberTo0xHex);\n        const signedRaw = this.type === 'legacy'\n            ? { ...this.raw, v, r, s }\n            : { ...cloneDeep(this.raw), yParity: v, r, s };\n        return new Transaction(signedRaw, this.chain, this.hardfork, this.type);\n    }\n    recoverSenderPublicKey() {\n        if (!this.isSigned)\n            throw new Error('Expected signed transaction: cannot recover sender of unsigned tx');\n        const v = Number(hexToNumber(this.type === 'legacy' ? this.raw.v : this.raw.yParity));\n        const chainId = Number(this.raw.chainId);\n        const recovery = this.type === 'legacy' ? (chainId ? v - (chainId * 2 + 35) : v - 27) : v;\n        const [r, s] = [this.raw.r, this.raw.s].map(hexToNumber);\n        const checkHighS = this.hardfork !== 'chainstart';\n        return secp.sigRecoverPub({ r, s, recovery }, this.getMessageToSign(), checkHighS);\n    }\n}\nTransaction.DEFAULT_HARDFORK = 'london';\nTransaction.DEFAULT_CHAIN = 'mainnet';\nTransaction.DEFAULT_TYPE = 'eip1559';\n", "import { bytesToHex, concatBytes, hexToBytes } from '@noble/hashes/utils';\nimport { add0x, strip0x } from 'micro-eth-signer';\n\nexport function bufferToBigInt(buf: Uint8Array) {\n  return BigInt(bufferToHex(buf));\n}\n\nexport function bufferToNumber(buf: Uint8Array) {\n  return Number.parseInt(bytesToHex(buf), 16);\n}\n\nexport function bufferToHex(buf: Uint8Array) {\n  return add0x(bytesToHex(buf));\n}\n\nexport function hexToBuffer(hex: string) {\n  hex = strip0x(hex);\n  if (hex.length & 1) {\n    hex = '0' + hex;\n  }\n  return hexToBytes(hex);\n}\n\nexport function padLeft(bytes: Uint8Array, length: number) {\n  const offset = length - bytes.length;\n\n  if (offset <= 0) {\n    return bytes;\n  }\n\n  const out = new Uint8Array(length);\n  out.set(bytes, offset);\n  return out;\n}\n\nexport { concatBytes, strip0x, add0x };\n", "export abstract class Primitives {\n  abstract toJSON(): any;\n}\n", "export const AVM = 'AVM' as const;\nexport const EVM = 'EVM' as const;\nexport const PVM = 'PVM' as const;\n\nexport type VM = typeof AVM | typeof EVM | typeof PVM;\nexport const ValidVMs = [AVM, EVM, PVM] as const;\n\nexport enum TypeSymbols {\n  Codec = 'codec',\n\n  // AVAX\n  BaseTx = 'avax.BaseTx',\n  TransferableOutput = 'avax.TransferableOutput',\n  TransferableInput = 'avax.TransferableInput',\n  TransferableOp = 'avax.TransferableOp',\n  UTXOID = 'avax.UTXOID',\n  UTXO = 'avax.Utxo',\n\n  // COMMON\n  Id = 'common.Id',\n  Address = 'common.Address',\n  NodeId = 'common.NodeId',\n\n  // PRIMITIVES\n  Int = 'primitives.Int',\n  BigIntPr = 'primitives.BigInt',\n  StringPr = 'primitives.String',\n  Byte = 'primitives.Byte',\n  Bytes = 'primitives.Bytes',\n  Short = 'primitives.Short',\n\n  // SECP256k1FX\n  Input = 'secp256k1fx.Input',\n  TransferInput = 'secp256k1fx.TransferInput',\n  TransferOutput = 'secp256k1fx.TransferOutput',\n  OutputOwners = 'secp256k1fx.OutputOwners',\n  OutputOwnersList = 'secp256k1fx.OutputOwnersList',\n  Credential = 'secp256k1fx.Credential',\n  Signature = 'secp256k1fx.Signature',\n  SecpMintOperation = 'secp256k1fx.MintOperation',\n  SecpMintOutput = 'secp256k1fx.MintOutput',\n\n  // NFTFX\n  NftFxMintOperation = 'nftfx.MintOperation',\n  NftFxMintOutput = 'nftfx.MintOutput',\n  NftFxTransferOperation = 'nftfx.TransferOperation',\n  NftFxTransferOutput = 'nftfx.TransferOutput',\n  NftFxCredential = 'nftfx.Credential',\n\n  // AVM\n  AvmBaseTx = 'avm.BaseTx',\n  AvmExportTx = 'avm.ExportTx',\n  AvmImportTx = 'avm.ImportTx',\n  CreateAssetTx = 'avm.CreateAssetTx',\n  OperationTx = 'avm.OperationTx',\n  InitialState = 'avm.InitialState',\n  AvmSignedTx = 'avm.SignedTx',\n\n  // PVM\n  PvmBaseTx = 'pvm.BaseTx',\n  StakeableLockIn = 'pvm.StakeableLockIn',\n  StakeableLockOut = 'pvm.StakeableLockOut',\n  AddDelegatorTx = 'pvm.AddDelegatorTx',\n  AddValidatorTx = 'pvm.AddValidatorTx',\n  AddPermissionlessDelegatorTx = 'pvm.AddPermissionlessDelegator',\n  AddPermissionlessValidatorTx = 'pvm.AddPermissionlessValidator',\n  Validator = 'pvm.Validator',\n  SubnetValidator = 'pvm.SubnetValidator',\n  Signer = 'pvm.signer',\n  SignerEmpty = 'pvm.signerEmpty',\n  ProofOfPossession = 'pvm.proofOfPossession',\n  AddSubnetValidatorTx = 'pvm.AddSubnetValidator',\n  AdvanceTimeTx = 'pvm.AdvanceTimeTx',\n  CreateChainTx = 'pvm.CreateChainTx',\n  CreateSubnetTx = 'pvm.CreateSubnetTx',\n  PvmExportTx = 'pvm.ExportTx',\n  PvmImportTx = 'pvm.ImportTx',\n  RewardValidatorTx = 'pvm.RewardValidatorTx',\n  RemoveSubnetValidatorTx = 'pvm.RemoveSubnetValidator',\n  TransformSubnetTx = 'pvm.TransformSubnetTx',\n  TransferSubnetOwnershipTx = 'pvm.TransferSubnetOwnershipTx',\n\n  // EVM\n  EvmExportTx = 'evm.ExportTx',\n  EvmInput = 'evm.Input',\n  EvmOutput = 'evm.Output',\n  EvmImportTx = 'evm.ImportTx',\n}\n", "import { customInspectSymbol } from '../../../constants/node';\nimport { bech32ToBytes, formatBech32 } from '../../../utils/address';\nimport { bufferToHex, hexToBuffer, padLeft } from '../../../utils/buffer';\nimport { serializable } from '../../common/types';\nimport { Primitives } from '../../primitives/primatives';\nimport { TypeSymbols } from '../../constants';\n\n@serializable()\nexport class Address extends Primitives {\n  _type = TypeSymbols.Address;\n  constructor(private readonly address: Uint8Array) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [Address, Uint8Array] {\n    return [new Address(buf.slice(0, 20)), buf.slice(20)];\n  }\n\n  [customInspectSymbol](_, options: any) {\n    return options.stylize(this.toJSON(), 'string');\n  }\n\n  toJSON(hrp = 'avax') {\n    return this.toString(hrp);\n  }\n\n  //decodes from bech32 Addresses\n  static fromString(addr: string): Address {\n    return new Address(bech32ToBytes(addr));\n  }\n\n  static fromHex(hex: string): Address {\n    return new Address(hexToBuffer(hex));\n  }\n\n  toHex(): string {\n    return bufferToHex(this.address);\n  }\n\n  toBytes() {\n    return padLeft(this.address, 20);\n  }\n\n  toString(hrp = 'avax') {\n    return formatBech32(hrp, this.address);\n  }\n\n  value() {\n    return this.toString();\n  }\n}\n", "import type { Codec } from '../../serializable/codec';\nimport type { TypeSymbols } from '../constants';\n\nexport interface Serializable {\n  _type: TypeSymbols;\n\n  toBytes(codec: Codec): Uint8Array;\n}\n\nexport interface SerializableStatic {\n  new (...args: any[]): Serializable;\n\n  fromBytes(bytes: Uint8Array, codec: Codec): [Serializable, Uint8Array];\n}\n\nexport function staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    constructor;\n  };\n}\n\nexport function serializable() {\n  return staticImplements<SerializableStatic>();\n}\n\nexport interface Amounter extends Serializable {\n  amount(): bigint;\n}\n", "import { base58 } from '@scure/base';\nimport type { BytesCoder } from '@scure/base';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { concatBytes } from './buffer';\n\nexport const base58check: BytesCoder = {\n  encode(data) {\n    return base58.encode(concatBytes(data, sha256(data).subarray(-4)));\n  },\n  decode(string) {\n    return base58.decode(string).subarray(0, -4);\n  },\n};\n\nexport { base58 } from '@scure/base';\n", "export const bytesCompare = (a: Uint8Array, b: Uint8Array) => {\n  let i;\n  for (i = 0; i < a.length && i < b.length; i++) {\n    const aByte = a[i];\n    const bByte = b[i];\n    if (aByte !== bByte) {\n      return aByte - bByte;\n    }\n  }\n  if (i === a.length && i === b.length) {\n    // throw error?\n    return 0;\n  }\n  return i === a.length ? -1 : 1;\n};\n\nexport const bytesEqual = (bytes1: Uint8Array, bytes2: Uint8Array): boolean => {\n  if (bytes1.length !== bytes2.length) {\n    return false;\n  }\n  return bytesCompare(bytes1, bytes2) === 0;\n};\n", "import { customInspectSymbol } from '../../../constants/node';\nimport { base58check } from '../../../utils/base58';\nimport { hexToBuffer, padLeft } from '../../../utils/buffer';\nimport { bytesCompare } from '../../../utils/bytesCompare';\nimport { serializable } from '../../common/types';\nimport { Primitives } from '../../primitives/primatives';\nimport { TypeSymbols } from '../../constants';\n\n@serializable()\nexport class Id extends Primitives {\n  _type = TypeSymbols.Id;\n  constructor(private readonly idVal: Uint8Array) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [Id, Uint8Array] {\n    return [new Id(buf.slice(0, 32)), buf.slice(32)];\n  }\n\n  static compare(id1: Id, id2: Id): number {\n    return bytesCompare(id1.toBytes(), id2.toBytes());\n  }\n\n  [customInspectSymbol](_, options: any) {\n    return options.stylize(this.toString(), 'string');\n  }\n\n  toBytes() {\n    return padLeft(this.idVal, 32);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return base58check.encode(this.toBytes());\n  }\n\n  static fromString(str: string) {\n    return Id.fromBytes(base58check.decode(str))[0];\n  }\n\n  static fromHex(hex: string): Id {\n    return new Id(hexToBuffer(hex));\n  }\n\n  value() {\n    return this.toString();\n  }\n}\n", "import { customInspectSymbol } from '../../../constants/node';\nimport { base58check } from '../../../utils/base58';\nimport { hexToBuffer, padLeft } from '../../../utils/buffer';\nimport { serializable } from '../../common/types';\nimport { Primitives } from '../../primitives/primatives';\nimport { TypeSymbols } from '../../constants';\n\nexport const NodeIDPrefix = 'NodeID-';\n@serializable()\nexport class NodeId extends Primitives {\n  _type = TypeSymbols.NodeId;\n  constructor(private readonly idVal: Uint8Array) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [NodeId, Uint8Array] {\n    return [new NodeId(buf.slice(0, 20)), buf.slice(20)];\n  }\n\n  [customInspectSymbol](_, options: any) {\n    return options.stylize(this.toString(), 'string');\n  }\n\n  toBytes() {\n    return padLeft(this.idVal, 20);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return NodeIDPrefix + base58check.encode(this.toBytes());\n  }\n\n  static fromString(str: string) {\n    if (!str.includes(NodeIDPrefix)) {\n      throw new Error('ID is missing prefix');\n    }\n    return this.fromBytes(base58check.decode(str.replace(NodeIDPrefix, '')))[0];\n  }\n\n  static fromHex(hex: string): NodeId {\n    return new NodeId(hexToBuffer(hex));\n  }\n\n  value() {\n    return this.toString();\n  }\n}\n", "import { Id } from '../serializable/fxs/common';\n\nexport const PrimaryNetworkID = new Id(new Uint8Array(32));\nexport const PlatformChainID = new Id(new Uint8Array(32));\n\nexport const MainnetName = 'mainnet';\nexport const CascadeName = 'cascade';\nexport const DenaliName = 'denali';\nexport const EverestName = 'everest';\nexport const FujiName = 'fuji';\nexport const TestnetName = 'testnet';\nexport const UnitTestName = 'testing';\nexport const LocalName = 'local';\n\nexport const MainnetID = 1;\nexport const CascadeID = 2;\nexport const DenaliID = 3;\nexport const EverestID = 4;\nexport const FujiID = 5;\n\nexport const TestnetID = FujiID;\nexport const UnitTestID = 10;\nexport const LocalID = 12345;\n\nexport const MainnetHRP = 'avax';\nexport const CascadeHRP = 'cascade';\nexport const DenaliHRP = 'denali';\nexport const EverestHRP = 'everest';\nexport const FujiHRP = 'fuji';\nexport const UnitTestHRP = 'testing';\nexport const LocalHRP = 'local';\nexport const FallbackHRP = 'custom';\n\nexport const NetworkIDToHRP = {\n  [MainnetID]: MainnetHRP,\n  [CascadeID]: CascadeHRP,\n  [DenaliID]: DenaliHRP,\n  [EverestID]: EverestHRP,\n  [FujiID]: FujiHRP,\n  [UnitTestID]: UnitTestHRP,\n  [LocalID]: LocalHRP,\n};\n\n/**\n * Returns the human readbale part for a bech32 string given the network ID.\n * @param networkID\n */\nexport const getHRP = (networkID: number): string => {\n  return NetworkIDToHRP[networkID] ?? FallbackHRP;\n};\n", "import type { Codec } from '../../serializable/codec';\nimport type { VM, TypeSymbols } from '../../serializable/constants';\n\nexport abstract class Transaction {\n  abstract _type: TypeSymbols;\n  abstract toBytes(codec: Codec): Uint8Array;\n  abstract vm: VM;\n  abstract getBlockchainId(): string;\n\n  abstract getSigIndices(): number[][];\n\n  getVM() {\n    return this.vm;\n  }\n}\n", "import { Transaction } from '../../vms/common/transaction';\nimport type { BaseTx } from './baseTx';\nimport type { TransferableInput } from './transferableInput';\n\nexport abstract class AvaxTx extends Transaction {\n  abstract baseTx?: BaseTx;\n\n  getInputs(): TransferableInput[] {\n    return this.baseTx?.inputs ?? [];\n  }\n  getBlockchainId() {\n    return this.baseTx?.BlockchainId.toString() ?? '';\n  }\n\n  getSigIndices(): number[][] {\n    return this.getInputs()\n      .map((input) => {\n        return input.sigIndicies();\n      })\n      .filter((indicies): indicies is number[] => indicies !== undefined);\n  }\n}\n", "import { customInspectSymbol } from '../../constants/node';\nimport { bufferToNumber, hexToBuffer, padLeft } from '../../utils/buffer';\nimport { serializable } from '../common/types';\nimport { Primitives } from './primatives';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class Int extends Primitives {\n  _type = TypeSymbols.Int;\n  constructor(private readonly int: number) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [Int, Uint8Array] {\n    return [new Int(bufferToNumber(buf.slice(0, 4))), buf.slice(4)];\n  }\n\n  [customInspectSymbol]() {\n    return this.value();\n  }\n\n  toJSON() {\n    return this.int;\n  }\n\n  toBytes() {\n    return padLeft(hexToBuffer(this.int.toString(16)), 4);\n  }\n\n  value() {\n    return this.int;\n  }\n}\n", "import { Int } from '../../serializable/primitives/int';\n\nexport const bytesForInt = (num: number): Uint8Array => new Int(num).toBytes();\n", "import { bytesForInt } from '../fixtures/utils/bytesFor';\nimport type { Codec } from '../serializable/codec';\nimport type {\n  Serializable,\n  SerializableStatic,\n} from '../serializable/common/types';\nimport { Int } from '../serializable/primitives/int';\nimport { concatBytes } from './buffer';\n\ntype unpackFunc = (buf: Uint8Array, codec: Codec) => [any, Uint8Array];\n\nexport const unpackList = <T extends SerializableStatic>(\n  buf: Uint8Array,\n  serializable: T,\n  codec: Codec,\n): [ReturnType<T['fromBytes']>[0][], Uint8Array] => {\n  return unpackListForEach(buf, serializable.fromBytes, codec);\n};\n\nexport const unpackListForEach = <T extends unpackFunc>(\n  buf: Uint8Array,\n  callback: T,\n  codec: Codec,\n): [ReturnType<T>[0][], Uint8Array] => {\n  let len;\n  [len, buf] = Int.fromBytes(buf);\n  const result: ReturnType<T>[0][] = [];\n  for (let i = 0; i < len.value(); i++) {\n    if (buf.length === 0) {\n      throw new Error('not enough bytes');\n    }\n    let res: any;\n    [res, buf] = callback(buf, codec);\n    result.push(res);\n  }\n  return [result, buf];\n};\n\nexport const toListStruct = <T extends SerializableStatic>(\n  serializable: T,\n) => ({\n  fromBytes: (buff: Uint8Array, codec: Codec) =>\n    unpackList(buff, serializable, codec),\n});\n\nexport const unpackCodecList = {\n  fromBytes: (\n    buff: Uint8Array,\n    codec?: Codec,\n  ): [Serializable[], Uint8Array] => {\n    if (!codec) throw new Error('codec required when using unpackCodecList');\n    return unpackListForEach(buff, codec.UnpackPrefix, codec);\n  },\n};\n\nexport const packList = (\n  serializables: Serializable[],\n  codec: Codec,\n): Uint8Array => {\n  return concatBytes(\n    bytesForInt(serializables.length),\n    ...serializables.map((ser) => ser.toBytes(codec)),\n  );\n};\n", "import type { Codec } from '../serializable/codec';\nimport type { Serializable } from '../serializable/common/types';\nimport { concatBytes } from './buffer';\nimport { packList } from './serializeList';\n\nexport type FromBytesReturn<T> = T extends {\n  fromBytes: (buff: Uint8Array, codec?: Codec) => [infer rType, Uint8Array];\n}\n  ? rType\n  : T extends {\n      fromBytes: (buff: Uint8Array, codec: Codec) => [infer rType, Uint8Array];\n    }\n  ? rType\n  : never;\n\nexport type ReturnTypes<T extends readonly any[]> = {\n  [i in keyof T]: FromBytesReturn<T[i]>;\n};\n\nexport function unpack<O extends readonly any[]>(\n  buffer: Uint8Array,\n  sers: O,\n  codec?: Codec,\n): [...ReturnTypes<O>, Uint8Array] {\n  const unpacked = sers.map((ser) => {\n    let res: ReturnType<typeof ser.fromBytes>[0];\n\n    if (!buffer.length) {\n      throw new Error('not enough bytes');\n    }\n\n    [res, buffer] = ser.fromBytes(buffer, codec);\n\n    return res;\n  });\n\n  return [...unpacked, buffer] as unknown as [...ReturnTypes<O>, Uint8Array];\n}\n\nexport function pack(\n  serializables: (Serializable | Serializable[])[],\n  codec: Codec,\n) {\n  return concatBytes(\n    ...serializables.map((ser) => {\n      if (Array.isArray(ser)) {\n        return packList(ser, codec);\n      }\n      return ser.toBytes(codec);\n    }),\n  );\n}\n\nexport function packSwitched(\n  codec: Codec,\n  ...serializables: (Serializable | Serializable[])[]\n) {\n  return pack(serializables, codec);\n}\n", "import { customInspectSymbol } from '../../constants/node';\nimport { bufferToBigInt, hexToBuffer, padLeft } from '../../utils/buffer';\nimport { serializable } from '../common/types';\nimport { Primitives } from './primatives';\nimport { TypeSymbols } from '../constants';\n\n// typescript doesn't like BigInt as a class name\n@serializable()\nexport class BigIntPr extends Primitives {\n  _type = TypeSymbols.BigIntPr;\n  constructor(private readonly bigint: bigint) {\n    super();\n  }\n\n  [customInspectSymbol]() {\n    return this.bigint;\n  }\n\n  static fromBytes(buf: Uint8Array): [BigIntPr, Uint8Array] {\n    return [new BigIntPr(bufferToBigInt(buf.slice(0, 8))), buf.slice(8)];\n  }\n\n  toJSON() {\n    return this.bigint.toString();\n  }\n\n  toBytes() {\n    return padLeft(hexToBuffer(this.bigint.toString(16)), 8);\n  }\n\n  value(): bigint {\n    return this.bigint;\n  }\n}\n", "import { bufferToHex } from '../../utils/buffer';\nimport { serializable } from '../common/types';\nimport { Primitives } from './primatives';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class Byte extends Primitives {\n  _type = TypeSymbols.Byte;\n  constructor(private readonly byte: Uint8Array) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [Byte, Uint8Array] {\n    return [new Byte(buf.slice(0, 1)), buf.slice(1)];\n  }\n\n  toJSON() {\n    return bufferToHex(this.byte);\n  }\n\n  toBytes() {\n    return this.byte;\n  }\n}\n", "import { bytesToString } from '@scure/base';\nimport { bytesForInt } from '../../fixtures/utils/bytesFor';\nimport { bufferToHex, concatBytes } from '../../utils/buffer';\nimport { serializable } from '../common/types';\nimport { Int } from './int';\nimport { Primitives } from './primatives';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class Bytes extends Primitives {\n  _type = TypeSymbols.Bytes;\n  constructor(private readonly bytes: Uint8Array) {\n    super();\n  }\n\n  toString(encoding: 'utf8' | 'hex' = 'utf8') {\n    return bytesToString(encoding, this.bytes);\n  }\n\n  toJSON() {\n    return bufferToHex(this.bytes);\n  }\n\n  static fromBytes(buf: Uint8Array): [Bytes, Uint8Array] {\n    const [len, remaining] = Int.fromBytes(buf);\n\n    return [\n      new Bytes(remaining.slice(0, len.value())),\n      remaining.slice(len.value()),\n    ];\n  }\n\n  toBytes() {\n    return concatBytes(bytesForInt(this.bytes.length), this.bytes);\n  }\n}\n", "import { bufferToNumber, hexToBuffer, padLeft } from '../../utils/buffer';\nimport { serializable } from '../common/types';\nimport { Primitives } from './primatives';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class Short extends Primitives {\n  _type = TypeSymbols.Short;\n  constructor(private readonly short: number) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [Short, Uint8Array] {\n    return [new Short(bufferToNumber(buf.slice(0, 2))), buf.slice(2)];\n  }\n\n  toJSON() {\n    return this.short.toString();\n  }\n\n  toBytes() {\n    return padLeft(hexToBuffer(this.short.toString(16)), 2);\n  }\n\n  value() {\n    return this.short;\n  }\n}\n", "import { concatBytes, hexToBuffer, padLeft } from '../../utils/buffer';\nimport { serializable } from '../common/types';\nimport { Primitives } from './primatives';\nimport { Short } from './short';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class Stringpr extends Primitives {\n  _type = TypeSymbols.StringPr;\n  constructor(private readonly string: string) {\n    super();\n  }\n\n  static fromBytes(buf: Uint8Array): [Stringpr, Uint8Array] {\n    const [length, remaining] = Short.fromBytes(buf);\n    return [\n      new Stringpr(\n        new TextDecoder().decode(remaining.slice(0, length.value())),\n      ),\n      remaining.slice(length.value()),\n    ];\n  }\n\n  toJSON() {\n    return this.string;\n  }\n\n  toBytes() {\n    return concatBytes(\n      padLeft(hexToBuffer(this.string.length.toString(16)), 2),\n      new TextEncoder().encode(this.string),\n    );\n  }\n\n  value() {\n    return this.string;\n  }\n}\n", "import type { Serializable } from '../serializable/common/types';\nimport type { TransferInput } from '../serializable/fxs/secp256k1';\nimport type { OutputOwners } from '../serializable/fxs/secp256k1/outputOwners';\nimport type { TransferOutput } from '../serializable/fxs/secp256k1/transferOutput';\nimport type { StakeableLockIn } from '../serializable/pvm/stakeableLockIn';\nimport type { StakeableLockOut } from '../serializable/pvm/stakeableLockOut';\nimport { TypeSymbols } from '../serializable/constants';\n\nexport function isTransferOut(out: Serializable): out is TransferOutput {\n  return out._type === TypeSymbols.TransferOutput;\n}\n\nexport function isStakeableLockOut(out: Serializable): out is StakeableLockOut {\n  return out._type === TypeSymbols.StakeableLockOut;\n}\n\nexport function isRewardsOwner(out: Serializable): out is OutputOwners {\n  return out._type === TypeSymbols.OutputOwners;\n}\n\nexport function isStakeableLockIn(out: Serializable): out is StakeableLockIn {\n  return out._type === TypeSymbols.StakeableLockIn;\n}\n\nexport function isTransferInput(inp: Serializable): inp is TransferInput {\n  return inp._type === TypeSymbols.TransferInput;\n}\n", "import { bytesToHex } from '@noble/hashes/utils';\nimport { hexToBytes } from 'micro-eth-signer';\nimport { customInspectSymbol } from '../../../constants/node';\nimport { bufferToHex, padLeft } from '../../../utils/buffer';\nimport { serializable } from '../../common/types';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#secp256k1-credential\n */\nexport const SepkSignatureLength = 65;\n@serializable()\nexport class Signature {\n  _type = TypeSymbols.Signature;\n\n  constructor(private readonly sig: Uint8Array) {\n    if (sig.length !== SepkSignatureLength) {\n      throw new Error('incorrect number of bytes for signature');\n    }\n  }\n\n  toJSON() {\n    return bytesToHex(this.sig);\n  }\n\n  static fromJSON(jsonStr: string) {\n    return new Signature(hexToBytes(jsonStr));\n  }\n\n  static fromBytes(bytes: Uint8Array): [Signature, Uint8Array] {\n    return [\n      new Signature(bytes.slice(0, SepkSignatureLength)),\n      bytes.slice(SepkSignatureLength),\n    ];\n  }\n\n  [customInspectSymbol](_, options: any) {\n    return options.stylize(this.toString(), 'string');\n  }\n\n  toString() {\n    return bufferToHex(this.sig);\n  }\n\n  toBytes() {\n    return padLeft(this.sig, SepkSignatureLength);\n  }\n}\n", "import { packList, unpackList } from '../../../utils/serializeList';\nimport type { Codec } from '../../codec';\nimport { serializable } from '../../common/types';\nimport { Signature } from './signature';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#secp256k1-credential\n */\n@serializable()\nexport class Credential {\n  _type = TypeSymbols.Credential;\n\n  constructor(private readonly signatures: Signature[]) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [Credential, Uint8Array] {\n    const [sigs, remaining] = unpackList(bytes, Signature, codec);\n    return [new Credential(sigs), remaining];\n  }\n\n  toJSON() {\n    return this.signatures;\n  }\n\n  static fromJSON(credentialsStrings: string[]) {\n    return new Credential(\n      credentialsStrings.map((str) => Signature.fromJSON(str)),\n    );\n  }\n\n  setSignature(index: number, signature: Uint8Array) {\n    if (index >= this.signatures.length) {\n      throw new Error(`index ${index} is out of bounds for credential`);\n    }\n    this.signatures[index] = new Signature(signature);\n  }\n\n  getSignatures() {\n    return this.signatures.map((sig) => sig.toString());\n  }\n\n  toBytes(codec) {\n    return packList(this.signatures, codec);\n  }\n}\n", "import { packList, toListStruct } from '../../../utils/serializeList';\nimport { unpack } from '../../../utils/struct';\nimport { serializable } from '../../common/types';\nimport { Int } from '../../primitives';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/input.go\n * @see https://docs.avax.network/specs/coreth-atomic-transaction-serialization/#secp256k1-transfer-input\n * @see https://docs.avax.network/specs/avm-transaction-serialization/#secp256k1-transfer-input\n * @see https://docs.avax.network/specs/platform-transaction-serialization/#secp256k1-transfer-input\n */\n@serializable()\nexport class Input {\n  _type = TypeSymbols.Input;\n\n  constructor(private readonly sigIndices: Int[]) {}\n\n  static fromNative(sigIndicies: number[]) {\n    return new Input(sigIndicies.map((i) => new Int(i)));\n  }\n\n  static fromBytes(bytes: Uint8Array): [Input, Uint8Array] {\n    const [sigIndices, remaining] = unpack(bytes, [toListStruct(Int)]);\n    return [new Input(sigIndices), remaining];\n  }\n\n  values() {\n    return this.sigIndices.map((i) => i.value());\n  }\n\n  toBytes(codec) {\n    return packList(this.sigIndices, codec);\n  }\n}\n", "import { Address } from '../serializable/fxs/common';\n\nexport function addressesFromBytes(bytes: Uint8Array[]): Address[] {\n  return bytes.map((b) => new Address(b));\n}\n", "import { concatBytes } from '@noble/hashes/utils';\nimport { addressesFromBytes } from '../../../utils/addressesFromBytes';\nimport { packList, toListStruct } from '../../../utils/serializeList';\nimport { pack, unpack } from '../../../utils/struct';\nimport { serializable } from '../../common/types';\nimport { BigIntPr, Int } from '../../primitives';\nimport { Address } from '../common/address';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/output_owners.go\n * @see https://docs.avax.network/specs/platform-transaction-serialization/#secp256k1-output-owners-output\n */\n@serializable()\nexport class OutputOwners {\n  _type = TypeSymbols.OutputOwners;\n\n  constructor(\n    public readonly locktime: BigIntPr,\n    public readonly threshold: Int,\n    public readonly addrs: Address[],\n  ) {}\n\n  static fromNative(address: Uint8Array[], locktime = 0n, threshold = 1) {\n    return new OutputOwners(\n      new BigIntPr(locktime),\n      new Int(threshold),\n      addressesFromBytes(address),\n    );\n  }\n\n  static fromBytes(bytes: Uint8Array, codec): [OutputOwners, Uint8Array] {\n    const [locktime, threshold, addresses, remaining] = unpack(\n      bytes,\n      [BigIntPr, Int, toListStruct(Address)],\n      codec,\n    );\n    return [new OutputOwners(locktime, threshold, addresses), remaining];\n  }\n\n  toBytes(codec) {\n    return concatBytes(\n      pack([this.locktime, this.threshold], codec),\n      packList(this.addrs, codec),\n    );\n  }\n\n  equals(other: OutputOwners) {\n    return (\n      this.locktime.value() === other.locktime.value() &&\n      this.threshold.value() === other.threshold.value() &&\n      this.addrs.length === other.addrs.length &&\n      this.addrs.every((thisAddr, idx) => {\n        const thisString = thisAddr.value();\n        const otherString = other.addrs[idx].value();\n        return thisString === otherString;\n      })\n    );\n  }\n}\n", "import { serializable } from '../../common/types';\nimport { OutputOwners } from './outputOwners';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/mint_output.go\n * @see https://docs.avax.network/specs/avm-transaction-serialization/#secp256k1-mint-output\n */\n@serializable()\nexport class MintOutput {\n  _type = TypeSymbols.SecpMintOutput;\n\n  constructor(private readonly outputOwners: OutputOwners) {}\n\n  static fromBytes(bytes: Uint8Array, codec): [MintOutput, Uint8Array] {\n    let owners: OutputOwners;\n    [owners, bytes] = OutputOwners.fromBytes(bytes, codec);\n\n    return [new MintOutput(owners), bytes];\n  }\n\n  toBytes(codec) {\n    return this.outputOwners.toBytes(codec);\n  }\n}\n", "import { pack, unpack } from '../../../utils/struct';\nimport type { Amounter } from '../../common/types';\nimport { serializable } from '../../common/types';\nimport { BigIntPr } from '../../primitives';\nimport { OutputOwners } from './outputOwners';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/transfer_output.go\n * @see https://docs.avax.network/specs/coreth-atomic-transaction-serialization/#secp256k1-transfer-output\n * @see https://docs.avax.network/specs/avm-transaction-serialization/#secp256k1-transfer-output\n * @see https://docs.avax.network/specs/platform-transaction-serialization/#secp256k1-transfer-output\n */\n@serializable()\nexport class TransferOutput implements Amounter {\n  readonly _type = TypeSymbols.TransferOutput;\n\n  constructor(\n    public readonly amt: BigIntPr,\n    public readonly outputOwners: OutputOwners,\n  ) {}\n\n  amount() {\n    return this.amt.value();\n  }\n\n  getLocktime() {\n    return this.outputOwners.locktime.value();\n  }\n\n  getOwners() {\n    return this.outputOwners.addrs.map((addr) => addr.toBytes());\n  }\n\n  getThreshold() {\n    return this.outputOwners.threshold.value();\n  }\n\n  static fromBytes(bytes: Uint8Array): [TransferOutput, Uint8Array] {\n    const [amt, owners, remaining] = unpack(bytes, [BigIntPr, OutputOwners]);\n\n    return [new TransferOutput(amt, owners), remaining];\n  }\n\n  toBytes(codec) {\n    return pack([this.amt, this.outputOwners], codec);\n  }\n}\n", "import { concatBytes } from '../../../utils/buffer';\nimport { unpack } from '../../../utils/struct';\nimport { serializable } from '../../common/types';\nimport { Input } from './input';\nimport { MintOutput } from './mintOutput';\nimport { TransferOutput } from './transferOutput';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/mint_operation.go\n * @see https://docs.avax.network/specs/avm-transaction-serialization#secp256k1-mint-operation\n */\n@serializable()\nexport class MintOperation {\n  _type = TypeSymbols.SecpMintOperation;\n\n  constructor(\n    private readonly input: Input,\n    private readonly mintOutput: MintOutput,\n    private readonly transferOutput: TransferOutput,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array): [MintOperation, Uint8Array] {\n    const [input, mintOutput, transferOutput, remaining] = unpack(bytes, [\n      Input,\n      MintOutput,\n      TransferOutput,\n    ] as const);\n\n    return [new MintOperation(input, mintOutput, transferOutput), remaining];\n  }\n\n  toBytes(codec) {\n    return concatBytes(\n      this.input.toBytes(codec),\n      this.mintOutput.toBytes(codec),\n      this.transferOutput.toBytes(codec),\n    );\n  }\n}\n", "import { serializable } from '../../common/types';\nimport { packList, unpackList } from '../../../utils/serializeList';\nimport { OutputOwners } from './outputOwners';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/output_owners.go\n * @see https://docs.avax.network/specs/platform-transaction-serialization/#secp256k1-output-owners-output\n */\n@serializable()\nexport class OutputOwnersList {\n  _type = TypeSymbols.OutputOwnersList;\n\n  constructor(private readonly outputOwners: OutputOwners[]) {}\n\n  static fromBytes(bytes: Uint8Array, codec): [OutputOwnersList, Uint8Array] {\n    const [owners, remaining] = unpackList(bytes, OutputOwners, codec);\n    return [new OutputOwnersList(owners), remaining];\n  }\n\n  toBytes(codec) {\n    return packList(this.outputOwners, codec);\n  }\n}\n", "import { pack, unpack } from '../../../utils/struct';\nimport type { Amounter } from '../../common/types';\nimport { serializable } from '../../common/types';\nimport { BigIntPr } from '../../primitives';\nimport { Input } from './input';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/transfer_input.go\n * @see https://docs.avax.network/specs/coreth-atomic-transaction-serialization/#secp256k1-transfer-input\n * @see https://docs.avax.network/specs/avm-transaction-serialization/#secp256k1-transfer-input\n * @see https://docs.avax.network/specs/platform-transaction-serialization/#secp256k1-transfer-input\n */\n@serializable()\nexport class TransferInput implements Amounter {\n  _type = TypeSymbols.TransferInput;\n\n  constructor(private readonly amt: BigIntPr, private readonly input: Input) {}\n\n  static fromBytes(bytes: Uint8Array): [TransferInput, Uint8Array] {\n    const [amt, input, remaining] = unpack(bytes, [BigIntPr, Input]);\n    return [new TransferInput(amt, input), remaining];\n  }\n\n  static fromNative(amount: bigint, sigIndicies: number[]) {\n    return new TransferInput(\n      new BigIntPr(amount),\n      Input.fromNative(sigIndicies),\n    );\n  }\n\n  sigIndicies() {\n    return this.input.values();\n  }\n\n  amount() {\n    return this.amt.value();\n  }\n  toBytes(codec) {\n    return pack([this.amt, this.input], codec);\n  }\n}\n", "import { Credential } from './credential';\nimport { Input } from './input';\nimport { MintOperation } from './mintOperation';\nimport { MintOutput } from './mintOutput';\nimport { OutputOwners } from './outputOwners';\nimport { OutputOwnersList } from './outputOwnersList';\nimport { Signature } from './signature';\nimport { TransferInput } from './transferInput';\nimport { TransferOutput } from './transferOutput';\n\n// https://github.com/ava-labs/avalanchego/blob/master/vms/secp256k1fx/fx.go\nconst TypeRegistry = Object.freeze([\n  TransferInput,\n  MintOutput,\n  TransferOutput,\n  MintOperation,\n  Credential,\n]);\n\nexport {\n  Input,\n  MintOperation,\n  MintOutput,\n  OutputOwners,\n  OutputOwnersList,\n  TransferInput,\n  TransferOutput,\n  Credential,\n  Signature,\n  TypeRegistry,\n};\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { base58check } from '../../utils/base58';\nimport { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common/id';\nimport { BigIntPr, Int } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/components/avax/utxo_id.go\n */\n@serializable()\nexport class UTXOID {\n  _type = TypeSymbols.UTXOID;\n\n  constructor(public readonly txID: Id, public readonly outputIdx: Int) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [UTXOID, Uint8Array] {\n    const [txID, outputIdx, remaining] = unpack(bytes, [Id, Int], codec);\n\n    return [new UTXOID(txID, outputIdx), remaining];\n  }\n\n  static fromNative(txId: string, outputIdx: number) {\n    return new UTXOID(Id.fromString(txId), new Int(outputIdx));\n  }\n\n  static compare(id1: UTXOID, id2: UTXOID) {\n    const txIDRes = Id.compare(id1.txID, id2.txID);\n    if (txIDRes !== 0) {\n      return txIDRes;\n    }\n    return id1.outputIdx.value() - id2.outputIdx.value();\n  }\n\n  toBytes(codec) {\n    return pack([this.txID, this.outputIdx], codec);\n  }\n\n  ID() {\n    return base58check.encode(\n      sha256(\n        concatBytes(\n          new BigIntPr(BigInt(this.outputIdx.value())).toBytes(),\n          this.txID.toBytes(),\n        ),\n      ),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport {\n  isStakeableLockIn,\n  isTransferInput,\n  isTransferOut,\n} from '../../utils/typeGuards';\nimport type { Codec } from '../codec/codec';\nimport type { Amounter } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common/id';\nimport { Input, TransferInput } from '../fxs/secp256k1';\nimport { BigIntPr, Int } from '../primitives';\nimport type { Utxo } from './utxo';\nimport { UTXOID } from './utxoId';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/components/avax/transferables.go\n * @see https://docs.avax.network/specs/coreth-atomic-transaction-serialization#transferable-input\n * @see https://docs.avax.network/specs/avm-transaction-serialization#transferable-input\n * @see https://docs.avax.network/specs/platform-transaction-serialization#transferable-input\n */\n@serializable()\nexport class TransferableInput {\n  _type = TypeSymbols.TransferableInput;\n\n  constructor(\n    public readonly utxoID: UTXOID,\n    public readonly assetId: Id,\n    public readonly input: Amounter,\n  ) {}\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [TransferableInput, Uint8Array] {\n    const [utxoID, assetId, remaining] = unpack(bytes, [UTXOID, Id]);\n    const [input, rest] = codec.UnpackPrefix<Amounter>(remaining);\n\n    return [new TransferableInput(utxoID, assetId, input), rest];\n  }\n\n  static fromNative(\n    utxoId: string,\n    outputIdx: number,\n    assetId: string,\n    amount: bigint,\n    sigIndices: number[],\n  ) {\n    return new TransferableInput(\n      UTXOID.fromNative(utxoId, outputIdx),\n      Id.fromString(assetId),\n      new TransferInput(\n        new BigIntPr(amount),\n        new Input(sigIndices.map((num) => new Int(num))),\n      ),\n    );\n  }\n\n  static fromUtxoAndSigindicies(utxo: Utxo, sigIndicies: number[]) {\n    const out = utxo.output;\n    if (!isTransferOut(out)) {\n      throw new Error('utxo.output must be Transferout');\n    }\n\n    return new TransferableInput(\n      utxo.utxoId,\n      utxo.assetId,\n      TransferInput.fromNative(out.amount(), sigIndicies),\n    );\n  }\n\n  sigIndicies() {\n    const input = this.input;\n\n    if (isTransferInput(input)) {\n      return input.sigIndicies();\n    }\n    if (isStakeableLockIn(input)) {\n      const lockedInput = input.transferableInput;\n\n      if (isTransferInput(lockedInput)) {\n        return lockedInput.sigIndicies();\n      }\n    }\n    throw new Error('Input must be TransferInput or StakeableLockIn');\n  }\n\n  static compare(input1: TransferableInput, input2: TransferableInput): number {\n    return UTXOID.compare(input1.utxoID, input2.utxoID);\n  }\n\n  amount() {\n    return this.input.amount();\n  }\n\n  getAssetId() {\n    return this.assetId.toString();\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.utxoID, this.assetId], codec),\n      codec.PackPrefix(this.input),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec/codec';\nimport type { Amounter } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common/id';\nimport { OutputOwners, TransferOutput } from '../fxs/secp256k1';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/components/avax/transferables.go\n * @see https://docs.avax.network/specs/coreth-atomic-transaction-serialization#transferable-output\n * @see https://docs.avax.network/specs/avm-transaction-serialization#transferable-output\n * @see https://docs.avax.network/specs/platform-transaction-serialization#transferable-output\n */\n@serializable()\nexport class TransferableOutput {\n  _type = TypeSymbols.TransferableOutput;\n\n  constructor(public readonly assetId: Id, public readonly output: Amounter) {}\n\n  static fromNative(\n    assetId: string,\n    amt: bigint,\n    addresses: Uint8Array[],\n    locktime?: bigint,\n    threshold?: number,\n  ) {\n    return new TransferableOutput(\n      Id.fromString(assetId),\n      new TransferOutput(\n        new BigIntPr(amt),\n        OutputOwners.fromNative(addresses, locktime, threshold),\n      ),\n    );\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [TransferableOutput, Uint8Array] {\n    const [assetId, remaining] = unpack(bytes, [Id], codec);\n    const [output, rest] = codec.UnpackPrefix<Amounter>(remaining);\n    return [new TransferableOutput(assetId, output), rest];\n  }\n\n  getAssetId() {\n    return this.assetId.toString();\n  }\n\n  amount() {\n    return this.output.amount();\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.assetId], codec),\n      codec.PackPrefix(this.output),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common/id';\nimport { Bytes, Int } from '../primitives';\nimport { TransferableInput } from './transferableInput';\nimport { TransferableOutput } from './transferableOutput';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-basetx\n */\n@serializable()\nexport class BaseTx {\n  _type = TypeSymbols.BaseTx;\n\n  constructor(\n    public readonly NetworkId: Int,\n    public readonly BlockchainId: Id,\n    public readonly outputs: TransferableOutput[],\n    public readonly inputs: TransferableInput[],\n    public readonly memo: Bytes,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [BaseTx, Uint8Array] {\n    const [networkId, blockchainId, outputs, inputs, memo, remaining] = unpack(\n      bytes,\n      [\n        Int,\n        Id,\n        toListStruct(TransferableOutput),\n        toListStruct(TransferableInput),\n        Bytes,\n      ],\n      codec,\n    );\n    return [\n      new BaseTx(networkId, blockchainId, outputs, inputs, memo),\n      remaining,\n    ];\n  }\n\n  static fromNative(\n    networkId: number,\n    blockchainId: string,\n    outputs: TransferableOutput[],\n    inputs: TransferableInput[],\n    memo: Uint8Array,\n  ) {\n    return new BaseTx(\n      new Int(networkId),\n      Id.fromString(blockchainId),\n      outputs,\n      inputs,\n      new Bytes(memo),\n    );\n  }\n\n  toBytes(codec) {\n    return concatBytes(\n      pack([this.NetworkId, this.BlockchainId], codec),\n      packList(this.outputs, codec),\n      packList(this.inputs, codec),\n      this.memo.toBytes(),\n    );\n  }\n}\n", "import { AvaxTx } from '../avax/avaxTx';\nimport { AVM } from '../constants';\n\nexport abstract class AVMTx extends AvaxTx {\n  vm = AVM;\n}\n", "import { unpack } from '../../utils/struct';\nimport { BaseTx as AvaxBaseTx } from '../avax/baseTx';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { AVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-basetx\n */\n@serializable()\nexport class BaseTx extends AVMTx {\n  _type = TypeSymbols.AvmBaseTx;\n\n  constructor(public readonly baseTx: AvaxBaseTx) {\n    super();\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [BaseTx, Uint8Array] {\n    const [baseTx, remaining] = unpack(bytes, [AvaxBaseTx], codec);\n    return [new BaseTx(baseTx), remaining];\n  }\n\n  toBytes(codec: Codec) {\n    return this.baseTx.toBytes(codec);\n  }\n}\n", "import { bytesForInt } from '../../fixtures/utils/bytesFor';\nimport { concatBytes } from '../../utils/buffer';\nimport { unpack } from '../../utils/struct';\nimport type { Serializable, SerializableStatic } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Int } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/codec/linearcodec/codec.go\n */\n@serializable()\nexport class Codec {\n  _type = TypeSymbols.Codec;\n  typeToTypeID: Map<TypeSymbols, number>;\n\n  constructor(\n    private readonly typeIdToType: (SerializableStatic | undefined)[],\n  ) {\n    this.typeToTypeID = typeIdToType.reduce(\n      (agg, type, index) => (type ? agg.set(new type()._type, index) : agg),\n      new Map<TypeSymbols, number>(),\n    );\n  }\n\n  PackPrefix = (type: Serializable) => {\n    const id = this.typeToTypeID.get(type._type);\n    if (id === undefined) {\n      throw new Error(\n        `can't marshal unregistered type: ${type._type.toString()}`,\n      );\n    }\n\n    return concatBytes(bytesForInt(id), type.toBytes(this));\n  };\n\n  UnpackPrefix = <T extends Serializable>(buf: Uint8Array): [T, Uint8Array] => {\n    let typeId: Int;\n    [typeId, buf] = unpack(buf, [Int]);\n    const type = this.typeIdToType[typeId.value()];\n\n    if (type === undefined) {\n      throw new Error(\n        `couldn't unmarshal interface: unknown type ID ${typeId.value()}`,\n      );\n    }\n\n    const [entity, rest] = type.fromBytes(buf, this);\n\n    return [entity as T, rest];\n  };\n\n  static fromBytes(buf: Uint8Array, codec?: Codec) {\n    if (!codec) {\n      throw new Error('codec required');\n    }\n    return codec.UnpackPrefix(buf);\n  }\n\n  // this is placed here to satisfy serializable and should not be used directly\n  toBytes(): Uint8Array {\n    throw new Error('not implemented');\n  }\n\n  PackPrefixList(list: Serializable[]): Uint8Array {\n    return concatBytes(\n      bytesForInt(list.length),\n      ...list.map((type) => this.PackPrefix(type)),\n    );\n  }\n}\n", "import { DEFAULT_CODEC_VERSION } from '../../constants/codec';\nimport { concatBytes } from '../../utils/buffer';\nimport type { FromBytesReturn } from '../../utils/struct';\nimport { unpack } from '../../utils/struct';\nimport type { Transaction } from '../../vms/common/transaction';\nimport type { Serializable, SerializableStatic } from '../common/types';\nimport { Short } from '../primitives';\nimport type { Codec } from './codec';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/codec/manager.go\n */\nexport class Manager {\n  codecs: Record<number, Codec> = {};\n  RegisterCodec(version: number, codec: Codec) {\n    if (version in this.codecs) {\n      throw new Error('duplicated codec version');\n    }\n\n    this.codecs[version] = codec;\n  }\n\n  unpack = <T extends SerializableStatic>(\n    buff: Uint8Array,\n    unpacker: T,\n  ): FromBytesReturn<T> => {\n    const [codec, rest] = this.getCodecFromBuffer(buff);\n    // TODO: try to do this without casting\n    return unpacker.fromBytes(rest, codec)[0] as FromBytesReturn<T>;\n  };\n\n  unpackTransaction = (buff: Uint8Array): Transaction => {\n    const [codec, rest] = this.getCodecFromBuffer(buff);\n    return codec.UnpackPrefix<Transaction>(rest)[0];\n  };\n\n  public getCodecFromBuffer(buff: Uint8Array): [Codec, Uint8Array] {\n    const [codecId, rest] = unpack(buff, [Short]);\n    const codec = this.getCodecForVersion(codecId);\n    return [codec, rest];\n  }\n\n  getCodecForVersion(codecId: Short): Codec {\n    if (!this.codecs[codecId.value()]) {\n      throw new Error(`codec id(${codecId.value()}) not found`);\n    }\n    return this.codecs[codecId.value()];\n  }\n\n  getDefaultCodec() {\n    return this.getCodecForVersion(new Short(DEFAULT_CODEC_VERSION));\n  }\n\n  getDefaultCodecId() {\n    return new Short(DEFAULT_CODEC_VERSION);\n  }\n\n  packCodec(\n    serializable: Serializable,\n    codecVersion = DEFAULT_CODEC_VERSION,\n  ): Uint8Array {\n    const codecIdShort = new Short(codecVersion);\n    const codec = this.getCodecForVersion(codecIdShort);\n    return concatBytes(codecIdShort.toBytes(), codec.PackPrefix(serializable));\n  }\n}\n", "export const DEFAULT_CODEC_VERSION = 0;\n", "import { serializable } from '../../common/types';\nimport { Bytes, Int } from '../../primitives';\nimport { pack, unpack } from '../../../utils/struct';\nimport { Input, OutputOwnersList } from '../secp256k1';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/nftfx/mint_operation.go\n * @see https://docs.avax.network/specs/avm-transaction-serialization#nft-mint-op\n */\n@serializable()\nexport class MintOperation {\n  _type = TypeSymbols.NftFxMintOperation;\n  constructor(\n    private readonly input: Input,\n    private readonly groupId: Int,\n    private readonly payload: Bytes,\n    private readonly outputOwnerList: OutputOwnersList,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array): [MintOperation, Uint8Array] {\n    const [input, groupId, payload, outputOwnerList, remaining] = unpack(\n      bytes,\n      [Input, Int, Bytes, OutputOwnersList] as const,\n    );\n    return [\n      new MintOperation(input, groupId, payload, outputOwnerList),\n      remaining,\n    ];\n  }\n\n  toBytes(codec) {\n    return pack(\n      [this.input, this.groupId, this.payload, this.outputOwnerList],\n      codec,\n    );\n  }\n}\n", "import { serializable } from '../../common/types';\nimport { Int } from '../../primitives';\nimport { pack, unpack } from '../../../utils/struct';\nimport { OutputOwners } from '../secp256k1';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/nftfx/mint_output.go\n * @see https://docs.avax.network/specs/avm-transaction-serialization/#nft-mint-output\n */\n@serializable()\nexport class MintOutput {\n  _type = TypeSymbols.NftFxMintOutput;\n\n  constructor(\n    private readonly groupId: Int,\n    private readonly outputOwners: OutputOwners,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec): [MintOutput, Uint8Array] {\n    const [groupId, owners, remaining] = unpack(\n      bytes,\n      [Int, OutputOwners] as const,\n      codec,\n    );\n\n    return [new MintOutput(groupId, owners), remaining];\n  }\n\n  toBytes(codec) {\n    return pack([this.groupId, this.outputOwners], codec);\n  }\n}\n", "import { serializable } from '../../common/types';\nimport { Bytes, Int } from '../../primitives';\nimport { pack, unpack } from '../../../utils/struct';\nimport { OutputOwners } from '../secp256k1';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/nftfx/transfer_output.go\n * @see https://docs.avax.network/specs/avm-transaction-serialization/#nft-transfer-output\n */\n@serializable()\nexport class TransferOutput {\n  _type = TypeSymbols.NftFxTransferOutput;\n\n  constructor(\n    public readonly groupId: Int,\n    public readonly payload: Bytes,\n    public readonly outputOwners: OutputOwners,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array): [TransferOutput, Uint8Array] {\n    const [groupId, payload, outputOwners, remaining] = unpack(bytes, [\n      Int,\n      Bytes,\n      OutputOwners,\n    ] as const);\n\n    return [new TransferOutput(groupId, payload, outputOwners), remaining];\n  }\n\n  toBytes(codec) {\n    return pack([this.groupId, this.payload, this.outputOwners], codec);\n  }\n}\n", "import { serializable } from '../../common/types';\nimport { pack, unpack } from '../../../utils/struct';\nimport { Input } from '../secp256k1';\nimport { TransferOutput } from './transferOutput';\nimport { TypeSymbols } from '../../constants';\n\n/**\n * https://docs.avax.network/specs/avm-transaction-serialization#nft-transfer-op\n *\n */\n@serializable()\nexport class TransferOperation {\n  _type = TypeSymbols.NftFxTransferOperation;\n\n  constructor(\n    private readonly input: Input,\n    private readonly output: TransferOutput,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array): [TransferOperation, Uint8Array] {\n    const [input, output, remaining] = unpack(bytes, [Input, TransferOutput]);\n\n    return [new TransferOperation(input, output), remaining];\n  }\n\n  toBytes(codec) {\n    return pack([this.input, this.output], codec);\n  }\n}\n", "import { Credential } from './credential';\nimport { MintOperation } from './mintOperation';\nimport { MintOutput } from './mintOutput';\nimport { TransferOperation } from './transferOperation';\nimport { TransferOutput } from './transferOutput';\n\n// https://github.com/ava-labs/avalanchego/blob/master/vms/nftfx/fx.go\nconst TypeRegistry = Object.freeze([\n  MintOutput,\n  TransferOutput,\n  MintOperation,\n  TransferOperation,\n  Credential,\n]);\n\nexport {\n  Credential,\n  MintOutput,\n  TransferOutput,\n  MintOperation,\n  TransferOperation,\n  TypeRegistry,\n};\n", "import { Credential as SepkCredential } from '../secp256k1/credential';\nimport { TypeSymbols } from '../../constants';\n\nexport class Credential extends SepkCredential {\n  _type = TypeSymbols.NftFxCredential;\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport type { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Int } from '../primitives';\nimport { unpackCodecList } from '../../utils/serializeList';\nimport { unpack } from '../../utils/struct';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#initial-state\n */\n@serializable()\nexport class InitialState {\n  _type = TypeSymbols.InitialState;\n\n  constructor(\n    private readonly fxId: Int,\n    private readonly outputs: Serializable[],\n  ) {}\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [InitialState, Uint8Array] {\n    const [fxId, outputs, rest] = unpack(bytes, [Int, unpackCodecList], codec);\n    return [new InitialState(fxId, outputs), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(this.fxId.toBytes(), codec.PackPrefixList(this.outputs));\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Byte, Stringpr } from '../primitives';\nimport { InitialState } from './initialState';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-createassettx\n */\n@serializable()\nexport class CreateAssetTx {\n  _type = TypeSymbols.CreateAssetTx;\n\n  constructor(\n    private readonly baseTx: BaseTx,\n    private readonly name: Stringpr,\n    private readonly symbol: Stringpr,\n    private readonly denomination: Byte,\n    private readonly initialStates: InitialState[],\n  ) {}\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [CreateAssetTx, Uint8Array] {\n    const [baseTx, name, symbol, domination, initialStates, remaining] = unpack(\n      bytes,\n      [BaseTx, Stringpr, Stringpr, Byte, toListStruct(InitialState)],\n      codec,\n    );\n    return [\n      new CreateAssetTx(baseTx, name, symbol, domination, initialStates),\n      remaining,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.name, this.symbol, this.denomination], codec),\n      packList(this.initialStates, codec),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { AVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-Exporttx\n */\n@serializable()\nexport class ExportTx extends AVMTx {\n  _type = TypeSymbols.AvmExportTx;\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly destination: Id,\n    public readonly outs: TransferableOutput[],\n  ) {\n    super();\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [ExportTx, Uint8Array] {\n    const [baseTx, sourceChain, outs, remaining] = unpack(\n      bytes,\n      [BaseTx, Id, toListStruct(TransferableOutput)],\n      codec,\n    );\n    return [new ExportTx(baseTx, sourceChain, outs), remaining];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.destination], codec),\n      packList(this.outs, codec),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableInput } from '../avax/transferableInput';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { AVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-importtx\n */\n@serializable()\nexport class ImportTx extends AVMTx {\n  _type = TypeSymbols.AvmImportTx;\n\n  constructor(\n    readonly baseTx: BaseTx,\n    readonly sourceChain: Id,\n    readonly ins: TransferableInput[],\n  ) {\n    super();\n  }\n\n  getSigIndices() {\n    return this.ins\n      .map((inp) => inp.sigIndicies())\n      .concat(super.getSigIndices());\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [ImportTx, Uint8Array] {\n    const [baseTx, sourceChain, ins, remaining] = unpack(\n      bytes,\n      [BaseTx, Id, toListStruct(TransferableInput)],\n      codec,\n    );\n    return [new ImportTx(baseTx, sourceChain, ins), remaining];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.sourceChain], codec),\n      packList(this.ins, codec),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common/id';\nimport { UTXOID } from './utxoId';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#transferable-op\n */\n@serializable()\nexport class TransferableOp {\n  _type = TypeSymbols.TransferableOp;\n\n  constructor(\n    private readonly assetId: Id,\n    private readonly UTXOId: UTXOID[],\n    private readonly transferOp: Serializable,\n  ) {}\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [TransferableOp, Uint8Array] {\n    const [assetId, utxoID, transferOp, remaining] = unpack(\n      bytes,\n      [Id, toListStruct(UTXOID), Codec],\n      codec,\n    );\n\n    return [new TransferableOp(assetId, utxoID, transferOp), remaining];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.assetId], codec),\n      packList(this.UTXOId, codec),\n      codec.PackPrefix(this.transferOp),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOp } from '../avax/transferableOp';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-OperationTx\n */\n@serializable()\nexport class OperationTx {\n  _type = TypeSymbols.OperationTx;\n\n  constructor(\n    private readonly baseTx: BaseTx,\n    private readonly ops: TransferableOp[],\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [OperationTx, Uint8Array] {\n    const [baseTx, ops, remaining] = unpack(\n      bytes,\n      [BaseTx, toListStruct(TransferableOp)],\n      codec,\n    );\n    return [new OperationTx(baseTx, ops), remaining];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(this.baseTx.toBytes(codec), packList(this.ops, codec));\n  }\n}\n", "import { BaseTx } from './baseTx';\nimport { Codec } from '../codec/codec';\nimport { Manager } from '../codec/manager';\nimport * as NftFx from '../fxs/nft';\nimport * as Secp256k1Fx from '../fxs/secp256k1';\nimport { CreateAssetTx } from './createAssetTx';\nimport { ExportTx } from './exportTx';\nimport { ImportTx } from './importTx';\nimport { OperationTx } from './operationTx';\n\n// https://github.com/ava-labs/avalanchego/blob/master/vms/avm/txs/parser.go\n// https://github.com/ava-labs/avalanchego/blob/master/wallet/chain/x/constants.go\nlet manager: Manager;\n\nexport const getAVMManager = () => {\n  if (manager) return manager;\n\n  manager = new Manager();\n  manager.RegisterCodec(\n    0,\n    new Codec([\n      BaseTx,\n      CreateAssetTx,\n      OperationTx,\n      ImportTx,\n      ExportTx,\n      ...Secp256k1Fx.TypeRegistry,\n      ...NftFx.TypeRegistry,\n      // TODO: ...PropertyFx.TypeRegistry,\n    ]),\n  );\n  return manager;\n};\n", "import { Transaction } from '../../vms/common/transaction';\nimport { EVM } from '../constants';\nimport type { Id } from '../fxs/common';\n\nexport abstract class EVMTx extends Transaction {\n  abstract blockchainId: Id;\n  vm = EVM;\n\n  getBlockchainId = () => {\n    return this.blockchainId.toString();\n  };\n}\n", "import { packSwitched, unpack } from '../../utils/struct';\nimport { serializable } from '../../vms/common/types';\nimport type { Codec } from '../codec';\nimport { Address, Id } from '../fxs/common';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class Input {\n  _type = TypeSymbols.EvmInput;\n\n  constructor(\n    public readonly address: Address,\n    public readonly amount: BigIntPr,\n    public readonly assetId: Id,\n    public readonly nonce: BigIntPr,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [Input, Uint8Array] {\n    const [address, amount, assetId, nonce, rest] = unpack(\n      bytes,\n      [Address, BigIntPr, Id, BigIntPr],\n      codec,\n    );\n    return [new Input(address, amount, assetId, nonce), rest];\n  }\n\n  static compare = (a: Input, b: Input) => {\n    if (a.address.value() !== b.address.value()) {\n      return a.address.value().localeCompare(b.address.value());\n    }\n    return a.assetId.value().localeCompare(b.assetId.value());\n  };\n\n  toBytes(codec: Codec) {\n    return packSwitched(\n      codec,\n      this.address,\n      this.amount,\n      this.assetId,\n      this.nonce,\n    );\n  }\n}\n", "import type { Codec } from '../../serializable/codec';\nimport type { TypeSymbols } from '../../serializable/constants';\n\nexport interface Serializable {\n  _type: TypeSymbols;\n\n  toBytes(codec: Codec): Uint8Array;\n}\n\nexport interface SerializableStatic {\n  new (...args: any[]): Serializable;\n\n  fromBytes(bytes: Uint8Array, codec: Codec): [Serializable, Uint8Array];\n}\n\nexport function staticImplements<T>() {\n  return <U extends T>(constructor: U) => {\n    constructor;\n  };\n}\n\nexport function serializable() {\n  return staticImplements<SerializableStatic>();\n}\n\nexport interface Amounter extends Serializable {\n  amount(): bigint;\n}\n", "import { toListStruct } from '../../utils/serializeList';\nimport { packSwitched, unpack } from '../../utils/struct';\nimport { serializable } from '../../vms/common/types';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport type { Codec } from '../codec';\nimport { Id } from '../fxs/common';\nimport { Int } from '../primitives';\nimport { EVMTx } from './abstractTx';\nimport { Input } from './input';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class ExportTx extends EVMTx {\n  _type = TypeSymbols.EvmExportTx;\n\n  constructor(\n    public readonly networkId: Int,\n    public readonly blockchainId: Id,\n    public readonly destinationChain: Id,\n    public readonly ins: Input[],\n    public readonly exportedOutputs: TransferableOutput[],\n  ) {\n    super();\n  }\n  getSigIndices() {\n    return [[0]];\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [ExportTx, Uint8Array] {\n    const [networkId, blockchainId, sourceChain, ins, exportedOutputs, rest] =\n      unpack(\n        bytes,\n        [Int, Id, Id, toListStruct(Input), toListStruct(TransferableOutput)],\n        codec,\n      );\n    return [\n      new ExportTx(networkId, blockchainId, sourceChain, ins, exportedOutputs),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return packSwitched(\n      codec,\n      this.networkId,\n      this.blockchainId,\n      this.destinationChain,\n      this.ins,\n      this.exportedOutputs,\n    );\n  }\n}\n", "import { packSwitched, unpack } from '../../utils/struct';\nimport { serializable } from '../../vms/common/types';\nimport type { Codec } from '../codec';\nimport { Address, Id } from '../fxs/common';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class Output {\n  _type = TypeSymbols.EvmOutput;\n\n  constructor(\n    public readonly address: Address,\n    public readonly amount: BigIntPr,\n    public readonly assetId: Id,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [Output, Uint8Array] {\n    const [address, amount, assetId, rest] = unpack(\n      bytes,\n      [Address, BigIntPr, Id],\n      codec,\n    );\n    return [new Output(address, amount, assetId), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return packSwitched(codec, this.address, this.amount, this.assetId);\n  }\n}\n", "import { toListStruct } from '../../utils/serializeList';\nimport { packSwitched, unpack } from '../../utils/struct';\nimport { serializable } from '../../vms/common/types';\nimport { TransferableInput } from '../avax/transferableInput';\nimport type { Codec } from '../codec';\nimport { Id } from '../fxs/common';\nimport { Int } from '../primitives';\nimport { EVMTx } from './abstractTx';\nimport { Output } from './output';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class ImportTx extends EVMTx {\n  _type = TypeSymbols.EvmImportTx;\n\n  constructor(\n    public readonly networkId: Int,\n    public readonly blockchainId: Id,\n    public readonly sourceChain: Id,\n    public readonly importedInputs: TransferableInput[],\n    public readonly Outs: Output[],\n  ) {\n    super();\n  }\n\n  getSigIndices() {\n    return this.importedInputs.map((inp) => inp.sigIndicies());\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [ImportTx, Uint8Array] {\n    const [networkId, blockchainId, sourceChain, importedInputs, Outs, rest] =\n      unpack(\n        bytes,\n        [Int, Id, Id, toListStruct(TransferableInput), toListStruct(Output)],\n        codec,\n      );\n    return [\n      new ImportTx(networkId, blockchainId, sourceChain, importedInputs, Outs),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return packSwitched(\n      codec,\n      this.networkId,\n      this.blockchainId,\n      this.sourceChain,\n      this.importedInputs,\n      this.Outs,\n    );\n  }\n}\n", "import { Codec, Manager } from '../codec';\nimport * as Secp256k1Fx from '../fxs/secp256k1';\nimport { ExportTx } from './exportTx';\nimport { ImportTx } from './importTx';\n\n// https://github.com/ava-labs/coreth/blob/master/plugin/evm/codec.go\nlet manager;\nexport const codec = new Codec([\n  ImportTx, // 0\n  ExportTx, // 1\n\n  ...Array(3).fill(undefined),\n\n  ...Secp256k1Fx.TypeRegistry,\n  Secp256k1Fx.Input,\n  Secp256k1Fx.OutputOwners,\n]);\n\nexport const getEVMManager = () => {\n  if (manager) return manager;\n  manager = new Manager();\n  manager.RegisterCodec(0, codec);\n  return manager;\n};\n", "import { AvaxTx } from '../avax/avaxTx';\nimport { PVM } from '../constants';\n\nexport abstract class PVMTx extends AvaxTx {\n  vm = PVM;\n}\n", "import { pack, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { NodeId } from '../fxs/common/nodeId';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-add-validator-tx\n */\n@serializable()\nexport class Validator {\n  _type = TypeSymbols.Validator;\n\n  constructor(\n    public readonly nodeId: NodeId,\n    public readonly startTime: BigIntPr,\n    public readonly endTime: BigIntPr,\n    public readonly weight: BigIntPr,\n  ) {}\n\n  static fromNative(\n    nodeId: string,\n    startTime: bigint,\n    endTime: bigint,\n    weight: bigint,\n  ) {\n    return new Validator(\n      NodeId.fromString(nodeId),\n      new BigIntPr(startTime),\n      new BigIntPr(endTime),\n      new BigIntPr(weight),\n    );\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [Validator, Uint8Array] {\n    const [nodeId, startTime, endTime, weight, rest] = unpack(\n      bytes,\n      [NodeId, BigIntPr, BigIntPr, BigIntPr],\n      codec,\n    );\n\n    return [new Validator(nodeId, startTime, endTime, weight), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return pack(\n      [this.nodeId, this.startTime, this.endTime, this.weight],\n      codec,\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { PVMTx } from './abstractTx';\nimport { Validator } from './validator';\nimport type { OutputOwners } from '../fxs/secp256k1';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @deprecated since {@link https://github.com/avalanche-foundation/ACPs/blob/main/ACPs/62-disable-addvalidatortx-and-adddelegatortx.md|Durango-upgrade}\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-add-delegator-tx\n */\n@serializable()\nexport class AddDelegatorTx extends PVMTx {\n  _type = TypeSymbols.AddDelegatorTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly validator: Validator,\n    public readonly stake: TransferableOutput[],\n    public readonly rewardsOwner: Serializable,\n  ) {\n    super();\n  }\n\n  getRewardsOwner() {\n    return this.rewardsOwner as OutputOwners;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [AddDelegatorTx, Uint8Array] {\n    const [baseTx, validator, stake, rewardsOwner, rest] = unpack(\n      bytes,\n      [BaseTx, Validator, toListStruct(TransferableOutput), Codec],\n      codec,\n    );\n\n    return [new AddDelegatorTx(baseTx, validator, stake, rewardsOwner), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.validator, this.stake], codec),\n      codec.PackPrefix(this.rewardsOwner),\n    );\n  }\n}\n", "import type { Serializable } from '../common/types';\nimport type { Id } from '../fxs/common';\nimport type { Input } from '../fxs/secp256k1';\nimport { PVMTx } from './abstractTx';\n\nexport abstract class AbstractSubnetTx extends PVMTx {\n  abstract subnetAuth: Serializable;\n\n  abstract getSubnetID(): Id;\n\n  getSubnetAuth() {\n    return this.subnetAuth as Input;\n  }\n\n  getSigIndices(): number[][] {\n    return [\n      ...this.getInputs().map((input) => {\n        return input.sigIndicies();\n      }),\n      this.getSubnetAuth().values(),\n    ].filter((indicies): indicies is number[] => indicies !== undefined);\n  }\n}\n", "import type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { pack, unpack } from '../../utils/struct';\nimport { Validator } from './validator';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class SubnetValidator {\n  _type = TypeSymbols.SubnetValidator;\n\n  constructor(\n    public readonly validator: Validator,\n    public readonly subnetId: Id,\n  ) {}\n\n  static fromNative(\n    nodeId: string,\n    startTime: bigint,\n    endTime: bigint,\n    weight: bigint,\n    subnetId: Id,\n  ) {\n    return new SubnetValidator(\n      Validator.fromNative(nodeId, startTime, endTime, weight),\n      subnetId,\n    );\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [SubnetValidator, Uint8Array] {\n    const [validator, subnetId, rest] = unpack(bytes, [Validator, Id], codec);\n    return [new SubnetValidator(validator, subnetId), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return pack([this.validator, this.subnetId], codec);\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { AbstractSubnetTx } from './abstractSubnetTx';\nimport { SubnetValidator } from './subnetValidator';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-add-subnet-validator-tx\n */\n@serializable()\nexport class AddSubnetValidatorTx extends AbstractSubnetTx {\n  _type = TypeSymbols.AddSubnetValidatorTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetValidator: SubnetValidator,\n    public readonly subnetAuth: Serializable,\n  ) {\n    super();\n  }\n\n  getSubnetID() {\n    return this.subnetValidator.subnetId;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [AddSubnetValidatorTx, Uint8Array] {\n    const [baseTx, subnetValidator, subnetAuth, rest] = unpack(\n      bytes,\n      [BaseTx, SubnetValidator, Codec],\n      codec,\n    );\n    return [\n      new AddSubnetValidatorTx(baseTx, subnetValidator, subnetAuth),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.subnetValidator], codec),\n      codec.PackPrefix(this.subnetAuth),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport type { OutputOwners } from '../fxs/secp256k1';\nimport { Int } from '../primitives';\nimport { PVMTx } from './abstractTx';\nimport { Validator } from './validator';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @deprecated since {@link https://github.com/avalanche-foundation/ACPs/blob/main/ACPs/62-disable-addvalidatortx-and-adddelegatortx.md|Durango-upgrade}\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-add-validator-tx\n */\n@serializable()\nexport class AddValidatorTx extends PVMTx {\n  _type = TypeSymbols.AddValidatorTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly validator: Validator,\n    public readonly stake: TransferableOutput[],\n    public readonly rewardsOwner: Serializable,\n    public readonly shares: Int,\n  ) {\n    super();\n  }\n\n  getRewardsOwner() {\n    return this.rewardsOwner as OutputOwners;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [AddValidatorTx, Uint8Array] {\n    const [baseTx, validator, stake, rewardsOwner, shares, rest] = unpack(\n      bytes,\n      [BaseTx, Validator, toListStruct(TransferableOutput), Codec, Int],\n      codec,\n    );\n    return [\n      new AddValidatorTx(baseTx, validator, stake, rewardsOwner, shares),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.validator], codec),\n      packList(this.stake, codec),\n      codec.PackPrefix(this.rewardsOwner),\n      this.shares.toBytes(),\n    );\n  }\n}\n", "import { packSwitched, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { BigIntPr } from '../primitives';\nimport { PVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class AdvanceTimeTx extends PVMTx {\n  _type = TypeSymbols.AdvanceTimeTx;\n\n  constructor(public readonly time: BigIntPr) {\n    super();\n  }\n  baseTx = undefined;\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [AdvanceTimeTx, Uint8Array] {\n    const [time, rest] = unpack(bytes, [BigIntPr], codec);\n    return [new AdvanceTimeTx(time), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return packSwitched(codec, this.time);\n  }\n}\n", "import { concatBytes } from '@noble/hashes/utils';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { Bytes, Stringpr } from '../primitives';\nimport { AbstractSubnetTx } from './abstractSubnetTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class CreateChainTx extends AbstractSubnetTx {\n  _type = TypeSymbols.CreateChainTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetID: Id,\n    public readonly chainName: Stringpr,\n    public readonly vmID: Id,\n    public readonly fxIds: Id[],\n    public readonly genesisData: Bytes,\n    public readonly subnetAuth: Serializable,\n  ) {\n    super();\n  }\n\n  getSubnetID() {\n    return this.subnetID;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [CreateChainTx, Uint8Array] {\n    const [\n      baseTx,\n      subnetID,\n      chainName,\n      vmID,\n      fxIds,\n      genesisData,\n      subnetAuth,\n      rest,\n    ] = unpack(\n      bytes,\n      [BaseTx, Id, Stringpr, Id, toListStruct(Id), Bytes, Codec],\n      codec,\n    );\n    return [\n      new CreateChainTx(\n        baseTx,\n        subnetID,\n        chainName,\n        vmID,\n        fxIds,\n        genesisData,\n        subnetAuth,\n      ),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.subnetID, this.chainName, this.vmID], codec),\n      packList(this.fxIds, codec),\n      this.genesisData.toBytes(),\n      codec.PackPrefix(this.subnetAuth),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport type { OutputOwners } from '../fxs/secp256k1';\nimport { PVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * The docs for this do not match the actual code, there is no rewards owners just Owners\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-create-subnet-tx\n * @see https://github.com/ava-labs/avalanchego/blob/535456298046b5c2fbcb95ce36702422b6980c66/vms/platformvm/txs/create_subnet_tx.go\n */\n@serializable()\nexport class CreateSubnetTx extends PVMTx {\n  _type = TypeSymbols.CreateSubnetTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetOwners: Serializable,\n  ) {\n    super();\n  }\n\n  getSubnetOwners() {\n    return this.subnetOwners as OutputOwners;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [CreateSubnetTx, Uint8Array] {\n    const [baseTx, subnetOwners, rest] = unpack(bytes, [BaseTx, Codec], codec);\n    return [new CreateSubnetTx(baseTx, subnetOwners), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx], codec),\n      codec.PackPrefix(this.subnetOwners),\n    );\n  }\n}\n", "import { toListStruct } from '../../utils/serializeList';\nimport { packSwitched, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { PVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class ExportTx extends PVMTx {\n  _type = TypeSymbols.PvmExportTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly destination: Id,\n    public readonly outs: TransferableOutput[],\n  ) {\n    super();\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [ExportTx, Uint8Array] {\n    const [baseTx, id, outs, rest] = unpack(\n      bytes,\n      [BaseTx, Id, toListStruct(TransferableOutput)],\n      codec,\n    );\n    return [new ExportTx(baseTx, id, outs), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return packSwitched(codec, this.baseTx, this.destination, this.outs);\n  }\n}\n", "import { toListStruct } from '../../utils/serializeList';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableInput } from '../avax/transferableInput';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { PVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class ImportTx extends PVMTx {\n  _type = TypeSymbols.PvmImportTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly sourceChain: Id,\n    public readonly ins: TransferableInput[],\n  ) {\n    super();\n  }\n\n  getSigIndices() {\n    return this.ins.map((inp) => inp.sigIndicies());\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [ImportTx, Uint8Array] {\n    const [baseTx, sourceChain, ins, rest] = unpack(\n      bytes,\n      [BaseTx, Id, toListStruct(TransferableInput)],\n      codec,\n    );\n    return [new ImportTx(baseTx, sourceChain, ins), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return pack([this.baseTx, this.sourceChain, this.ins], codec);\n  }\n}\n", "import { packSwitched, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { PVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see\n */\n@serializable()\nexport class RewardValidatorTx extends PVMTx {\n  _type = TypeSymbols.RewardValidatorTx;\n\n  constructor(public readonly txId: Id) {\n    super();\n  }\n\n  baseTx = undefined;\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [RewardValidatorTx, Uint8Array] {\n    const [txId, rest] = unpack(bytes, [Id], codec);\n    return [new RewardValidatorTx(txId), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return packSwitched(codec, this.txId);\n  }\n}\n", "import { concatBytes } from '@noble/hashes/utils';\nimport { packSwitched, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec/codec';\nimport type { Amounter } from '../common/types';\nimport { serializable } from '../common/types';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#stakeablelockin\n */\n@serializable()\nexport class StakeableLockIn {\n  _type = TypeSymbols.StakeableLockIn;\n\n  constructor(\n    public readonly lockTime: BigIntPr,\n    public readonly transferableInput: Amounter,\n  ) {}\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [StakeableLockIn, Uint8Array] {\n    const [lockTime, rest] = unpack(bytes, [BigIntPr], codec);\n\n    const [transferableInput, remaining] = codec.UnpackPrefix<Amounter>(rest);\n\n    return [new StakeableLockIn(lockTime, transferableInput), remaining];\n  }\n  amount() {\n    return this.transferableInput.amount();\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      packSwitched(codec, this.lockTime),\n      codec.PackPrefix(this.transferableInput),\n    );\n  }\n}\n", "import { concatBytes } from '@noble/hashes/utils';\nimport { packSwitched, unpack } from '../../utils/struct';\nimport { isTransferOut } from '../../utils/typeGuards';\nimport { Codec } from '../codec/codec';\nimport type { Amounter } from '../common/types';\nimport { serializable } from '../common/types';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#stakeablelockin\n */\n@serializable()\nexport class StakeableLockOut implements Amounter {\n  _type = TypeSymbols.StakeableLockOut;\n\n  constructor(\n    public readonly lockTime: BigIntPr,\n    public readonly transferOut: Amounter,\n  ) {}\n\n  amount() {\n    return this.transferOut.amount();\n  }\n\n  /**\n   * Get the stakeable locktime of this output. After this date this output can be used like a TransferOut.\n   */\n  getStakeableLocktime() {\n    return this.lockTime.value();\n  }\n\n  getLocktime() {\n    return this.lockTime.value();\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [StakeableLockOut, Uint8Array] {\n    const [lockTime, transferOut, rest] = unpack(\n      bytes,\n      [BigIntPr, Codec],\n      codec,\n    );\n    return [new StakeableLockOut(lockTime, transferOut as Amounter), rest];\n  }\n\n  getOwners() {\n    if (isTransferOut(this.transferOut)) {\n      return this.transferOut.getOwners();\n    }\n    throw new Error('Unable to get owners.');\n  }\n\n  getOutputOwners() {\n    if (isTransferOut(this.transferOut)) {\n      return this.transferOut.outputOwners;\n    }\n    throw new Error('Unable to get output owners.');\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      packSwitched(codec, this.lockTime),\n      codec.PackPrefix(this.transferOut),\n    );\n  }\n}\n", "import { PVMTx } from './abstractTx';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { SubnetValidator } from './subnetValidator';\nimport { Codec } from '../codec';\nimport { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport { Int } from '../primitives';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport type { Signer, SignerEmpty } from './signer';\nimport type { OutputOwners } from '../fxs/secp256k1';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-add-permissionless-validator-tx\n */\n@serializable()\nexport class AddPermissionlessValidatorTx extends PVMTx {\n  _type = TypeSymbols.AddPermissionlessValidatorTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetValidator: SubnetValidator,\n    public readonly signer: Signer | SignerEmpty,\n    public readonly stake: TransferableOutput[],\n    public readonly validatorRewardsOwner: Serializable,\n    public readonly delegatorRewardsOwner: Serializable,\n    public readonly shares: Int,\n  ) {\n    super();\n  }\n\n  getValidatorRewardsOwner() {\n    return this.validatorRewardsOwner as OutputOwners;\n  }\n\n  getDelegatorRewardsOwner() {\n    return this.delegatorRewardsOwner as OutputOwners;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [AddPermissionlessValidatorTx, Uint8Array] {\n    const [\n      baseTx,\n      subnetValidator,\n      signer,\n      stakeOuts,\n      validatorRewardsOwner,\n      delegatorRewardsOwner,\n      delegationShares,\n      rest,\n    ] = unpack(\n      bytes,\n      [\n        BaseTx,\n        SubnetValidator,\n        Codec,\n        toListStruct(TransferableOutput),\n        Codec,\n        Codec,\n        Int,\n      ],\n      codec,\n    );\n\n    return [\n      new AddPermissionlessValidatorTx(\n        baseTx,\n        subnetValidator,\n        signer,\n        stakeOuts,\n        validatorRewardsOwner,\n        delegatorRewardsOwner,\n        delegationShares,\n      ),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec): Uint8Array {\n    return concatBytes(\n      pack([this.baseTx, this.subnetValidator], codec),\n      codec.PackPrefix(this.signer),\n      packList(this.stake, codec),\n      codec.PackPrefix(this.validatorRewardsOwner),\n      codec.PackPrefix(this.delegatorRewardsOwner),\n      this.shares.toBytes(),\n    );\n  }\n}\n", "import { PVMTx } from './abstractTx';\nimport { BaseTx } from '../avax/baseTx';\nimport { TransferableOutput } from '../avax/transferableOutput';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { SubnetValidator } from './subnetValidator';\nimport { Codec } from '../codec';\nimport { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport { packList, toListStruct } from '../../utils/serializeList';\nimport type { OutputOwners } from '../fxs/secp256k1';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-add-permissionless-delegator-tx\n */\n@serializable()\nexport class AddPermissionlessDelegatorTx extends PVMTx {\n  _type = TypeSymbols.AddPermissionlessDelegatorTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetValidator: SubnetValidator,\n    public readonly stake: TransferableOutput[],\n    public readonly delegatorRewardsOwner: Serializable,\n  ) {\n    super();\n  }\n\n  getDelegatorRewardsOwner() {\n    return this.delegatorRewardsOwner as OutputOwners;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [AddPermissionlessDelegatorTx, Uint8Array] {\n    const [baseTx, subnetValidator, stakeOuts, delegatorRewardsOwner, rest] =\n      unpack(\n        bytes,\n        [BaseTx, SubnetValidator, toListStruct(TransferableOutput), Codec],\n        codec,\n      );\n\n    return [\n      new AddPermissionlessDelegatorTx(\n        baseTx,\n        subnetValidator,\n        stakeOuts,\n        delegatorRewardsOwner,\n      ),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec): Uint8Array {\n    return concatBytes(\n      pack([this.baseTx, this.subnetValidator], codec),\n      packList(this.stake, codec),\n      codec.PackPrefix(this.delegatorRewardsOwner),\n    );\n  }\n}\n", "/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nconst B256 = 2n ** 256n; // secp256k1 is short weierstrass curve\nconst P = B256 - 0x1000003d1n; // curve's field prime\nconst N = B256 - 0x14551231950b75fc4402da1732fc9bebfn; // curve (group) order\nconst Gx = 0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798n; // base point x\nconst Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8n; // base point y\nconst CURVE = { p: P, n: N, a: 0n, b: 7n, Gx, Gy }; // exported variables incl. a, b\nconst fLen = 32; // field / group byte length\nconst crv = (x) => mod(mod(x * x) * x + CURVE.b); // x³ + ax + b weierstrass formula; no a\nconst err = (m = '') => { throw new Error(m); }; // error helper, messes-up stack trace\nconst big = (n) => typeof n === 'bigint'; // is big integer\nconst str = (s) => typeof s === 'string'; // is string\nconst fe = (n) => big(n) && 0n < n && n < P; // is field element (invertible)\nconst ge = (n) => big(n) && 0n < n && n < N; // is group element\nconst au8 = (a, l) => // is Uint8Array (of specific length)\n !(a instanceof Uint8Array) || (typeof l === 'number' && l > 0 && a.length !== l) ?\n    err('Uint8Array expected') : a;\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst toU8 = (a, len) => au8(str(a) ? h2b(a) : u8n(a), len); // norm(hex/u8a) to u8a\nconst mod = (a, b = P) => { let r = a % b; return r >= 0n ? r : b + r; }; // mod division\nconst isPoint = (p) => (p instanceof Point ? p : err('Point expected')); // is 3d point\nlet Gpows = undefined; // precomputes for base point G\nclass Point {\n    constructor(px, py, pz) {\n        this.px = px;\n        this.py = py;\n        this.pz = pz;\n    } //3d=less inversions\n    static fromAffine(p) { return new Point(p.x, p.y, 1n); }\n    static fromHex(hex) {\n        hex = toU8(hex); // convert hex string to Uint8Array\n        let p = undefined;\n        const head = hex[0], tail = hex.subarray(1); // first byte is prefix, rest is data\n        const x = slcNum(tail, 0, fLen), len = hex.length; // next 32 bytes are x coordinate\n        if (len === 33 && [0x02, 0x03].includes(head)) { // compressed points: 33b, start\n            if (!fe(x))\n                err('Point hex invalid: x not FE'); // with byte 0x02 or 0x03. Check if 0<x<P\n            let y = sqrt(crv(x)); // x³ + ax + b is right side of equation\n            const isYOdd = (y & 1n) === 1n; // y² is equivalent left-side. Calculate y²:\n            const headOdd = (head & 1) === 1; // y = √y²; there are two solutions: y, -y\n            if (headOdd !== isYOdd)\n                y = mod(-y); // determine proper solution\n            p = new Point(x, y, 1n); // create point\n        } // Uncompressed points: 65b, start with 0x04\n        if (len === 65 && head === 0x04)\n            p = new Point(x, slcNum(tail, fLen, 2 * fLen), 1n);\n        return p ? p.ok() : err('Point is not on curve'); // Verify the result\n    }\n    static fromPrivateKey(k) { return G.mul(toPriv(k)); } // Create point from a private key.\n    get x() { return this.aff().x; } // .x, .y will call expensive toAffine:\n    get y() { return this.aff().y; } // should be used with care.\n    equals(other) {\n        const { px: X1, py: Y1, pz: Z1 } = this;\n        const { px: X2, py: Y2, pz: Z2 } = isPoint(other); // isPoint() checks class equality\n        const X1Z2 = mod(X1 * Z2), X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2), Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() { return new Point(this.px, mod(-this.py), this.pz); } // Flip point over y coord\n    double() { return this.add(this); } // Point doubling: P+P, complete formula.\n    add(other) {\n        const { px: X1, py: Y1, pz: Z1 } = this; // free formula from Renes-Costello-Batina\n        const { px: X2, py: Y2, pz: Z2 } = isPoint(other); // https://eprint.iacr.org/2015/1060, algo 1\n        const { a, b } = CURVE; // Cost: 12M + 0S + 3*a + 3*b3 + 23add\n        let X3 = 0n, Y3 = 0n, Z3 = 0n;\n        const b3 = mod(b * 3n);\n        let t0 = mod(X1 * X2), t1 = mod(Y1 * Y2), t2 = mod(Z1 * Z2), t3 = mod(X1 + Y1); // step 1\n        let t4 = mod(X2 + Y2); // step 5\n        t3 = mod(t3 * t4);\n        t4 = mod(t0 + t1);\n        t3 = mod(t3 - t4);\n        t4 = mod(X1 + Z1);\n        let t5 = mod(X2 + Z2); // step 10\n        t4 = mod(t4 * t5);\n        t5 = mod(t0 + t2);\n        t4 = mod(t4 - t5);\n        t5 = mod(Y1 + Z1);\n        X3 = mod(Y2 + Z2); // step 15\n        t5 = mod(t5 * X3);\n        X3 = mod(t1 + t2);\n        t5 = mod(t5 - X3);\n        Z3 = mod(a * t4);\n        X3 = mod(b3 * t2); // step 20\n        Z3 = mod(X3 + Z3);\n        X3 = mod(t1 - Z3);\n        Z3 = mod(t1 + Z3);\n        Y3 = mod(X3 * Z3);\n        t1 = mod(t0 + t0); // step 25\n        t1 = mod(t1 + t0);\n        t2 = mod(a * t2);\n        t4 = mod(b3 * t4);\n        t1 = mod(t1 + t2);\n        t2 = mod(t0 - t2); // step 30\n        t2 = mod(a * t2);\n        t4 = mod(t4 + t2);\n        t0 = mod(t1 * t4);\n        Y3 = mod(Y3 + t0);\n        t0 = mod(t5 * t4); // step 35\n        X3 = mod(t3 * X3);\n        X3 = mod(X3 - t0);\n        t0 = mod(t3 * t1);\n        Z3 = mod(t5 * Z3);\n        Z3 = mod(Z3 + t0); // step 40\n        return new Point(X3, Y3, Z3);\n    }\n    mul(n, safe = true) {\n        if (!safe && n === 0n)\n            return I; // in unsafe mode, allow zero\n        if (!ge(n))\n            err('invalid scalar'); // must be 0 < n < CURVE.n\n        if (this.equals(G))\n            return wNAF(n).p; // use precomputes for base point\n        let p = I, f = G; // init result point & fake point\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) { // double-and-add ladder\n            if (n & 1n)\n                p = p.add(d); // if bit is present, add to point\n            else if (safe)\n                f = f.add(d); // if not, add to fake for timing safety\n        }\n        return p;\n    }\n    mulAddQUns(R, u1, u2) {\n        return this.mul(u1, false).add(R.mul(u2, false)).ok(); // Unsafe: do NOT use for stuff related\n    } // to private keys. Doesn't use Shamir trick\n    toAffine() {\n        const { px: x, py: y, pz: z } = this; // (x, y, z) ∋ (x=x/z, y=y/z)\n        if (this.equals(I))\n            return { x: 0n, y: 0n }; // fast-path for zero point\n        if (z === 1n)\n            return { x, y }; // if z is 1, pass affine coordinates as-is\n        const iz = inv(z); // z^-1: invert z\n        if (mod(z * iz) !== 1n)\n            err('invalid inverse'); // (z * z^-1) must be 1, otherwise bad math\n        return { x: mod(x * iz), y: mod(y * iz) }; // x = x*z^-1; y = y*z^-1\n    }\n    assertValidity() {\n        const { x, y } = this.aff(); // convert to 2d xy affine point.\n        if (!fe(x) || !fe(y))\n            err('Point invalid: x or y'); // x and y must be in range 0 < n < P\n        return mod(y * y) === crv(x) ? // y² = x³ + ax + b, must be equal\n            this : err('Point invalid: not on curve');\n    }\n    multiply(n) { return this.mul(n); } // Aliases to compress code\n    aff() { return this.toAffine(); }\n    ok() { return this.assertValidity(); }\n    toHex(isCompressed = true) {\n        const { x, y } = this.aff(); // convert to 2d xy affine point\n        const head = isCompressed ? ((y & 1n) === 0n ? '02' : '03') : '04'; // 0x02, 0x03, 0x04 prefix\n        return head + n2h(x) + (isCompressed ? '' : n2h(y)); // prefix||x and ||y\n    }\n    toRawBytes(isCompressed = true) {\n        return h2b(this.toHex(isCompressed)); // re-use toHex(), convert hex to bytes\n    }\n}\nPoint.BASE = new Point(Gx, Gy, 1n); // Generator / base point\nPoint.ZERO = new Point(0n, 1n, 0n); // Identity / zero point\nconst { BASE: G, ZERO: I } = Point; // Generator, identity points\nconst padh = (n, pad) => n.toString(16).padStart(pad, '0');\nconst b2h = (b) => Array.from(b).map(e => padh(e, 2)).join(''); // bytes to hex\nconst h2b = (hex) => {\n    const l = hex.length; // error if not string,\n    if (!str(hex) || l % 2)\n        err('hex invalid 1'); // or has odd length like 3, 5.\n    const arr = u8n(l / 2); // create result array\n    for (let i = 0; i < arr.length; i++) {\n        const j = i * 2;\n        const h = hex.slice(j, j + 2); // hexByte. slice is faster than substr\n        const b = Number.parseInt(h, 16); // byte, created from string part\n        if (Number.isNaN(b) || b < 0)\n            err('hex invalid 2'); // byte must be valid 0 <= byte < 256\n        arr[i] = b;\n    }\n    return arr;\n};\nconst b2n = (b) => BigInt('0x' + (b2h(b) || '0')); // bytes to number\nconst slcNum = (b, from, to) => b2n(b.slice(from, to)); // slice bytes num\nconst n2b = (num) => {\n    return big(num) && num >= 0n && num < B256 ? h2b(padh(num, 2 * fLen)) : err('bigint expected');\n};\nconst n2h = (num) => b2h(n2b(num)); // number to 32b hex\nconst concatB = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + au8(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\nconst inv = (num, md = P) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md); // no neg exponent for now\n    let a = mod(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) { // uses euclidean gcd algorithm\n        const q = b / a, r = b % a; // not constant-time\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? mod(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst sqrt = (n) => {\n    let r = 1n; // So, a special, fast case. Paper: \"Square Roots from 1;24,51,10 to Dan Shanks\".\n    for (let num = n, e = (P + 1n) / 4n; e > 0n; e >>= 1n) { // powMod: modular exponentiation.\n        if (e & 1n)\n            r = (r * num) % P; // Uses exponentiation by squaring.\n        num = (num * num) % P; // Not constant-time.\n    }\n    return mod(r * r) === n ? r : err('sqrt invalid'); // check if result is valid\n};\nconst toPriv = (p) => {\n    if (!big(p))\n        p = b2n(toU8(p, fLen)); // convert to bigint when bytes\n    return ge(p) ? p : err('private key out of range'); // check if bigint is in range\n};\nconst moreThanHalfN = (n) => n > (N >> 1n); // if a number is bigger than CURVE.n/2\nfunction getPublicKey(privKey, isCompressed = true) {\n    return Point.fromPrivateKey(privKey).toRawBytes(isCompressed); // 33b or 65b output\n}\nclass Signature {\n    constructor(r, s, recovery) {\n        this.r = r;\n        this.s = s;\n        this.recovery = recovery;\n        this.assertValidity(); // recovery bit is optional when\n    } // constructed outside.\n    static fromCompact(hex) {\n        hex = toU8(hex, 64); // compact repr is (32b r)||(32b s)\n        return new Signature(slcNum(hex, 0, fLen), slcNum(hex, fLen, 2 * fLen));\n    }\n    assertValidity() { return ge(this.r) && ge(this.s) ? this : err(); } // 0 < r or s < CURVE.n\n    addRecoveryBit(rec) { return new Signature(this.r, this.s, rec); }\n    hasHighS() { return moreThanHalfN(this.s); }\n    recoverPublicKey(msgh) {\n        const { r, s, recovery: rec } = this; // secg.org/sec1-v2.pdf 4.1.6\n        if (![0, 1, 2, 3].includes(rec))\n            err('recovery id invalid'); // check recovery id\n        const h = bits2int_modN(toU8(msgh, 32)); // Truncate hash\n        const radj = rec === 2 || rec === 3 ? r + N : r; // If rec was 2 or 3, q.x is bigger than n\n        if (radj >= P)\n            err('q.x invalid'); // ensure q.x is still a field element\n        const head = (rec & 1) === 0 ? '02' : '03'; // head is 0x02 or 0x03\n        const R = Point.fromHex(head + n2h(radj)); // concat head + hex repr of r\n        const ir = inv(radj, N); // r^-1\n        const u1 = mod(-h * ir, N); // -hr^-1\n        const u2 = mod(s * ir, N); // sr^-1\n        return G.mulAddQUns(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n    }\n    toCompactRawBytes() { return h2b(this.toCompactHex()); } // Uint8Array 64b compact repr\n    toCompactHex() { return n2h(this.r) + n2h(this.s); } // hex 64b compact repr\n}\nconst bits2int = (bytes) => {\n    const delta = bytes.length * 8 - 256; // RFC suggests optional truncating via bits2octets\n    const num = b2n(bytes); // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which\n    return delta > 0 ? num >> BigInt(delta) : num; // matches bits2int. bits2int can produce res>N.\n};\nconst bits2int_modN = (bytes) => {\n    return mod(bits2int(bytes), N); // with 0: BAD for trunc as per RFC vectors\n};\nconst i2o = (num) => n2b(num); // int to octets\nconst cr = () => // We support: 1) browsers 2) node.js 19+ 3) deno, other envs with crypto\n typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\nlet _hmacSync; // Can be redefined by use in utils; built-ins don't provide it\nconst optS = { lowS: true }; // opts for sign()\nconst optV = { lowS: true }; // standard opts for verify()\nfunction prepSig(msgh, priv, opts = optS) {\n    if (['der', 'recovered', 'canonical'].some(k => k in opts)) // Ban legacy options\n        err('sign() legacy options not supported');\n    let { lowS } = opts; // generates low-s sigs by default\n    if (lowS == null)\n        lowS = true; // RFC6979 3.2: we skip step A\n    const h1i = bits2int_modN(toU8(msgh)); // msg bigint\n    const h1o = i2o(h1i); // msg octets\n    const d = toPriv(priv); // validate private key, convert to bigint\n    const seed = [i2o(d), h1o]; // Step D of RFC6979 3.2\n    let ent = opts.extraEntropy; // RFC6979 3.6: additional k' (optional)\n    if (ent) { // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n        if (ent === true)\n            ent = etc.randomBytes(fLen); // if true, use CSPRNG to generate data\n        const e = toU8(ent); // convert Hex|Bytes to Bytes\n        if (e.length !== fLen)\n            err(); // Expected 32 bytes of extra data\n        seed.push(e);\n    }\n    const m = h1i; // convert msg to bigint\n    const k2sig = (kBytes) => {\n        const k = bits2int(kBytes); // RFC6979 method.\n        if (!ge(k))\n            return; // Check 0 < k < CURVE.n\n        const ik = inv(k, N); // k^-1 mod n, NOT mod P\n        const q = G.mul(k).aff(); // q = Gk\n        const r = mod(q.x, N); // r = q.x mod n\n        if (r === 0n)\n            return; // r=0 invalid\n        const s = mod(ik * mod(m + mod(d * r, N), N), N); // s = k^-1(m + rd) mod n\n        if (s === 0n)\n            return; // s=0 invalid\n        let normS = s; // normalized S\n        let rec = (q.x === r ? 0 : 2) | Number(q.y & 1n); // recovery bit\n        if (lowS && moreThanHalfN(s)) { // if lowS was passed, ensure s is always\n            normS = mod(-s, N); // in the bottom half of CURVE.n\n            rec ^= 1;\n        }\n        return new Signature(r, normS, rec); // use normS, not s\n    };\n    return { seed: concatB(...seed), k2sig };\n}\nfunction hmacDrbg(asynchronous) {\n    let v = u8n(fLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(fLen); // Steps B, C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => { v.fill(1); k.fill(0); i = 0; };\n    const _e = 'drbg: tried 1000 values';\n    if (asynchronous) { // asynchronous=true\n        const h = (...b) => etc.hmacSha256Async(k, v, ...b); // hmac(k)(v, ...values)\n        const reseed = async (seed = u8n()) => {\n            k = await h(u8n([0x00]), seed); // k = hmac(K || V || 0x00 || seed)\n            v = await h(); // v = hmac(K || V)\n            if (seed.length === 0)\n                return;\n            k = await h(u8n([0x01]), seed); // k = hmac(K || V || 0x01 || seed)\n            v = await h(); // v = hmac(K || V)\n        };\n        const gen = async () => {\n            if (i++ >= 1000)\n                err(_e);\n            v = await h(); // v = hmac(K || V)\n            return v;\n        };\n        return async (seed, pred) => {\n            reset(); // the returned fn, don't, it's: 1. slower (JIT). 2. unsafe (async race conditions)\n            await reseed(seed); // Steps D-G\n            let res = undefined; // Step H: grind until k is in [1..n-1]\n            while (!(res = pred(await gen())))\n                await reseed(); // test predicate until it returns ok\n            reset();\n            return res;\n        };\n    }\n    else {\n        const h = (...b) => {\n            const f = _hmacSync;\n            if (!f)\n                err('etc.hmacSha256Sync not set');\n            return f(k, v, ...b); // hmac(k)(v, ...values)\n        };\n        const reseed = (seed = u8n()) => {\n            k = h(u8n([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n            v = h(); // v = hmac(k || v)\n            if (seed.length === 0)\n                return;\n            k = h(u8n([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n            v = h(); // v = hmac(k || v)\n        };\n        const gen = () => {\n            if (i++ >= 1000)\n                err(_e);\n            v = h(); // v = hmac(k || v)\n            return v;\n        };\n        return (seed, pred) => {\n            reset();\n            reseed(seed); // Steps D-G\n            let res = undefined; // Step H: grind until k is in [1..n-1]\n            while (!(res = pred(gen())))\n                reseed(); // test predicate until it returns ok\n            reset();\n            return res;\n        };\n    }\n}\n// ECDSA signature generation. via secg.org/sec1-v2.pdf 4.1.2 + RFC6979 deterministic k\nasync function signAsync(msgh, priv, opts = optS) {\n    const { seed, k2sig } = prepSig(msgh, priv, opts); // Extract arguments for hmac-drbg\n    return hmacDrbg(true)(seed, k2sig); // Re-run hmac-drbg until k2sig returns ok\n}\nfunction sign(msgh, priv, opts = optS) {\n    const { seed, k2sig } = prepSig(msgh, priv, opts); // Extract arguments for hmac-drbg\n    return hmacDrbg(false)(seed, k2sig); // Re-run hmac-drbg until k2sig returns ok\n}\nfunction verify(sig, msgh, pub, opts = optV) {\n    let { lowS } = opts; // ECDSA signature verification\n    if (lowS == null)\n        lowS = true; // Default lowS=true\n    if ('strict' in opts)\n        err('verify() legacy options not supported'); // legacy param\n    let sig_, h, P; // secg.org/sec1-v2.pdf 4.1.4\n    const rs = sig && typeof sig === 'object' && 'r' in sig; // Previous ver supported DER sigs. We\n    if (!rs && (toU8(sig).length !== 2 * fLen)) // throw error when DER is suspected now.\n        err('signature must be 64 bytes');\n    try {\n        sig_ = rs ? new Signature(sig.r, sig.s).assertValidity() : Signature.fromCompact(sig);\n        h = bits2int_modN(toU8(msgh, fLen)); // Truncate hash\n        P = pub instanceof Point ? pub.ok() : Point.fromHex(pub); // Validate public key\n    }\n    catch (e) {\n        return false;\n    } // Check sig for validity in both cases\n    if (!sig_)\n        return false;\n    const { r, s } = sig_;\n    if (lowS && moreThanHalfN(s))\n        return false; // lowS bans sig.s >= CURVE.n/2\n    let R;\n    try {\n        const is = inv(s, N); // s^-1\n        const u1 = mod(h * is, N); // u1 = hs^-1 mod n\n        const u2 = mod(r * is, N); // u2 = rs^-1 mod n\n        R = G.mulAddQUns(P, u1, u2).aff(); // R = u1⋅G + u2⋅P\n    }\n    catch (error) {\n        return false;\n    }\n    if (!R)\n        return false; // stop if R is identity / zero point\n    const v = mod(R.x, N); // <== The weird ECDSA part. R.x must be in N's field, not P's\n    return v === r; // mod(R.x, n) == r\n}\nfunction getSharedSecret(privA, pubB, isCompressed = true) {\n    return Point.fromHex(pubB).mul(toPriv(privA)).toRawBytes(isCompressed); // ECDH\n}\nfunction hashToPrivateKey(hash) {\n    hash = toU8(hash); // produces private keys with modulo bias\n    const minLen = fLen + 8; // being neglible.\n    if (hash.length < minLen || hash.length > 1024)\n        err('expected proper params');\n    const num = mod(b2n(hash), N - 1n) + 1n; // takes at least n+8 bytes\n    return n2b(num);\n}\nconst etc = {\n    hexToBytes: h2b, bytesToHex: b2h,\n    concatBytes: concatB, bytesToNumberBE: b2n, numberToBytesBE: n2b,\n    mod, invert: inv,\n    hmacSha256Async: async (key, ...msgs) => {\n        const crypto = cr(); // HMAC-SHA256 async. No sync built-in!\n        if (!crypto)\n            return err('etc.hmacSha256Async not set'); // Uses webcrypto: native cryptography.\n        const s = crypto.subtle;\n        const k = await s.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n        return u8n(await s.sign('HMAC', k, concatB(...msgs)));\n    },\n    hmacSha256Sync: _hmacSync,\n    hashToPrivateKey,\n    randomBytes: (len) => {\n        const crypto = cr(); // Can be shimmed in node.js <= 18 to prevent error:\n        // import { webcrypto } from 'node:crypto';\n        // if (!globalThis.crypto) globalThis.crypto = webcrypto;\n        if (!crypto)\n            err('crypto.getRandomValues must be defined');\n        return crypto.getRandomValues(u8n(len));\n    },\n};\nconst utils = {\n    normPrivateKeyToScalar: toPriv,\n    isValidPrivateKey: (key) => { try {\n        return !!toPriv(key);\n    }\n    catch (e) {\n        return false;\n    } },\n    randomPrivateKey: () => hashToPrivateKey(etc.randomBytes(fLen + 8)),\n    precompute(w = 8, p = G) { p.multiply(3n); return p; }, // no-op\n};\nObject.defineProperties(etc, { hmacSha256Sync: {\n        configurable: false, get() { return _hmacSync; }, set(f) { if (!_hmacSync)\n            _hmacSync = f; },\n    } });\nconst W = 8; // Precomputes-related code. W = window size\nconst precompute = () => {\n    const points = []; // 10x sign(), 2x verify(). To achieve this,\n    const windows = 256 / W + 1; // app needs to spend 40ms+ to calculate\n    let p = G, b = p; // a lot of points related to base point G.\n    for (let w = 0; w < windows; w++) { // Points are stored in array and used\n        b = p; // any time Gx multiplication is done.\n        points.push(b); // They consume 16-32 MiB of RAM.\n        for (let i = 1; i < 2 ** (W - 1); i++) {\n            b = b.add(p);\n            points.push(b);\n        }\n        p = b.double(); // Precomputes don't speed-up getSharedKey,\n    } // which multiplies user point by scalar,\n    return points; // when precomputes are using base point\n};\nconst wNAF = (n) => {\n    // Compared to other point mult methods,\n    const comp = Gpows || (Gpows = precompute()); // stores 2x less points using subtraction\n    const neg = (cnd, p) => { let n = p.negate(); return cnd ? n : p; }; // negate\n    let p = I, f = G; // f must be G, or could become I in the end\n    const windows = 1 + 256 / W; // W=8 17 windows\n    const wsize = 2 ** (W - 1); // W=8 128 window size\n    const mask = BigInt(2 ** W - 1); // W=8 will create mask 0b11111111\n    const maxNum = 2 ** W; // W=8 256\n    const shiftBy = BigInt(W); // W=8 8\n    for (let w = 0; w < windows; w++) {\n        const off = w * wsize;\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > wsize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off1 = off, off2 = off + Math.abs(wbits) - 1; // offsets, evaluate both\n        const cnd1 = w % 2 !== 0, cnd2 = wbits < 0; // conditions, evaluate both\n        if (wbits === 0) {\n            f = f.add(neg(cnd1, comp[off1])); // bits are 0: add garbage to fake point\n        }\n        else { //          ^ can't add off2, off2 = I\n            p = p.add(neg(cnd2, comp[off2])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n}; // !! you can disable precomputes by commenting-out call of the wNAF() inside Point#mul()\nexport { getPublicKey, sign, signAsync, verify, CURVE, // Remove the export to easily use in REPL\ngetSharedSecret, etc, utils, Point as ProjectivePoint, Signature }; // envs like browser console\n", "import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport * as secp from '@noble/secp256k1';\nimport { Address } from 'micro-eth-signer';\nimport { concatBytes, hexToBuffer } from '../utils/buffer';\n\nexport function randomPrivateKey() {\n  return secp.utils.randomPrivateKey();\n}\n\nexport function sign(msg: Uint8Array | string, privKey: Uint8Array) {\n  return signHash(sha256(msg), privKey);\n}\n\nexport async function signHash(hash: Uint8Array, privKey: Uint8Array) {\n  const sig = await secp.signAsync(hash, privKey);\n\n  if (sig.recovery !== undefined) {\n    return concatBytes(sig.toCompactRawBytes(), new Uint8Array([sig.recovery]));\n  } else {\n    throw new Error(`Recovery bit is missing.`);\n  }\n}\n\nexport function recoverPublicKey(hash: Uint8Array | string, sig: Uint8Array) {\n  const recoveryBit = sig.slice(-1);\n  const secpSig = secp.Signature.fromCompact(sig.slice(0, -1)).addRecoveryBit(\n    recoveryBit[0],\n  );\n  const point = secpSig.recoverPublicKey(hash);\n\n  return point.toRawBytes(true);\n}\n\nexport function getPublicKey(privKey: Uint8Array) {\n  return secp.getPublicKey(privKey, true);\n}\n\nexport function verify(\n  sig: Uint8Array,\n  hash: Uint8Array | string,\n  publicKey: Uint8Array,\n) {\n  return secp.verify(sig.slice(0, -1), hash, publicKey);\n}\n\nexport function publicKeyBytesToAddress(publicKey: Uint8Array) {\n  return ripemd160(sha256(publicKey));\n}\n\nexport function publicKeyToEthAddress(key: Uint8Array) {\n  return hexToBuffer(Address.fromPublicKey(key));\n}\n", "import { getMinHashLength, mapHashToField } from './modular.js';\nimport { bitLen, bitGet, ensureBytes } from './utils.js';\n// prettier-ignore\nimport { createHasher } from './hash-to-curve.js';\nimport { weierstrassPoints, } from './weierstrass.js';\n// prettier-ignore\nconst _2n = BigInt(2), _3n = BigInt(3);\nexport function bls(CURVE) {\n    // Fields are specific for curve, so for now we'll need to pass them with opts\n    const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n    const BLS_X_LEN = bitLen(CURVE.params.x);\n    // Pre-compute coefficients for sparse multiplication\n    // Point addition and point double calculations is reused for coefficients\n    function calcPairingPrecomputes(p) {\n        const { x, y } = p;\n        // prettier-ignore\n        const Qx = x, Qy = y, Qz = Fp2.ONE;\n        // prettier-ignore\n        let Rx = Qx, Ry = Qy, Rz = Qz;\n        let ell_coeff = [];\n        for (let i = BLS_X_LEN - 2; i >= 0; i--) {\n            // Double\n            let t0 = Fp2.sqr(Ry); // Ry²\n            let t1 = Fp2.sqr(Rz); // Rz²\n            let t2 = Fp2.multiplyByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n            let t3 = Fp2.mul(t2, _3n); // 3 * T2\n            let t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\n            ell_coeff.push([\n                Fp2.sub(t2, t0), // T2 - T0\n                Fp2.mul(Fp2.sqr(Rx), _3n), // 3 * Rx²\n                Fp2.neg(t4), // -T4\n            ]);\n            Rx = Fp2.div(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), _2n); // ((T0 - T3) * Rx * Ry) / 2\n            Ry = Fp2.sub(Fp2.sqr(Fp2.div(Fp2.add(t0, t3), _2n)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\n            Rz = Fp2.mul(t0, t4); // T0 * T4\n            if (bitGet(CURVE.params.x, i)) {\n                // Addition\n                let t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n                let t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n                ell_coeff.push([\n                    Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)), // T0 * Qx - T1 * Qy\n                    Fp2.neg(t0), // -T0\n                    t1, // T1\n                ]);\n                let t2 = Fp2.sqr(t1); // T1²\n                let t3 = Fp2.mul(t2, t1); // T2 * T1\n                let t4 = Fp2.mul(t2, Rx); // T2 * Rx\n                let t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\n                Rx = Fp2.mul(t1, t5); // T1 * T5\n                Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n                Rz = Fp2.mul(Rz, t3); // Rz * T3\n            }\n        }\n        return ell_coeff;\n    }\n    function millerLoop(ell, g1) {\n        const { x } = CURVE.params;\n        const Px = g1[0];\n        const Py = g1[1];\n        let f12 = Fp12.ONE;\n        for (let j = 0, i = BLS_X_LEN - 2; i >= 0; i--, j++) {\n            const E = ell[j];\n            f12 = Fp12.multiplyBy014(f12, E[0], Fp2.mul(E[1], Px), Fp2.mul(E[2], Py));\n            if (bitGet(x, i)) {\n                j += 1;\n                const F = ell[j];\n                f12 = Fp12.multiplyBy014(f12, F[0], Fp2.mul(F[1], Px), Fp2.mul(F[2], Py));\n            }\n            if (i !== 0)\n                f12 = Fp12.sqr(f12);\n        }\n        return Fp12.conjugate(f12);\n    }\n    const utils = {\n        randomPrivateKey: () => {\n            const length = getMinHashLength(Fr.ORDER);\n            return mapHashToField(CURVE.randomBytes(length), Fr.ORDER);\n        },\n        calcPairingPrecomputes,\n    };\n    // Point on G1 curve: (x, y)\n    const G1_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G1 });\n    const G1 = Object.assign(G1_, createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {\n        ...CURVE.htfDefaults,\n        ...CURVE.G1.htfDefaults,\n    }));\n    function pairingPrecomputes(point) {\n        const p = point;\n        if (p._PPRECOMPUTES)\n            return p._PPRECOMPUTES;\n        p._PPRECOMPUTES = calcPairingPrecomputes(point.toAffine());\n        return p._PPRECOMPUTES;\n    }\n    // TODO: export\n    // function clearPairingPrecomputes(point: G2) {\n    //   const p = point as G2 & withPairingPrecomputes;\n    //   p._PPRECOMPUTES = undefined;\n    // }\n    // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\n    const G2_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G2 });\n    const G2 = Object.assign(G2_, createHasher(G2_.ProjectivePoint, CURVE.G2.mapToCurve, {\n        ...CURVE.htfDefaults,\n        ...CURVE.G2.htfDefaults,\n    }));\n    const { ShortSignature } = CURVE.G1;\n    const { Signature } = CURVE.G2;\n    // Calculates bilinear pairing\n    function pairing(Q, P, withFinalExponent = true) {\n        if (Q.equals(G1.ProjectivePoint.ZERO) || P.equals(G2.ProjectivePoint.ZERO))\n            throw new Error('pairing is not available for ZERO point');\n        Q.assertValidity();\n        P.assertValidity();\n        // Performance: 9ms for millerLoop and ~14ms for exp.\n        const Qa = Q.toAffine();\n        const looped = millerLoop(pairingPrecomputes(P), [Qa.x, Qa.y]);\n        return withFinalExponent ? Fp12.finalExponentiate(looped) : looped;\n    }\n    function normP1(point) {\n        return point instanceof G1.ProjectivePoint ? point : G1.ProjectivePoint.fromHex(point);\n    }\n    function normP1Hash(point, htfOpts) {\n        return point instanceof G1.ProjectivePoint\n            ? point\n            : G1.hashToCurve(ensureBytes('point', point), htfOpts);\n    }\n    function normP2(point) {\n        return point instanceof G2.ProjectivePoint ? point : Signature.fromHex(point);\n    }\n    function normP2Hash(point, htfOpts) {\n        return point instanceof G2.ProjectivePoint\n            ? point\n            : G2.hashToCurve(ensureBytes('point', point), htfOpts);\n    }\n    // Multiplies generator (G1) by private key.\n    // P = pk x G\n    function getPublicKey(privateKey) {\n        return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n    }\n    // Multiplies generator (G2) by private key.\n    // P = pk x G\n    function getPublicKeyForShortSignatures(privateKey) {\n        return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n    }\n    function sign(message, privateKey, htfOpts) {\n        const msgPoint = normP2Hash(message, htfOpts);\n        msgPoint.assertValidity();\n        const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n        if (message instanceof G2.ProjectivePoint)\n            return sigPoint;\n        return Signature.toRawBytes(sigPoint);\n    }\n    function signShortSignature(message, privateKey, htfOpts) {\n        const msgPoint = normP1Hash(message, htfOpts);\n        msgPoint.assertValidity();\n        const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n        if (message instanceof G1.ProjectivePoint)\n            return sigPoint;\n        return ShortSignature.toRawBytes(sigPoint);\n    }\n    // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n    // e(P, H(m)) == e(G, S)\n    function verify(signature, message, publicKey, htfOpts) {\n        const P = normP1(publicKey);\n        const Hm = normP2Hash(message, htfOpts);\n        const G = G1.ProjectivePoint.BASE;\n        const S = normP2(signature);\n        // Instead of doing 2 exponentiations, we use property of billinear maps\n        // and do one exp after multiplying 2 points.\n        const ePHm = pairing(P.negate(), Hm, false);\n        const eGS = pairing(G, S, false);\n        const exp = Fp12.finalExponentiate(Fp12.mul(eGS, ePHm));\n        return Fp12.eql(exp, Fp12.ONE);\n    }\n    // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n    // e(S, G) == e(H(m), P)\n    function verifyShortSignature(signature, message, publicKey, htfOpts) {\n        const P = normP2(publicKey);\n        const Hm = normP1Hash(message, htfOpts);\n        const G = G2.ProjectivePoint.BASE;\n        const S = normP1(signature);\n        // Instead of doing 2 exponentiations, we use property of billinear maps\n        // and do one exp after multiplying 2 points.\n        const eHmP = pairing(Hm, P, false);\n        const eSG = pairing(S, G.negate(), false);\n        const exp = Fp12.finalExponentiate(Fp12.mul(eSG, eHmP));\n        return Fp12.eql(exp, Fp12.ONE);\n    }\n    function aggregatePublicKeys(publicKeys) {\n        if (!publicKeys.length)\n            throw new Error('Expected non-empty array');\n        const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);\n        const aggAffine = agg; //.toAffine();\n        if (publicKeys[0] instanceof G1.ProjectivePoint) {\n            aggAffine.assertValidity();\n            return aggAffine;\n        }\n        // toRawBytes ensures point validity\n        return aggAffine.toRawBytes(true);\n    }\n    function aggregateSignatures(signatures) {\n        if (!signatures.length)\n            throw new Error('Expected non-empty array');\n        const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);\n        const aggAffine = agg; //.toAffine();\n        if (signatures[0] instanceof G2.ProjectivePoint) {\n            aggAffine.assertValidity();\n            return aggAffine;\n        }\n        return Signature.toRawBytes(aggAffine);\n    }\n    function aggregateShortSignatures(signatures) {\n        if (!signatures.length)\n            throw new Error('Expected non-empty array');\n        const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);\n        const aggAffine = agg; //.toAffine();\n        if (signatures[0] instanceof G1.ProjectivePoint) {\n            aggAffine.assertValidity();\n            return aggAffine;\n        }\n        return ShortSignature.toRawBytes(aggAffine);\n    }\n    // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n    // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n    function verifyBatch(signature, messages, publicKeys, htfOpts) {\n        // @ts-ignore\n        // console.log('verifyBatch', bytesToHex(signature as any), messages, publicKeys.map(bytesToHex));\n        if (!messages.length)\n            throw new Error('Expected non-empty messages array');\n        if (publicKeys.length !== messages.length)\n            throw new Error('Pubkey count should equal msg count');\n        const sig = normP2(signature);\n        const nMessages = messages.map((i) => normP2Hash(i, htfOpts));\n        const nPublicKeys = publicKeys.map(normP1);\n        try {\n            const paired = [];\n            for (const message of new Set(nMessages)) {\n                const groupPublicKey = nMessages.reduce((groupPublicKey, subMessage, i) => subMessage === message ? groupPublicKey.add(nPublicKeys[i]) : groupPublicKey, G1.ProjectivePoint.ZERO);\n                // const msg = message instanceof PointG2 ? message : await PointG2.hashToCurve(message);\n                // Possible to batch pairing for same msg with different groupPublicKey here\n                paired.push(pairing(groupPublicKey, message, false));\n            }\n            paired.push(pairing(G1.ProjectivePoint.BASE.negate(), sig, false));\n            const product = paired.reduce((a, b) => Fp12.mul(a, b), Fp12.ONE);\n            const exp = Fp12.finalExponentiate(product);\n            return Fp12.eql(exp, Fp12.ONE);\n        }\n        catch {\n            return false;\n        }\n    }\n    G1.ProjectivePoint.BASE._setWindowSize(4);\n    return {\n        getPublicKey,\n        getPublicKeyForShortSignatures,\n        sign,\n        signShortSignature,\n        verify,\n        verifyBatch,\n        verifyShortSignature,\n        aggregatePublicKeys,\n        aggregateSignatures,\n        aggregateShortSignatures,\n        millerLoop,\n        pairing,\n        G1,\n        G2,\n        Signature,\n        ShortSignature,\n        fields: {\n            Fr,\n            Fp,\n            Fp2,\n            Fp6,\n            Fp12,\n        },\n        params: {\n            x: CURVE.params.x,\n            r: CURVE.params.r,\n            G1b: CURVE.G1.b,\n            G2b: CURVE.G2.b,\n        },\n        utils,\n    };\n}\n//# sourceMappingURL=bls.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n// - Construct zk-SNARKs at the 120-bit security\n// - Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n//   the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n//\n// ### Summary\n// 1. BLS Relies on Bilinear Pairing (expensive)\n// 2. Private Keys: 32 bytes\n// 3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n// 4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n//     - The signature is a point on the G2 subgroup, which is defined over a finite field\n//     with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the complex numbers).\n// 5. The 12 stands for the Embedding degree.\n//\n// ### Formulas\n// - `P = pk x G` - public keys\n// - `S = pk x H(m)` - signing\n// - `e(P, H(m)) == e(G, S)` - verification using pairings\n// - `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n//\n// ### Compatibility and notes\n// 1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC\n//    Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n// 2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\"\n// 3. Curve security level is about 120 bits as per Barbulescu-Duquesne 2017\n//    https://hal.science/hal-01534101/file/main.pdf\n// 4. Compatible with specs:\n// [cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n// [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05),\n// [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls } from './abstract/bls.js';\nimport * as mod from './abstract/modular.js';\nimport { concatBytes as concatB, ensureBytes, numberToBytesBE, bytesToNumberBE, bitLen, bitGet, bitMask, bytesToHex, } from './abstract/utils.js';\n// Types\nimport { mapToCurveSimpleSWU, } from './abstract/weierstrass.js';\nimport { isogenyMap } from './abstract/hash-to-curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// prettier-ignore\nconst _8n = BigInt(8), _16n = BigInt(16);\n// CURVE FIELDS\n// Finite field over p.\nconst Fp_raw = BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab');\nconst Fp = mod.Field(Fp_raw);\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = mod.Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\nconst Fp2Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n    c0: Fp.add(c0, r0),\n    c1: Fp.add(c1, r1),\n});\nconst Fp2Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n    c0: Fp.sub(c0, r0),\n    c1: Fp.sub(c1, r1),\n});\nconst Fp2Multiply = ({ c0, c1 }, rhs) => {\n    if (typeof rhs === 'bigint')\n        return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return { c0: o0, c1: o1 };\n};\nconst Fp2Square = ({ c0, c1 }) => {\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n};\n// G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),\n// where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where\n// G² - 1\n// h2q\n// NOTE: ORDER was wrong!\nconst FP2_ORDER = Fp_raw * Fp_raw;\nconst Fp2 = {\n    ORDER: FP2_ORDER,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n    ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n    is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n    neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: ({ c0: a, c1: b }) => {\n        // We wish to find the multiplicative inverse of a nonzero\n        // element a + bu in Fp2. We leverage an identity\n        //\n        // (a + bu)(a - bu) = a² + b²\n        //\n        // which holds because u² = -1. This can be rewritten as\n        //\n        // (a + bu)(a - bu)/(a² + b²) = 1\n        //\n        // because a² + b² = 0 has no nonzero solutions for (a, b).\n        // This gives that (a - bu)/(a² + b²) is the inverse\n        // of (a + bu). Importantly, this can be computing using\n        // only a single inversion in Fp.\n        const factor = Fp.inv(Fp.create(a * a + b * b));\n        return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n    },\n    sqrt: (num) => {\n        if (Fp2.eql(num, Fp2.ZERO))\n            return Fp2.ZERO; // Algo doesn't handles this case\n        // TODO: Optimize this line. It's extremely slow.\n        // Speeding this up would boost aggregateSignatures.\n        // https://eprint.iacr.org/2012/685.pdf applicable?\n        // https://github.com/zkcrypto/bls12_381/blob/080eaa74ec0e394377caa1ba302c8c121df08b07/src/fp2.rs#L250\n        // https://github.com/supranational/blst/blob/aae0c7d70b799ac269ff5edf29d8191dbd357876/src/exp2.c#L1\n        // Inspired by https://github.com/dalek-cryptography/curve25519-dalek/blob/17698df9d4c834204f83a3574143abacb4fc81a5/src/field.rs#L99\n        const candidateSqrt = Fp2.pow(num, (Fp2.ORDER + _8n) / _16n);\n        const check = Fp2.div(Fp2.sqr(candidateSqrt), num); // candidateSqrt.square().div(this);\n        const R = FP2_ROOTS_OF_UNITY;\n        const divisor = [R[0], R[2], R[4], R[6]].find((r) => Fp2.eql(r, check));\n        if (!divisor)\n            throw new Error('No root');\n        const index = R.indexOf(divisor);\n        const root = R[index / 2];\n        if (!root)\n            throw new Error('Invalid root');\n        const x1 = Fp2.div(candidateSqrt, root);\n        const x2 = Fp2.neg(x1);\n        const { re: re1, im: im1 } = Fp2.reim(x1);\n        const { re: re2, im: im2 } = Fp2.reim(x2);\n        if (im1 > im2 || (im1 === im2 && re1 > re2))\n            return x1;\n        return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: (x) => {\n        const { re: x0, im: x1 } = Fp2.reim(x);\n        const sign_0 = x0 % _2n;\n        const zero_0 = x0 === _0n;\n        const sign_1 = x1 % _2n;\n        return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n    },\n    // Bytes util\n    fromBytes(b) {\n        if (b.length !== Fp2.BYTES)\n            throw new Error(`fromBytes wrong length=${b.length}`);\n        return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n    },\n    toBytes: ({ c0, c1 }) => concatB(Fp.toBytes(c0), Fp.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n        c0: Fp.cmov(c0, r0, c),\n        c1: Fp.cmov(c1, r1, c),\n    }),\n    // Specific utils\n    // toString() {\n    //   return `Fp2(${this.c0} + ${this.c1}×i)`;\n    // }\n    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n    // multiply by u + 1\n    mulByNonresidue: ({ c0, c1 }) => ({ c0: Fp.sub(c0, c1), c1: Fp.add(c0, c1) }),\n    multiplyByB: ({ c0, c1 }) => {\n        let t0 = Fp.mul(c0, _4n); // 4 * c0\n        let t1 = Fp.mul(c1, _4n); // 4 * c1\n        // (T0-T1) + (T0+T1)*i\n        return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n    },\n    fromBigTuple: (tuple) => {\n        if (tuple.length !== 2)\n            throw new Error('Invalid tuple');\n        const fps = tuple.map((n) => Fp.create(n));\n        return { c0: fps[0], c1: fps[1] };\n    },\n    frobeniusMap: ({ c0, c1 }, power) => ({\n        c0,\n        c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n    }),\n};\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u² - β) where β = -1\nconst FP2_FROBENIUS_COEFFICIENTS = [\n    BigInt('0x1'),\n    BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'),\n].map((item) => Fp.create(item));\n// For Fp2 roots of unity.\nconst rv1 = BigInt('0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09');\n// const ev1 =\n//   BigInt('0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90');\n// const ev2 =\n//   BigInt('0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5');\n// const ev3 =\n//   BigInt('0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17');\n// const ev4 =\n//   BigInt('0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1');\n// Eighth roots of unity, used for computing square roots in Fp2.\n// To verify or re-calculate:\n// Array(8).fill(new Fp2([1n, 1n])).map((fp2, k) => fp2.pow(Fp2.ORDER * BigInt(k) / 8n))\nconst FP2_ROOTS_OF_UNITY = [\n    [_1n, _0n],\n    [rv1, -rv1],\n    [_0n, _1n],\n    [rv1, rv1],\n    [-_1n, _0n],\n    [-rv1, rv1],\n    [_0n, -_1n],\n    [-rv1, -rv1],\n].map((pair) => Fp2.fromBigTuple(pair));\nconst Fp6Add = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({\n    c0: Fp2.add(c0, r0),\n    c1: Fp2.add(c1, r1),\n    c2: Fp2.add(c2, r2),\n});\nconst Fp6Subtract = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({\n    c0: Fp2.sub(c0, r0),\n    c1: Fp2.sub(c1, r1),\n    c2: Fp2.sub(c2, r2),\n});\nconst Fp6Multiply = ({ c0, c1, c2 }, rhs) => {\n    if (typeof rhs === 'bigint') {\n        return {\n            c0: Fp2.mul(c0, rhs),\n            c1: Fp2.mul(c1, rhs),\n            c2: Fp2.mul(c2, rhs),\n        };\n    }\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n        // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n        c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n        // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n        c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n        // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n        c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n    };\n};\nconst Fp6Square = ({ c0, c1, c2 }) => {\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n        c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n        c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n        // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n        c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n    };\n};\nconst Fp6 = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n    is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n    neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n    eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n    sqrt: () => {\n        throw new Error('Not implemented');\n    },\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n    inv: ({ c0, c1, c2 }) => {\n        let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n        let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n        let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n        // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n        let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n        return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n    },\n    // Bytes utils\n    fromBytes: (b) => {\n        if (b.length !== Fp6.BYTES)\n            throw new Error(`fromBytes wrong length=${b.length}`);\n        return {\n            c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n            c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n            c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n        };\n    },\n    toBytes: ({ c0, c1, c2 }) => concatB(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n    cmov: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }, c) => ({\n        c0: Fp2.cmov(c0, r0, c),\n        c1: Fp2.cmov(c1, r1, c),\n        c2: Fp2.cmov(c2, r2, c),\n    }),\n    // Utils\n    //   fromTriple(triple: [Fp2, Fp2, Fp2]) {\n    //     return new Fp6(...triple);\n    //   }\n    //   toString() {\n    //     return `Fp6(${this.c0} + ${this.c1} * v, ${this.c2} * v^2)`;\n    //   }\n    fromBigSix: (t) => {\n        if (!Array.isArray(t) || t.length !== 6)\n            throw new Error('Invalid Fp6 usage');\n        return {\n            c0: Fp2.fromBigTuple(t.slice(0, 2)),\n            c1: Fp2.fromBigTuple(t.slice(2, 4)),\n            c2: Fp2.fromBigTuple(t.slice(4, 6)),\n        };\n    },\n    frobeniusMap: ({ c0, c1, c2 }, power) => ({\n        c0: Fp2.frobeniusMap(c0, power),\n        c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n        c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n    }),\n    mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n    // Sparse multiplication\n    multiplyBy1: ({ c0, c1, c2 }, b1) => ({\n        c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n        c1: Fp2.mul(c0, b1),\n        c2: Fp2.mul(c1, b1),\n    }),\n    // Sparse multiplication\n    multiplyBy01({ c0, c1, c2 }, b0, b1) {\n        let t0 = Fp2.mul(c0, b0); // c0 * b0\n        let t1 = Fp2.mul(c1, b1); // c1 * b1\n        return {\n            // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n            c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n            // (b0 + b1) * (c0 + c1) - T0 - T1\n            c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n            // (c0 + c2) * b0 - T0 + T1\n            c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n        };\n    },\n    multiplyByFp2: ({ c0, c1, c2 }, rhs) => ({\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs),\n    }),\n};\nconst FP6_FROBENIUS_COEFFICIENTS_1 = [\n    [BigInt('0x1'), BigInt('0x0')],\n    [\n        BigInt('0x0'),\n        BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'),\n    ],\n    [\n        BigInt('0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'),\n        BigInt('0x0'),\n    ],\n    [BigInt('0x0'), BigInt('0x1')],\n    [\n        BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x0'),\n        BigInt('0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'),\n    ],\n].map((pair) => Fp2.fromBigTuple(pair));\nconst FP6_FROBENIUS_COEFFICIENTS_2 = [\n    [BigInt('0x1'), BigInt('0x0')],\n    [\n        BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff'),\n        BigInt('0x0'),\n    ],\n].map((pair) => Fp2.fromBigTuple(pair));\n// The BLS parameter x for BLS12-381\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\nconst Fp12Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n    c0: Fp6.add(c0, r0),\n    c1: Fp6.add(c1, r1),\n});\nconst Fp12Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n    c0: Fp6.sub(c0, r0),\n    c1: Fp6.sub(c1, r1),\n});\nconst Fp12Multiply = ({ c0, c1 }, rhs) => {\n    if (typeof rhs === 'bigint')\n        return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n    let { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n        c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n        // (c0 + c1) * (r0 + r1) - (T1 + T2)\n        c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n    };\n};\nconst Fp12Square = ({ c0, c1 }) => {\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n        // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n        c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n        c1: Fp6.add(ab, ab),\n    }; // AB + AB\n};\nfunction Fp4Square(a, b) {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n        first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n        second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n    };\n}\nconst Fp12 = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    BITS: 2 * Fp2.BITS,\n    BYTES: 2 * Fp2.BYTES,\n    MASK: bitMask(2 * Fp2.BITS),\n    ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n    ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n    is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n    neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n    sqrt: () => {\n        throw new Error('Not implemented');\n    },\n    inv: ({ c0, c1 }) => {\n        let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n        return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n    // Bytes utils\n    fromBytes: (b) => {\n        if (b.length !== Fp12.BYTES)\n            throw new Error(`fromBytes wrong length=${b.length}`);\n        return {\n            c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n            c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n        };\n    },\n    toBytes: ({ c0, c1 }) => concatB(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n        c0: Fp6.cmov(c0, r0, c),\n        c1: Fp6.cmov(c1, r1, c),\n    }),\n    // Utils\n    // toString() {\n    //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: (t) => ({\n        c0: Fp6.fromBigSix(t.slice(0, 6)),\n        c1: Fp6.fromBigSix(t.slice(6, 12)),\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power) {\n        const r0 = Fp6.frobeniusMap(lhs.c0, power);\n        const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n        const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n        return {\n            c0: r0,\n            c1: Fp6.create({\n                c0: Fp2.mul(c0, coeff),\n                c1: Fp2.mul(c1, coeff),\n                c2: Fp2.mul(c2, coeff),\n            }),\n        };\n    },\n    // Sparse multiplication\n    multiplyBy014: ({ c0, c1 }, o0, o1, o4) => {\n        let t0 = Fp6.multiplyBy01(c0, o0, o1);\n        let t1 = Fp6.multiplyBy1(c1, o4);\n        return {\n            c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n            // (c1 + c0) * [o0, o1+o4] - T0 - T1\n            c1: Fp6.sub(Fp6.sub(Fp6.multiplyBy01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n        };\n    },\n    multiplyByFp2: ({ c0, c1 }, rhs) => ({\n        c0: Fp6.multiplyByFp2(c0, rhs),\n        c1: Fp6.multiplyByFp2(c1, rhs),\n    }),\n    conjugate: ({ c0, c1 }) => ({ c0, c1: Fp6.neg(c1) }),\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: ({ c0, c1 }) => {\n        const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n        const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n        const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n        const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n        const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n        let t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n        return {\n            c0: Fp6.create({\n                c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n                c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n                c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n            }), // 2 * (T7 - c0c2)  + T7\n            c1: Fp6.create({\n                c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n                c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n                c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n            }),\n        }; // 2 * (T6 + c1c2) + T6\n    },\n    _cyclotomicExp(num, n) {\n        let z = Fp12.ONE;\n        for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n            z = Fp12._cyclotomicSquare(z);\n            if (bitGet(n, i))\n                z = Fp12.mul(z, num);\n        }\n        return z;\n    },\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: (num) => {\n        const x = BLS_X;\n        // this^(q⁶) / this\n        const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n        // t0^(q²) * t0\n        const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n        const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n        const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n        const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n        const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n        const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n        const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n        const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n        const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n        const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n        const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n        // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n        return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n    },\n};\nconst FP12_FROBENIUS_COEFFICIENTS = [\n    [BigInt('0x1'), BigInt('0x0')],\n    [\n        BigInt('0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8'),\n        BigInt('0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3'),\n    ],\n    [\n        BigInt('0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2'),\n        BigInt('0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'),\n    ],\n    [\n        BigInt('0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995'),\n        BigInt('0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116'),\n    ],\n    [\n        BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3'),\n        BigInt('0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8'),\n    ],\n    [\n        BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'),\n        BigInt('0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2'),\n    ],\n    [\n        BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad'),\n        BigInt('0x0'),\n    ],\n    [\n        BigInt('0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116'),\n        BigInt('0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995'),\n    ],\n].map((n) => Fp2.fromBigTuple(n));\n// END OF CURVE FIELDS\n// HashToCurve\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(Fp2, [\n    // xNum\n    [\n        [\n            '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n            '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        ],\n        [\n            '0x0',\n            '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n        ],\n        [\n            '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n            '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n        ],\n        [\n            '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n            '0x0',\n        ],\n    ],\n    // xDen\n    [\n        [\n            '0x0',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n        ],\n        [\n            '0xc',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n        ],\n        ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n        [\n            '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n            '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        ],\n        [\n            '0x0',\n            '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n        ],\n        [\n            '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n            '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n        ],\n        [\n            '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n            '0x0',\n        ],\n    ],\n    // yDen\n    [\n        [\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        ],\n        [\n            '0x0',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n        ],\n        [\n            '0x12',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n        ],\n        ['0x1', '0x0'], // LAST 1\n    ],\n].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))));\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(Fp, [\n    // xNum\n    [\n        '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n        '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n        '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n        '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n        '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n        '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n        '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n        '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n        '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n        '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n        '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n        '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n        '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n        '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n        '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n        '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n        '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n        '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n        '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n        '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n        '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n        '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n        '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n        '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n        '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n        '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n        '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n        '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n        '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n        '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n        '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n        '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n        '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n        '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n        '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n        '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n        '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n        '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n        '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n        '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n        '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n        '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n        '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n        '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n        '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n        '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n        '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n        '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n        '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n        '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n        '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n        '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n        '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n        '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j))));\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n    A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n    B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n    Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n    A: Fp.create(BigInt('0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d')),\n    B: Fp.create(BigInt('0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0')),\n    Z: Fp.create(BigInt(11)),\n});\n// Endomorphisms (for fast cofactor clearing)\n// Ψ(P) endomorphism\nconst ut_root = Fp6.create({ c0: Fp2.ZERO, c1: Fp2.ONE, c2: Fp2.ZERO });\nconst wsq = Fp12.create({ c0: ut_root, c1: Fp6.ZERO });\nconst wcu = Fp12.create({ c0: Fp6.ZERO, c1: ut_root });\nconst [wsq_inv, wcu_inv] = Fp12.invertBatch([wsq, wcu]);\nfunction psi(x, y) {\n    // Untwist Fp2->Fp12 && frobenius(1) && twist back\n    const x2 = Fp12.mul(Fp12.frobeniusMap(Fp12.multiplyByFp2(wsq_inv, x), 1), wsq).c0.c0;\n    const y2 = Fp12.mul(Fp12.frobeniusMap(Fp12.multiplyByFp2(wcu_inv, y), 1), wcu).c0.c0;\n    return [x2, y2];\n}\n// Ψ endomorphism\nfunction G2psi(c, P) {\n    const affine = P.toAffine();\n    const p = psi(affine.x, affine.y);\n    return new c(p[0], p[1], Fp2.ONE);\n}\n// Ψ²(P) endomorphism\n// 1 / F2(2)^((p-1)/3) in GF(p²)\nconst PSI2_C1 = BigInt('0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac');\nfunction psi2(x, y) {\n    return [Fp2.mul(x, PSI2_C1), Fp2.neg(y)];\n}\nfunction G2psi2(c, P) {\n    const affine = P.toAffine();\n    const p = psi2(affine.x, affine.y);\n    return new c(p[0], p[1], Fp2.ONE);\n}\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n    // DST: a domain separation tag\n    // defined in section 2.2.5\n    // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n    DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n    encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n    // p: the characteristic of F\n    //    where F is a finite field of characteristic p and order q = p^m\n    p: Fp.ORDER,\n    // m: the extension degree of F, m >= 1\n    //     where F is a finite field of characteristic p and order q = p^m\n    m: 2,\n    // k: the target security level for the suite in bits\n    // defined in section 5.1\n    k: 128,\n    // option to use a message that has already been processed by\n    // expand_message_xmd\n    expand: 'xmd',\n    // Hash functions for: expand_message_xmd is appropriate for use with a\n    // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n    // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n    hash: sha256,\n});\n// Encoding utils\n// Point on G1 curve: (x, y)\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true }); // set compressed & point-at-infinity bits\nfunction parseMask(bytes) {\n    // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n    bytes = bytes.slice();\n    const mask = bytes[0] & 224;\n    const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n    const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n    const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n    bytes[0] &= 31; // clear mask (zero first 3 bits)\n    return { compressed, infinity, sort, value: bytes };\n}\nfunction setMask(bytes, mask) {\n    if (bytes[0] & 224)\n        throw new Error('setMask: non-empty mask');\n    if (mask.compressed)\n        bytes[0] |= 128;\n    if (mask.infinity)\n        bytes[0] |= 64;\n    if (mask.sort)\n        bytes[0] |= 32;\n    return bytes;\n}\nfunction signatureG1ToRawBytes(point) {\n    point.assertValidity();\n    const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n    const { x, y } = point.toAffine();\n    if (isZero)\n        return COMPRESSED_ZERO.slice();\n    const P = Fp.ORDER;\n    const sort = Boolean((y * _2n) / P);\n    return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n}\nfunction signatureG2ToRawBytes(point) {\n    // NOTE: by some reasons it was missed in bls12-381, looks like bug\n    point.assertValidity();\n    const len = Fp.BYTES;\n    if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))\n        return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n    const { x, y } = point.toAffine();\n    const { re: x0, im: x1 } = Fp2.reim(x);\n    const { re: y0, im: y1 } = Fp2.reim(y);\n    const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n    const sort = Boolean((tmp / Fp.ORDER) & _1n);\n    const z2 = x0;\n    return concatB(setMask(numberToBytesBE(x1, len), { sort, compressed: true }), numberToBytesBE(z2, len));\n}\n// To verify curve parameters, see pairing-friendly-curves spec:\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// Basic math is done over finite fields over p.\n// More complicated math is done over polynominal extension fields.\n// To simplify calculations in Fp12, we construct extension tower:\n// Fp₁₂ = Fp₆² => Fp₂³\n// Fp(u) / (u² - β) where β = -1\n// Fp₂(v) / (v³ - ξ) where ξ = u + 1\n// Fp₆(w) / (w² - γ) where γ = v\n// Here goes constants && point encoding format\nexport const bls12_381 = bls({\n    // Fields\n    fields: {\n        Fp,\n        Fp2,\n        Fp6,\n        Fp12,\n        Fr,\n    },\n    // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where\n    // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3\n    G1: {\n        Fp,\n        // cofactor; (z - 1)²/3\n        h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n        // generator's coordinates\n        // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n        // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n        Gx: BigInt('0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'),\n        Gy: BigInt('0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'),\n        a: Fp.ZERO,\n        b: _4n,\n        htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n        wrapPrivateKey: true,\n        allowInfinityPoint: true,\n        // Checks is the point resides in prime-order subgroup.\n        // point.isTorsionFree() should return true for valid points\n        // It returns false for shitty points.\n        // https://eprint.iacr.org/2021/1130.pdf\n        isTorsionFree: (c, point) => {\n            // φ endomorphism\n            const cubicRootOfUnityModP = BigInt('0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe');\n            const phi = new c(Fp.mul(point.px, cubicRootOfUnityModP), point.py, point.pz);\n            // todo: unroll\n            const xP = point.multiplyUnsafe(bls12_381.params.x).negate(); // [x]P\n            const u2P = xP.multiplyUnsafe(bls12_381.params.x); // [u2]P\n            return u2P.equals(phi);\n            // https://eprint.iacr.org/2019/814.pdf\n            // (z² − 1)/3\n            // const c1 = BigInt('0x396c8c005555e1560000000055555555');\n            // const P = this;\n            // const S = P.sigma();\n            // const Q = S.double();\n            // const S2 = S.sigma();\n            // // [(z² − 1)/3](2σ(P) − P − σ²(P)) − σ²(P) = O\n            // const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n            // const C = left.subtract(S2);\n            // return C.isZero();\n        },\n        // Clear cofactor of G1\n        // https://eprint.iacr.org/2019/403\n        clearCofactor: (_c, point) => {\n            // return this.multiplyUnsafe(CURVE.h);\n            return point.multiplyUnsafe(bls12_381.params.x).add(point); // x*P + P\n        },\n        mapToCurve: (scalars) => {\n            const { x, y } = G1_SWU(Fp.create(scalars[0]));\n            return isogenyMapG1(x, y);\n        },\n        fromBytes: (bytes) => {\n            const { compressed, infinity, sort, value } = parseMask(bytes);\n            if (value.length === 48 && compressed) {\n                // TODO: Fp.bytes\n                const P = Fp.ORDER;\n                const compressedValue = bytesToNumberBE(value);\n                // Zero\n                const x = Fp.create(compressedValue & Fp.MASK);\n                if (infinity) {\n                    if (x !== _0n)\n                        throw new Error('G1: non-empty compressed point at infinity');\n                    return { x: _0n, y: _0n };\n                }\n                const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n                let y = Fp.sqrt(right);\n                if (!y)\n                    throw new Error('Invalid compressed G1 point');\n                if ((y * _2n) / P !== BigInt(sort))\n                    y = Fp.neg(y);\n                return { x: Fp.create(x), y: Fp.create(y) };\n            }\n            else if (value.length === 96 && !compressed) {\n                // Check if the infinity flag is set\n                const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n                const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n                if (infinity) {\n                    if (x !== _0n || y !== _0n)\n                        throw new Error('G1: non-empty point at infinity');\n                    return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n                }\n                return { x: Fp.create(x), y: Fp.create(y) };\n            }\n            else {\n                throw new Error('Invalid point G1, expected 48/96 bytes');\n            }\n        },\n        toBytes: (c, point, isCompressed) => {\n            const isZero = point.equals(c.ZERO);\n            const { x, y } = point.toAffine();\n            if (isCompressed) {\n                if (isZero)\n                    return COMPRESSED_ZERO.slice();\n                const P = Fp.ORDER;\n                const sort = Boolean((y * _2n) / P);\n                return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n            }\n            else {\n                if (isZero) {\n                    // 2x PUBLIC_KEY_LENGTH\n                    const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n                    return x;\n                }\n                else {\n                    return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n                }\n            }\n        },\n        ShortSignature: {\n            fromHex(hex) {\n                const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n                const P = Fp.ORDER;\n                const compressedValue = bytesToNumberBE(value);\n                // Zero\n                if (infinity)\n                    return bls12_381.G1.ProjectivePoint.ZERO;\n                const x = Fp.create(compressedValue & Fp.MASK);\n                const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n                let y = Fp.sqrt(right);\n                if (!y)\n                    throw new Error('Invalid compressed G1 point');\n                const aflag = BigInt(sort);\n                if ((y * _2n) / P !== aflag)\n                    y = Fp.neg(y);\n                const point = bls12_381.G1.ProjectivePoint.fromAffine({ x, y });\n                point.assertValidity();\n                return point;\n            },\n            toRawBytes(point) {\n                return signatureG1ToRawBytes(point);\n            },\n            toHex(point) {\n                return bytesToHex(signatureG1ToRawBytes(point));\n            },\n        },\n    },\n    // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),\n    // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where\n    // G² - 1\n    // h2q\n    G2: {\n        Fp: Fp2,\n        // cofactor\n        h: BigInt('0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'),\n        Gx: Fp2.fromBigTuple([\n            BigInt('0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'),\n            BigInt('0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'),\n        ]),\n        // y =\n        // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n        // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n        Gy: Fp2.fromBigTuple([\n            BigInt('0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'),\n            BigInt('0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'),\n        ]),\n        a: Fp2.ZERO,\n        b: Fp2.fromBigTuple([_4n, _4n]),\n        hEff: BigInt('0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'),\n        htfDefaults: { ...htfDefaults },\n        wrapPrivateKey: true,\n        allowInfinityPoint: true,\n        mapToCurve: (scalars) => {\n            const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars));\n            return isogenyMapG2(x, y);\n        },\n        // Checks is the point resides in prime-order subgroup.\n        // point.isTorsionFree() should return true for valid points\n        // It returns false for shitty points.\n        // https://eprint.iacr.org/2021/1130.pdf\n        isTorsionFree: (c, P) => {\n            return P.multiplyUnsafe(bls12_381.params.x).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n            // Older version: https://eprint.iacr.org/2019/814.pdf\n            // Ψ²(P) => Ψ³(P) => [z]Ψ³(P) where z = -x => [z]Ψ³(P) - Ψ²(P) + P == O\n            // return P.psi2().psi().mulNegX().subtract(psi2).add(P).isZero();\n        },\n        // Maps the point into the prime-order subgroup G2.\n        // clear_cofactor_bls12381_g2 from cfrg-hash-to-curve-11\n        // https://eprint.iacr.org/2017/419.pdf\n        // prettier-ignore\n        clearCofactor: (c, P) => {\n            const x = bls12_381.params.x;\n            let t1 = P.multiplyUnsafe(x).negate(); // [-x]P\n            let t2 = G2psi(c, P); // Ψ(P)\n            let t3 = P.double(); // 2P\n            t3 = G2psi2(c, t3); // Ψ²(2P)\n            t3 = t3.subtract(t2); // Ψ²(2P) - Ψ(P)\n            t2 = t1.add(t2); // [-x]P + Ψ(P)\n            t2 = t2.multiplyUnsafe(x).negate(); // [x²]P - [x]Ψ(P)\n            t3 = t3.add(t2); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n            t3 = t3.subtract(t1); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n            const Q = t3.subtract(P); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n            return Q; // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n        },\n        fromBytes: (bytes) => {\n            const { compressed, infinity, sort, value } = parseMask(bytes);\n            if ((!compressed && !infinity && sort) || // 00100000\n                (!compressed && infinity && sort) || // 01100000\n                (sort && infinity && compressed) // 11100000\n            ) {\n                throw new Error('Invalid encoding flag: ' + (bytes[0] & 224));\n            }\n            const L = Fp.BYTES;\n            const slc = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n            if (value.length === 96 && compressed) {\n                const b = bls12_381.params.G2b;\n                const P = Fp.ORDER;\n                if (infinity) {\n                    // check that all bytes are 0\n                    if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n                        throw new Error('Invalid compressed G2 point');\n                    }\n                    return { x: Fp2.ZERO, y: Fp2.ZERO };\n                }\n                const x_1 = slc(value, 0, L);\n                const x_0 = slc(value, L, 2 * L);\n                const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n                const right = Fp2.add(Fp2.pow(x, _3n), b); // y² = x³ + 4 * (u+1) = x³ + b\n                let y = Fp2.sqrt(right);\n                const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n                y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n                return { x, y };\n            }\n            else if (value.length === 192 && !compressed) {\n                if (infinity) {\n                    if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n                        throw new Error('Invalid uncompressed G2 point');\n                    }\n                    return { x: Fp2.ZERO, y: Fp2.ZERO };\n                }\n                const x1 = slc(value, 0, L);\n                const x0 = slc(value, L, 2 * L);\n                const y1 = slc(value, 2 * L, 3 * L);\n                const y0 = slc(value, 3 * L, 4 * L);\n                return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n            }\n            else {\n                throw new Error('Invalid point G2, expected 96/192 bytes');\n            }\n        },\n        toBytes: (c, point, isCompressed) => {\n            const { BYTES: len, ORDER: P } = Fp;\n            const isZero = point.equals(c.ZERO);\n            const { x, y } = point.toAffine();\n            if (isCompressed) {\n                if (isZero)\n                    return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n                const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n                return concatB(setMask(numberToBytesBE(x.c1, len), { compressed: true, sort: flag }), numberToBytesBE(x.c0, len));\n            }\n            else {\n                if (isZero)\n                    return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n                const { re: x0, im: x1 } = Fp2.reim(x);\n                const { re: y0, im: y1 } = Fp2.reim(y);\n                return concatB(numberToBytesBE(x1, len), numberToBytesBE(x0, len), numberToBytesBE(y1, len), numberToBytesBE(y0, len));\n            }\n        },\n        Signature: {\n            // TODO: Optimize, it's very slow because of sqrt.\n            fromHex(hex) {\n                const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n                const P = Fp.ORDER;\n                const half = hex.length / 2;\n                if (half !== 48 && half !== 96)\n                    throw new Error('Invalid compressed signature length, must be 96 or 192');\n                const z1 = bytesToNumberBE(value.slice(0, half));\n                const z2 = bytesToNumberBE(value.slice(half));\n                // Indicates the infinity point\n                if (infinity)\n                    return bls12_381.G2.ProjectivePoint.ZERO;\n                const x1 = Fp.create(z1 & Fp.MASK);\n                const x2 = Fp.create(z2);\n                const x = Fp2.create({ c0: x2, c1: x1 });\n                const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y² = x³ + 4\n                // The slow part\n                let y = Fp2.sqrt(y2);\n                if (!y)\n                    throw new Error('Failed to find a square root');\n                // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n                // If y1 happens to be zero, then use the bit of y0\n                const { re: y0, im: y1 } = Fp2.reim(y);\n                const aflag1 = BigInt(sort);\n                const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n                const isZero = y1 === _0n && (y0 * _2n) / P !== aflag1;\n                if (isGreater || isZero)\n                    y = Fp2.neg(y);\n                const point = bls12_381.G2.ProjectivePoint.fromAffine({ x, y });\n                point.assertValidity();\n                return point;\n            },\n            toRawBytes(point) {\n                return signatureG2ToRawBytes(point);\n            },\n            toHex(point) {\n                return bytesToHex(signatureG2ToRawBytes(point));\n            },\n        },\n    },\n    params: {\n        x: BLS_X, // The BLS parameter x for BLS12-381\n        r: Fr.ORDER, // order; z⁴ − z² + 1; CURVE.n from other curves\n    },\n    htfDefaults,\n    hash: sha256,\n    randomBytes,\n});\n//# sourceMappingURL=bls12-381.js.map", "import { bls12_381 } from '@noble/curves/bls12-381';\nimport type { ProjPointType } from '@noble/curves/abstract/weierstrass';\nimport { hexToBuffer } from '../utils/buffer';\n\nexport type PublicKey = ProjPointType<bigint>;\nexport type SecretKey = bigint;\nexport type Signature = ProjPointType<typeof bls12_381.fields.Fp2.ZERO>;\nexport type Message = ProjPointType<typeof bls12_381.fields.Fp2.ZERO>;\n\nexport const PUBLIC_KEY_LENGTH = 48;\nexport const SIGNATURE_LENGTH = 96;\n\nconst signatureDST = 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_';\nconst proofOfPossessionDST = 'BLS_POP_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_';\n\nexport function secretKeyFromBytes(skBytes: Uint8Array | string): SecretKey {\n  return bls12_381.G1.normPrivateKeyToScalar(skBytes);\n}\n\nexport function secretKeyToBytes(sk: SecretKey): Uint8Array {\n  return hexToBuffer(sk.toString(16));\n}\n\nexport function publicKeyFromBytes(pkBytes: Uint8Array | string): PublicKey {\n  return bls12_381.G1.ProjectivePoint.fromHex(pkBytes);\n}\n\nexport function publicKeyToBytes(pk: PublicKey): Uint8Array {\n  return pk.toRawBytes();\n}\n\nexport function signatureFromBytes(sigBytes: Uint8Array): Signature {\n  return bls12_381.Signature.fromHex(sigBytes);\n}\n\nexport function signatureToBytes(sig: Signature): Uint8Array {\n  return sig.toRawBytes();\n}\n\nexport function verify(\n  pk: PublicKey,\n  sig: Signature,\n  msg: Uint8Array | string | Message,\n): boolean {\n  return bls12_381.verify(sig, msg, pk, {\n    DST: signatureDST,\n  });\n}\n\nexport function verifyProofOfPossession(\n  pk: PublicKey,\n  sig: Signature,\n  msg: Uint8Array | string | Message,\n): boolean {\n  return bls12_381.verify(sig, msg, pk, {\n    DST: proofOfPossessionDST,\n  });\n}\n\nexport function sign(msg: Uint8Array | string, sk: SecretKey): Uint8Array {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error Will error until a version of @noble/curves is released with https://github.com/paulmillr/noble-curves/pull/117\n  return bls12_381.sign(msg, sk, {\n    DST: signatureDST,\n  });\n}\n\nexport function signProofOfPossession(\n  msg: Uint8Array | string,\n  sk: SecretKey,\n): Uint8Array {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error Will error until a version of @noble/curves is released with https://github.com/paulmillr/noble-curves/pull/117\n  return bls12_381.sign(msg, sk, {\n    DST: proofOfPossessionDST,\n  });\n}\n", "import { serializable } from '../common/types';\nimport { bufferToHex, concatBytes } from '../../utils/buffer';\nimport { bls } from '../../crypto';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#proof-of-possession-specification-1\n */\n@serializable()\nexport class ProofOfPossession {\n  _type = TypeSymbols.ProofOfPossession;\n\n  constructor(\n    public readonly publicKey: Uint8Array,\n    public readonly signature: Uint8Array,\n  ) {\n    const pk = bls.publicKeyFromBytes(publicKey);\n    const sig = bls.signatureFromBytes(signature);\n\n    pk.assertValidity();\n    sig.assertValidity();\n\n    if (!bls.verifyProofOfPossession(pk, sig, bls.publicKeyToBytes(pk))) {\n      throw new Error(`Invalid proof of possession`);\n    }\n  }\n\n  static fromBytes(bytes: Uint8Array): [ProofOfPossession, Uint8Array] {\n    const pubkey = bytes.slice(0, bls.PUBLIC_KEY_LENGTH);\n    const signature = bytes.slice(\n      bls.PUBLIC_KEY_LENGTH,\n      bls.PUBLIC_KEY_LENGTH + bls.SIGNATURE_LENGTH,\n    );\n    const rest = bytes.slice(bls.PUBLIC_KEY_LENGTH + bls.SIGNATURE_LENGTH);\n    return [new ProofOfPossession(pubkey, signature), rest];\n  }\n\n  toString() {\n    return bufferToHex(this.toBytes());\n  }\n\n  toBytes() {\n    return concatBytes(this.publicKey, this.signature);\n  }\n}\n", "import { serializable } from '../common/types';\nimport { ProofOfPossession } from './proofOfPossession';\nimport { pack, unpack } from '../../utils/struct';\nimport type { Codec } from '../codec';\nimport { TypeSymbols } from '../constants';\n\n@serializable()\nexport class Signer {\n  _type = TypeSymbols.Signer;\n\n  constructor(public readonly proof: ProofOfPossession) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [Signer, Uint8Array] {\n    const [proof, rest] = unpack(bytes, [ProofOfPossession], codec);\n    return [new Signer(proof), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return pack([this.proof], codec);\n  }\n}\n\n@serializable()\nexport class SignerEmpty {\n  _type = TypeSymbols.SignerEmpty;\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [SignerEmpty, Uint8Array] {\n    const [rest] = unpack(bytes, [], codec);\n    return [new SignerEmpty(), rest];\n  }\n\n  toBytes(codec: Codec) {\n    return pack([], codec);\n  }\n}\n\nexport function createSignerOrSignerEmptyFromStrings(\n  publicKey?: Uint8Array,\n  signature?: Uint8Array,\n) {\n  return publicKey && signature\n    ? new Signer(\n        new ProofOfPossession(\n          new Uint8Array(publicKey),\n          new Uint8Array(signature),\n        ),\n      )\n    : new SignerEmpty();\n}\n", "import { BaseTx } from '../avax/baseTx';\nimport { Codec } from '../codec/codec';\nimport { concatBytes } from '../../utils/buffer';\nimport { Id } from '../fxs/common';\nimport { NodeId } from '../fxs/common/nodeId';\nimport { pack, unpack } from '../../utils/struct';\nimport { serializable } from '../common/types';\nimport type { Serializable } from '../common/types';\nimport { TypeSymbols } from '../constants';\nimport { AbstractSubnetTx } from './abstractSubnetTx';\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-remove-subnet-validator-tx\n */\n@serializable()\nexport class RemoveSubnetValidatorTx extends AbstractSubnetTx {\n  _type = TypeSymbols.RemoveSubnetValidatorTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly nodeId: NodeId,\n    public readonly subnetId: Id,\n    public readonly subnetAuth: Serializable,\n  ) {\n    super();\n  }\n\n  getSubnetID() {\n    return this.subnetId;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [RemoveSubnetValidatorTx, Uint8Array] {\n    const [baseTx, nodeId, subnetId, subnetAuth, rest] = unpack(\n      bytes,\n      [BaseTx, NodeId, Id, Codec],\n      codec,\n    );\n    return [\n      new RemoveSubnetValidatorTx(baseTx, nodeId, subnetId, subnetAuth),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.nodeId, this.subnetId], codec),\n      codec.PackPrefix(this.subnetAuth),\n    );\n  }\n}\n", "import { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { TypeSymbols } from '../constants';\nimport { Id } from '../fxs/common';\nimport { concatBytes } from '../../utils/buffer';\nimport { AbstractSubnetTx } from './abstractSubnetTx';\nimport type { OutputOwners } from '../../serializable/fxs/secp256k1';\n\n/**\n * @see https://github.com/avalanche-foundation/ACPs/blob/main/ACPs/31-enable-subnet-ownership-transfer.md\n * TODO: add doc reference after D-upgrade\n */\n@serializable()\nexport class TransferSubnetOwnershipTx extends AbstractSubnetTx {\n  _type = TypeSymbols.TransferSubnetOwnershipTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetID: Id,\n    public readonly subnetAuth: Serializable, // current owner indices\n    public readonly subnetOwners: Serializable, // new owners\n  ) {\n    super();\n  }\n\n  getSubnetID() {\n    return this.subnetID;\n  }\n\n  getSubnetOwners() {\n    return this.subnetOwners as OutputOwners;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [TransferSubnetOwnershipTx, Uint8Array] {\n    const [baseTx, subnetID, subnetAuth, subnetOwners, rest] = unpack(\n      bytes,\n      [BaseTx, Id, Codec, Codec],\n      codec,\n    );\n    return [\n      new TransferSubnetOwnershipTx(baseTx, subnetID, subnetAuth, subnetOwners),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack([this.baseTx, this.subnetID], codec),\n      codec.PackPrefix(this.subnetAuth),\n      codec.PackPrefix(this.subnetOwners),\n    );\n  }\n}\n", "import { concatBytes } from '../../utils/buffer';\nimport { pack, unpack } from '../../utils/struct';\nimport { BaseTx } from '../avax/baseTx';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Int } from '../primitives';\nimport { Byte } from '../primitives';\nimport { BigIntPr } from '../primitives';\nimport { TypeSymbols } from '../constants';\nimport { Id } from '../fxs/common';\nimport { AbstractSubnetTx } from './abstractSubnetTx';\n\n/**\n * @see https://docs.avax.network/reference/avalanchego/p-chain/txn-format#unsigned-transform-subnet-tx\n */\n@serializable()\nexport class TransformSubnetTx extends AbstractSubnetTx {\n  _type = TypeSymbols.TransformSubnetTx;\n\n  constructor(\n    public readonly baseTx: BaseTx,\n    public readonly subnetID: Id,\n    public readonly assetId: Id,\n    public readonly initialSupply: BigIntPr,\n    public readonly maximumSupply: BigIntPr,\n    public readonly minConsumptionRate: BigIntPr,\n    public readonly maxConsumptionRate: BigIntPr,\n    public readonly minValidatorStake: BigIntPr,\n    public readonly maxValidatorStake: BigIntPr,\n    public readonly minStakeDuration: Int,\n    public readonly maxStakeDuration: Int,\n    public readonly minDelegationFee: Int,\n    public readonly minDelegatorStake: Int,\n    public readonly maxValidatorWeightFactor: Byte,\n    public readonly uptimeRequirement: Int,\n    public readonly subnetAuth: Serializable,\n  ) {\n    super();\n  }\n\n  getSubnetID() {\n    return this.subnetID;\n  }\n\n  static fromBytes(\n    bytes: Uint8Array,\n    codec: Codec,\n  ): [TransformSubnetTx, Uint8Array] {\n    const [\n      baseTx,\n      subnetID,\n      assetId,\n      initialSupply,\n      maximumSupply,\n      minConsumptionRate,\n      maxConsumptionRate,\n      minValidatorStake,\n      maxValidatorStake,\n      minStakeDuration,\n      maxStakeDuration,\n      minDelegationFee,\n      minDelegatorStake,\n      maxValidatorWeightFactor,\n      uptimeRequirement,\n      subnetAuth,\n      rest,\n    ] = unpack(\n      bytes,\n      [\n        BaseTx,\n        Id,\n        Id,\n        BigIntPr,\n        BigIntPr,\n        BigIntPr,\n        BigIntPr,\n        BigIntPr,\n        BigIntPr,\n        Int,\n        Int,\n        Int,\n        Int,\n        Byte,\n        Int,\n        Codec,\n      ],\n      codec,\n    );\n    return [\n      new TransformSubnetTx(\n        baseTx,\n        subnetID,\n        assetId,\n        initialSupply,\n        maximumSupply,\n        minConsumptionRate,\n        maxConsumptionRate,\n        minValidatorStake,\n        maxValidatorStake,\n        minStakeDuration,\n        maxStakeDuration,\n        minDelegationFee,\n        minDelegatorStake,\n        maxValidatorWeightFactor,\n        uptimeRequirement,\n        subnetAuth,\n      ),\n      rest,\n    ];\n  }\n\n  toBytes(codec: Codec) {\n    return concatBytes(\n      pack(\n        [\n          this.baseTx,\n          this.subnetID,\n          this.assetId,\n          this.initialSupply,\n          this.maximumSupply,\n          this.minConsumptionRate,\n          this.maxConsumptionRate,\n          this.minValidatorStake,\n          this.maxValidatorStake,\n          this.minStakeDuration,\n          this.maxStakeDuration,\n          this.minDelegationFee,\n          this.minDelegatorStake,\n          this.maxValidatorWeightFactor,\n          this.uptimeRequirement,\n        ],\n        codec,\n      ),\n      codec.PackPrefix(this.subnetAuth),\n    );\n  }\n}\n", "import { unpack } from '../../utils/struct';\nimport { BaseTx as AvaxBaseTx } from '../avax/baseTx';\nimport type { Codec } from '../codec/codec';\nimport { serializable } from '../common/types';\nimport { PVMTx } from './abstractTx';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://github.com/avalanche-foundation/ACPs/blob/main/ACPs/23-p-chain-native-transfers.md\n * TODO: add doc reference after D-upgrade\n */\n@serializable()\nexport class BaseTx extends PVMTx {\n  _type = TypeSymbols.PvmBaseTx;\n\n  constructor(public readonly baseTx: AvaxBaseTx) {\n    super();\n  }\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [BaseTx, Uint8Array] {\n    const [baseTx, remaining] = unpack(bytes, [AvaxBaseTx], codec);\n    return [new BaseTx(baseTx), remaining];\n  }\n\n  toBytes(codec: Codec) {\n    return this.baseTx.toBytes(codec);\n  }\n}\n", "import { Codec, Manager } from '../codec';\nimport * as Secp256k1Fx from '../fxs/secp256k1';\nimport { AddDelegatorTx } from './addDelegatorTx';\nimport { AddSubnetValidatorTx } from './addSubnetValidatorTx';\nimport { AddValidatorTx } from './addValidatorTx';\nimport { AdvanceTimeTx } from './advanceTimeTx';\nimport { CreateChainTx } from './createChainTx';\nimport { CreateSubnetTx } from './createSubnetTx';\nimport { ExportTx } from './exportTx';\nimport { ImportTx } from './importTx';\nimport { RewardValidatorTx } from './rewardValidatorTx';\nimport { StakeableLockIn } from './stakeableLockIn';\nimport { StakeableLockOut } from './stakeableLockOut';\nimport { AddPermissionlessValidatorTx } from './addPermissionlessValidatorTx';\nimport { AddPermissionlessDelegatorTx } from './addPermissionlessDelegatorTx';\nimport { Signer, SignerEmpty } from './signer';\nimport { RemoveSubnetValidatorTx } from './removeSubnetValidatorTx';\nimport { TransferSubnetOwnershipTx } from './transferSubnetOwnershipTx';\nimport { TransformSubnetTx } from './transformSubnetTx';\nimport { BaseTx } from './baseTx';\n\n/**\n * @see https://github.com/ava-labs/avalanchego/blob/master/vms/platformvm/txs/codec.go#L35\n */\nexport const codec = new Codec([\n  ...new Array(5), // 0-4\n\n  ...Secp256k1Fx.TypeRegistry, // 5-9\n  Secp256k1Fx.Input, // 10\n  Secp256k1Fx.OutputOwners, //11\n\n  AddValidatorTx, // 12\n  AddSubnetValidatorTx, // 13\n  AddDelegatorTx, // 14\n\n  CreateChainTx, // 15\n  CreateSubnetTx, // 16\n\n  ImportTx, // 17\n  ExportTx, // 18\n\n  AdvanceTimeTx, //19\n  RewardValidatorTx, //20\n\n  StakeableLockIn, // 21\n  StakeableLockOut, // 22\n\n  RemoveSubnetValidatorTx, //23\n  TransformSubnetTx, // 24\n  AddPermissionlessValidatorTx, //  25\n  AddPermissionlessDelegatorTx, // 26\n\n  SignerEmpty, // 27\n  Signer, // 28\n\n  ...new Array(4), // 29-32\n\n  TransferSubnetOwnershipTx, // 33\n  BaseTx, // 34\n]);\n\nlet manager: Manager;\nexport const getPVMManager = () => {\n  if (manager) return manager;\n  manager = new Manager();\n  manager.RegisterCodec(0, codec);\n  return manager;\n};\n", "import { DEFAULT_CODEC_VERSION } from '../constants/codec';\nimport { getAVMManager } from '../serializable/avm/codec';\nimport type { Manager } from '../serializable/codec';\nimport type { Serializable } from '../serializable/common/types';\nimport type { VM } from '../serializable/constants';\nimport { getEVMManager } from '../serializable/evm/codec';\nimport { Short } from '../serializable/primitives';\nimport { getPVMManager } from '../serializable/pvm/codec';\n\nexport interface GenericTransaction extends Serializable {\n  vm: VM;\n}\n\nexport function getManagerForVM(vm: VM): Manager {\n  switch (vm) {\n    case 'AVM':\n      return getAVMManager();\n    case 'EVM':\n      return getEVMManager();\n    case 'PVM':\n      return getPVMManager();\n    default:\n      throw new Error('unknown VM');\n  }\n}\n\nexport function unpackWithManager(vm: VM, txBytes: Uint8Array) {\n  return getManagerForVM(vm).unpackTransaction(txBytes);\n}\n\nexport function packTx(tx: GenericTransaction) {\n  return getManagerForVM(tx.vm).packCodec(tx);\n}\n\nexport function getDefaultCodecFromTx(tx: GenericTransaction) {\n  return getManagerForVM(tx.vm).getCodecForVersion(\n    new Short(DEFAULT_CODEC_VERSION),\n  );\n}\n", "import { concatBytes } from '@noble/hashes/utils';\nimport { DEFAULT_CODEC_VERSION } from '../../constants/codec';\nimport { getDefaultCodecFromTx } from '../../utils/packTx';\nimport { toListStruct } from '../../utils/serializeList';\nimport { unpack } from '../../utils/struct';\nimport type { Transaction } from '../../vms/common/transaction';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport type { Credential } from '../fxs/secp256k1';\nimport { Short } from '../primitives';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-Exporttx\n */\n@serializable()\nexport class SignedTx {\n  _type = TypeSymbols.AvmSignedTx;\n\n  constructor(\n    public readonly unsignedTx: Transaction,\n    public readonly credentials: Serializable[],\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [SignedTx, Uint8Array] {\n    const [unsignedTx, outs, remaining] = unpack(\n      bytes,\n      [Codec, toListStruct(Codec)],\n      codec,\n    );\n    return [new SignedTx(unsignedTx as Transaction, outs), remaining];\n  }\n\n  getCredentials(): Credential[] {\n    return this.credentials as Credential[];\n  }\n\n  getAllSignatures() {\n    return this.getCredentials().flatMap((cred) => cred.getSignatures());\n  }\n\n  toBytes() {\n    const codec = getDefaultCodecFromTx(this.unsignedTx);\n    return concatBytes(\n      new Short(DEFAULT_CODEC_VERSION).toBytes(),\n      codec.PackPrefix(this.unsignedTx),\n      codec.PackPrefixList(this.credentials),\n    );\n  }\n}\n", "import type { BaseTx } from './baseTx';\nimport type { Serializable } from '../common/types';\nimport type { TransferableOutput } from './transferableOutput';\nimport type { TransferableInput } from './transferableInput';\nimport { TypeSymbols } from '../constants';\n\nexport function isBaseTx(tx: Serializable): tx is BaseTx {\n  return tx._type === TypeSymbols.BaseTx;\n}\n\nexport function isTransferableOutput(\n  out: Serializable,\n): out is TransferableOutput {\n  return out._type === TypeSymbols.TransferableOutput;\n}\n\nexport function isTransferableInput(\n  out: Serializable,\n): out is TransferableInput {\n  return out._type === TypeSymbols.TransferableInput;\n}\n", "import type { Serializable } from '../common/types';\nimport type { BaseTx } from './baseTx';\nimport type { CreateAssetTx } from './createAssetTx';\nimport type { ExportTx } from './exportTx';\nimport type { ImportTx } from './importTx';\nimport type { OperationTx } from './operationTx';\nimport { TypeSymbols } from '../constants';\n\nexport function isAvmBaseTx(tx: Serializable): tx is BaseTx {\n  return tx._type === TypeSymbols.AvmBaseTx;\n}\n\nexport function isExportTx(tx: Serializable): tx is ExportTx {\n  return tx._type === TypeSymbols.AvmExportTx;\n}\n\nexport function isImportTx(tx: Serializable): tx is ImportTx {\n  return tx._type === TypeSymbols.AvmImportTx;\n}\n\nexport function isCreateAssetTx(tx: Serializable): tx is CreateAssetTx {\n  return tx._type === TypeSymbols.CreateAssetTx;\n}\n\nexport function isOperationTx(tx: Serializable): tx is OperationTx {\n  return tx._type === TypeSymbols.OperationTx;\n}\n", "import type { Transaction } from '../../vms/common/transaction';\nimport type { EVMTx } from './abstractTx';\nimport type { ExportTx } from './exportTx';\nimport type { ImportTx } from './importTx';\nimport { TypeSymbols } from '../constants';\n\nexport function isExportTx(tx: Transaction): tx is ExportTx {\n  return tx._type == TypeSymbols.EvmExportTx;\n}\n\nexport function isImportTx(tx: Transaction): tx is ImportTx {\n  return tx._type == TypeSymbols.EvmImportTx;\n}\n\nexport function isEvmTx(tx: Transaction): tx is EVMTx {\n  return isImportTx(tx) || isExportTx(tx);\n}\n\nexport function isImportExportTx(tx: Transaction): tx is ImportTx | ExportTx {\n  if (!(isExportTx(tx) || isImportTx(tx))) {\n    return false;\n  }\n  return true;\n}\n", "import type { Transaction } from '../../vms/common/transaction';\nimport type { BaseTx } from './baseTx';\nimport type { ImportTx } from './importTx';\nimport type { ExportTx } from './exportTx';\nimport type { AddValidatorTx } from './addValidatorTx';\nimport type { AddDelegatorTx } from './addDelegatorTx';\nimport type { AddSubnetValidatorTx } from './addSubnetValidatorTx';\nimport type { CreateChainTx } from './createChainTx';\nimport type { CreateSubnetTx } from './createSubnetTx';\nimport type { RemoveSubnetValidatorTx } from './removeSubnetValidatorTx';\nimport type { AddPermissionlessDelegatorTx } from './addPermissionlessDelegatorTx';\nimport type { AddPermissionlessValidatorTx } from './addPermissionlessValidatorTx';\nimport type { AdvanceTimeTx } from './advanceTimeTx';\nimport type { RewardValidatorTx } from './rewardValidatorTx';\nimport type { Signer, SignerEmpty } from './signer';\nimport type { TransferSubnetOwnershipTx } from './transferSubnetOwnershipTx';\nimport { TypeSymbols } from '../constants';\nimport type { TransformSubnetTx } from './transformSubnetTx';\n\nexport function isPvmBaseTx(tx: Transaction): tx is BaseTx {\n  return tx._type === TypeSymbols.PvmBaseTx;\n}\n\nexport function isAddDelegatorTx(tx: Transaction): tx is AddDelegatorTx {\n  return tx._type === TypeSymbols.AddDelegatorTx;\n}\n\nexport function isAddPermissionlessDelegatorTx(\n  tx: Transaction,\n): tx is AddPermissionlessDelegatorTx {\n  return tx._type === TypeSymbols.AddPermissionlessDelegatorTx;\n}\n\nexport function isAddPermissionlessValidatorTx(\n  tx: Transaction,\n): tx is AddPermissionlessValidatorTx {\n  return tx._type === TypeSymbols.AddPermissionlessValidatorTx;\n}\n\nexport function isAddSubnetValidatorTx(\n  tx: Transaction,\n): tx is AddSubnetValidatorTx {\n  return tx._type === TypeSymbols.AddSubnetValidatorTx;\n}\n\nexport function isAddValidatorTx(tx: Transaction): tx is AddValidatorTx {\n  return tx._type === TypeSymbols.AddValidatorTx;\n}\n\nexport function isAdvanceTimeTx(tx: Transaction): tx is AdvanceTimeTx {\n  return tx._type === TypeSymbols.AdvanceTimeTx;\n}\n\nexport function isCreateChainTx(tx: Transaction): tx is CreateChainTx {\n  return tx._type === TypeSymbols.CreateChainTx;\n}\n\nexport function isCreateSubnetTx(tx: Transaction): tx is CreateSubnetTx {\n  return tx._type === TypeSymbols.CreateSubnetTx;\n}\n\nexport function isRemoveSubnetValidatorTx(\n  tx: Transaction,\n): tx is RemoveSubnetValidatorTx {\n  return tx._type === TypeSymbols.RemoveSubnetValidatorTx;\n}\n\nexport function isTransferSubnetOwnershipTx(\n  tx: Transaction,\n): tx is TransferSubnetOwnershipTx {\n  return tx._type === TypeSymbols.TransferSubnetOwnershipTx;\n}\n\nexport function isTransformSubnetTx(tx: Transaction): tx is TransformSubnetTx {\n  return tx._type === TypeSymbols.TransformSubnetTx;\n}\n\nexport function isExportTx(tx: Transaction): tx is ExportTx {\n  return tx._type === TypeSymbols.PvmExportTx;\n}\n\nexport function isImportTx(tx: Transaction): tx is ImportTx {\n  return tx._type === TypeSymbols.PvmImportTx;\n}\n\nexport function isRewardValidatorTx(tx: Transaction): tx is RewardValidatorTx {\n  return tx._type === TypeSymbols.RewardValidatorTx;\n}\n\nexport function isEmptySigner(\n  signer: Signer | SignerEmpty,\n): signer is SignerEmpty {\n  return signer._type === TypeSymbols.SignerEmpty;\n}\n\nexport function isSigner(signer: Signer | SignerEmpty): signer is Signer {\n  return signer._type === TypeSymbols.Signer;\n}\n", "import type { UnsignedTx } from '../vms/common/unsignedTx';\n\nexport const CTxBytesGas = 1n;\nexport const CCostPerSignature = 1000n;\nexport const CFixedFee = 10000;\n\nexport function costCorethTx(tx: UnsignedTx): bigint {\n  const bytesCost = calcBytesCost(tx.toBytes().length);\n\n  const sigCost =\n    BigInt(tx.getSigIndices().flatMap((a) => a).length) * CCostPerSignature;\n  const fixedFee = 10000n;\n  return bytesCost + sigCost + fixedFee;\n}\n\nexport function calcBytesCost(len: number): bigint {\n  return BigInt(len) * CTxBytesGas;\n}\n", "import type { AssetDict } from './models';\nimport type { Utxo } from '../../serializable/avax/utxo';\nimport { isTransferOut } from '../typeGuards';\nimport { filterDuplicateUTXOs } from '../removeDuplicateUTXOs';\n\nexport class UtxoSet {\n  constructor(private utxos: Utxo[]) {\n    this.utxos = filterDuplicateUTXOs(utxos);\n  }\n\n  getUTXOs() {\n    return [...this.utxos];\n  }\n\n  /**\n   * Organize the UTXOs as a dictionary with assetID as the key.\n   */\n  getAssetDict() {\n    const dict = {};\n    this.utxos.forEach((utxo) => {\n      const assetId = utxo.assetId.toString();\n      const valNow = dict[assetId] || [];\n      dict[assetId] = [...valNow, utxo];\n    });\n\n    const finalDict: AssetDict = {};\n    for (const assetID in dict) {\n      finalDict[assetID] = new UtxoSet(dict[assetID]);\n    }\n    return finalDict;\n  }\n\n  /**\n   * Return asset IDs that exist in this set.\n   */\n  getAssetIDs() {\n    const ids = this.utxos.map((utxo) => utxo.assetId.toString());\n    // Filter duplicates\n    return ids.filter((id, index) => ids.indexOf(id) === index);\n  }\n\n  /**\n   * Add a UTXO to the set, and return a new set.\n   * @param utxo\n   */\n  push(utxo: Utxo) {\n    return new UtxoSet([...this.getUTXOs(), utxo]);\n  }\n\n  /**\n   * Return the UTXO ids in this set.\n   */\n  getUTXOIDs() {\n    return this.utxos.map((utxo) => utxo.ID());\n  }\n\n  /**\n   * Merge 2 UtxoSets and return a new set.\n   * @param set\n   */\n  merge(set: UtxoSet) {\n    const newUTXOs = [...this.getUTXOs(), ...set.getUTXOs()];\n    return new UtxoSet(newUTXOs);\n  }\n\n  /**\n   * Return UTXOs that have TransferOut outputs\n   */\n  getTransferOuts() {\n    const utxos = this.utxos.filter((utxo) => {\n      return isTransferOut(utxo.output);\n    });\n    return new UtxoSet(utxos);\n  }\n}\n", "import type { Utxo } from '../serializable/avax/utxo';\n\n/**\n * Returns a new array of unique UTXOs.\n * @param utxos\n */\nexport function filterDuplicateUTXOs(utxos: Utxo[]) {\n  const ids = utxos.map((utxo) => utxo.ID());\n  return utxos.filter((utxo, index) => {\n    return ids.indexOf(utxo.ID()) == index;\n  });\n}\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { concatBytes } from './buffer';\n\nexport function addChecksum(data: Uint8Array) {\n  return concatBytes(data, sha256(data).subarray(-4));\n}\n", "import type { Address } from '../serializable/fxs/common';\nimport type { OutputOwners } from '../serializable/fxs/secp256k1';\nimport { AddressMap } from './addressMap';\n\nexport type MatchOwnerResult = {\n  sigIndicies: number[];\n  addressMap: AddressMap;\n};\nexport const matchOwners = (\n  owners: OutputOwners,\n  inputAddrs: Address[],\n  minIssuanceTime: bigint,\n  sigindices?: number[],\n): MatchOwnerResult | undefined => {\n  if (owners.locktime.value() > minIssuanceTime) {\n    return undefined;\n  }\n\n  const inputAddrSet = new Set(inputAddrs.map((a) => a.toString()));\n  const addressMap = owners.addrs.reduce((agg, addr, i) => {\n    if (\n      agg.size() < owners.threshold.value() &&\n      inputAddrSet.has(addr.value())\n    ) {\n      // only add actual signer addresses if sigindices are known\n      if (sigindices?.length && !sigindices.includes(i)) {\n        return agg;\n      }\n\n      return agg.set(addr, i);\n    }\n    return agg;\n  }, new AddressMap());\n\n  if (addressMap.size() < owners.threshold.value()) {\n    return undefined;\n  }\n\n  return {\n    sigIndicies: Array.from(addressMap.values()),\n    addressMap: addressMap,\n  };\n};\n", "import type { TransferableInput } from '../serializable';\nimport type { Utxo } from '../serializable/avax/utxo';\nimport { Address } from '../serializable/fxs/common';\nimport { addressesFromBytes } from './addressesFromBytes';\nimport { hexToBuffer } from './buffer';\nimport { matchOwners } from './matchOwners';\n\nexport class AddressMap {\n  constructor(initialData: [Address, number][] = []) {\n    initialData.forEach(([address, num]) => {\n      this.set(address, num);\n    });\n  }\n\n  storage = new Map<string, number>();\n\n  set(add: Address, item: number) {\n    this.storage.set(add.toHex(), item);\n    return this;\n  }\n\n  toJSON() {\n    return Array.from(this.storage.entries());\n  }\n\n  static fromJSON(maps: [string, number][]) {\n    return new AddressMap(\n      maps.map(([addressHex, idx]) => [Address.fromHex(addressHex), idx]),\n    );\n  }\n\n  get(add: Address): number | undefined {\n    return this.storage.get(add.toHex());\n  }\n\n  has(add: Address): boolean {\n    return this.storage.has(add.toHex());\n  }\n\n  size() {\n    return this.storage.size;\n  }\n\n  forEach(cb: (value: number, key: Address) => void) {\n    return this.storage.forEach((val, key) => cb(val, Address.fromHex(key)));\n  }\n\n  forEachHex(\n    cb: (value: number, key: string) => void,\n    shouldReorderWithoutGaps = false,\n  ) {\n    // reorder the sigindices, so they start from index 0, without gaps\n    if (shouldReorderWithoutGaps) {\n      return AddressMap.fromJSON(\n        [...this.storage.entries()]\n          .sort((a, b) => a[1] - b[1])\n          .map(([addressHex], index) => [addressHex, index]),\n      ).storage.forEach(cb);\n    }\n\n    return this.storage.forEach(cb);\n  }\n\n  values() {\n    return this.storage.values();\n  }\n}\n\nexport class AddressMaps {\n  constructor(addressMaps: AddressMap[] = []) {\n    if (addressMaps.length) {\n      this.push(...addressMaps);\n    }\n  }\n\n  private storage: AddressMap[] = [];\n  private index: Record<string, [number, number][]> = {};\n  private orderedIndex: Record<string, [number, number][]> = {};\n\n  push(...addressMaps: AddressMap[]) {\n    addressMaps.forEach((addressMap) => {\n      addressMap.forEachHex((index, addressHex) => {\n        this.index[addressHex] = this.index[addressHex] ?? [];\n        this.index[addressHex].push([this.storage.length, index]);\n      });\n\n      addressMap.forEachHex((index, addressHex) => {\n        this.orderedIndex[addressHex] = this.orderedIndex[addressHex] ?? [];\n        this.orderedIndex[addressHex].push([this.storage.length, index]);\n      }, true);\n\n      this.storage.push(addressMap);\n    });\n  }\n\n  // this is a stopgap to quickly fix AddressMap not deriving the order post sorting TransferableInputs. Can probably\n  // be simplified a lot by just deriving the sigIndicies right before returning the unsingedTx\n  static fromTransferableInputs(\n    inputs: TransferableInput[],\n    inputUtxos: Utxo[],\n    minIssuanceTime: bigint,\n    fromAddressesBytes?: Uint8Array[],\n  ) {\n    const utxoMap = inputUtxos.reduce((agg, utxo) => {\n      return agg.set(utxo.utxoId.ID(), utxo);\n    }, new Map<string, Utxo>());\n\n    const addressMaps = inputs.map((input, i) => {\n      const utxo = utxoMap.get(input.utxoID.ID());\n      if (!utxo) throw new Error('input utxo not found');\n\n      if (fromAddressesBytes) {\n        const fromAddresses = addressesFromBytes(fromAddressesBytes);\n\n        const sigData = matchOwners(\n          utxo.getOutputOwners(),\n          fromAddresses,\n          minIssuanceTime,\n          input.sigIndicies(), // we care about signers only\n        );\n\n        if (!sigData) {\n          throw new Error(`input ${i} has no valid owners`);\n        }\n        return sigData.addressMap;\n      }\n\n      // in case fromAddressesBytes were not provided,\n      // get the them from the provided UTXOs using the inputs' signature indices\n      const addressMapData = input.sigIndicies().map((sigIndex) => {\n        const address = utxo.getOutputOwners().addrs[sigIndex];\n        return [address, sigIndex] as [Address, number];\n      });\n\n      return new AddressMap(addressMapData);\n    });\n\n    return new AddressMaps(addressMaps);\n  }\n\n  toJSON() {\n    return this.storage;\n  }\n\n  static fromJSON(addressMaps: [string, number][][]) {\n    return new AddressMaps(addressMaps.map((map) => AddressMap.fromJSON(map)));\n  }\n\n  getAddresses(): Uint8Array[] {\n    return Object.keys(this.index).map((hex) => hexToBuffer(hex));\n  }\n\n  forEach(\n    cb: (coordinates: [number, number][], address: string) => void,\n    useReorderedIndices = false,\n  ) {\n    Object.entries(\n      useReorderedIndices ? this.orderedIndex : this.index,\n    ).forEach(([address, coordinates]) => {\n      cb(coordinates, address);\n    });\n  }\n\n  has(address: Address): boolean {\n    return address.toHex() in this.index;\n  }\n\n  toArray() {\n    return this.storage;\n  }\n\n  merge(newMap: AddressMaps) {\n    newMap.toArray().forEach((map) => this.push(map));\n  }\n\n  getSigIndicesForAddress(address: Address, useReorderedIndices = false) {\n    if (useReorderedIndices) {\n      return this.orderedIndex[address.toHex()];\n    }\n\n    return this.index[address.toHex()];\n  }\n}\n", "import { isImportTx as isAvmImportTx } from '../serializable/avm';\nimport { isImportTx as isPvmImportTx } from '../serializable/pvm';\nimport {\n  isExportTx as isEvmExportTx,\n  isImportExportTx,\n  isEvmTx,\n} from '../serializable/evm';\nimport type { AvaxTx } from '../serializable/avax';\nimport type { EVMTx } from '../serializable/evm/abstractTx';\n\nexport const getTransferableInputsByEvmTx = (tx: EVMTx) => {\n  if (isImportExportTx(tx)) {\n    return isEvmExportTx(tx) ? [] : tx.importedInputs;\n  }\n\n  // Unreachable\n  return [];\n};\n\nexport const getTransferableInputsByTx = (tx: AvaxTx | EVMTx) => {\n  if (isEvmTx(tx)) {\n    return getTransferableInputsByEvmTx(tx);\n  }\n  if (isAvmImportTx(tx) || isPvmImportTx(tx)) {\n    return [...(tx.baseTx.inputs ?? []), ...(tx.ins ?? [])];\n  }\n\n  return tx.getInputs();\n};\n", "import {\n  isExportTx as isEvmExportTx,\n  isEvmTx,\n  isImportExportTx,\n} from '../serializable/evm';\nimport { isExportTx as isAvmExportTx } from '../serializable/avm';\nimport {\n  isAddDelegatorTx,\n  isAddPermissionlessDelegatorTx,\n  isAddPermissionlessValidatorTx,\n  isAddValidatorTx,\n  isCreateSubnetTx,\n  isExportTx as isPvmExportTx,\n} from '../serializable/pvm';\nimport type { AvaxTx } from '../serializable/avax';\nimport type { EVMTx } from '../serializable/evm/abstractTx';\nimport type { TransferableOutput } from '../serializable/avax';\nimport type { OutputOwners } from '../serializable';\n\nexport const getTransferableOutputsByEvmTx = (tx: EVMTx) => {\n  if (isImportExportTx(tx)) {\n    return isEvmExportTx(tx) ? tx.exportedOutputs : [];\n  }\n  // Unreachable\n  return [];\n};\n\nexport const getTransferableOutputsByTx = (tx: AvaxTx | EVMTx) => {\n  if (isEvmTx(tx)) {\n    return getTransferableOutputsByEvmTx(tx);\n  }\n  if (isAvmExportTx(tx) || isPvmExportTx(tx)) {\n    return [...(tx.baseTx?.outputs ?? []), ...(tx.outs ?? [])];\n  } else if (\n    isAddValidatorTx(tx) ||\n    isAddDelegatorTx(tx) ||\n    isAddPermissionlessValidatorTx(tx) ||\n    isAddPermissionlessDelegatorTx(tx)\n  ) {\n    const outs: (TransferableOutput | OutputOwners)[] = [\n      ...(tx.baseTx?.outputs ?? []),\n      ...(tx.stake ?? []),\n    ];\n\n    if (isAddValidatorTx(tx)) {\n      // validation reward + delegation reward after cortina upgrade\n      outs.push(tx.getRewardsOwner(), tx.getRewardsOwner());\n    } else if (isAddDelegatorTx(tx)) {\n      outs.push(tx.getRewardsOwner());\n    } else if (isAddPermissionlessValidatorTx(tx)) {\n      outs.push(tx.getValidatorRewardsOwner(), tx.getDelegatorRewardsOwner());\n    } else {\n      outs.push(tx.getDelegatorRewardsOwner());\n    }\n\n    return outs;\n  } else if (isCreateSubnetTx(tx)) {\n    return [...tx.baseTx.outputs, tx.getSubnetOwners()];\n  } else {\n    // This covers base tx, import, other subnet related transactions\n    return tx?.baseTx?.outputs ?? [];\n  }\n};\n", "import type { AvaxTx, TransferableInput } from '../serializable/avax';\nimport { isTransferableInput } from '../serializable/avax';\nimport type { Input, Output } from '../serializable/evm';\nimport {\n  isExportTx as isEvmExportTx,\n  isImportTx as isEvmImportTx,\n} from '../serializable/evm';\nimport type { TransferableOutput } from '../serializable/avax';\nimport { isTransferableOutput } from '../serializable/avax';\nimport { getTransferableInputsByTx } from './getTransferableInputsByTx';\nimport { getTransferableOutputsByTx } from './getTransferableOutputsByTx';\nimport type { EVMTx } from '../serializable/evm/abstractTx';\n\nconst _reducer = (\n  assetAmountMap: Map<string, bigint>,\n  item: Input | TransferableInput | Output | TransferableOutput,\n) => {\n  const previousAmount = assetAmountMap.get(item.assetId.toString()) ?? 0n;\n  const amount =\n    isTransferableInput(item) || isTransferableOutput(item)\n      ? item.amount()\n      : item.amount.value();\n\n  assetAmountMap.set(item.assetId.toString(), previousAmount + amount);\n\n  return assetAmountMap;\n};\n\nexport const getInputAmounts = (tx: AvaxTx | EVMTx) => {\n  /**\n   * `getTransferableInputsByTx` only returns `TransferableInputs`\n   * so we have to collect the EVM Inputs in an extra step\n   * */\n  if (isEvmExportTx(tx)) {\n    return tx.ins.reduce(_reducer, new Map<string, bigint>());\n  }\n  const inputs = getTransferableInputsByTx(tx);\n  return inputs.reduce(_reducer, new Map<string, bigint>());\n};\n\nexport const getOutputAmounts = (tx: AvaxTx | EVMTx) => {\n  /**\n   * `getTransferableOutputsByTx` only returns `TransferableOutputs`\n   * so we have to collect the EVM Outs in an extra step\n   * */\n  if (isEvmImportTx(tx)) {\n    return tx.Outs.reduce(_reducer, new Map<string, bigint>());\n  }\n  const outputs = getTransferableOutputsByTx(tx);\n  return outputs.reduce((assetAmountMap, output) => {\n    if (isTransferableOutput(output)) {\n      return _reducer(assetAmountMap, output);\n    }\n\n    return assetAmountMap;\n  }, new Map<string, bigint>());\n};\n\nexport const getBurnedAmountByTx = (tx: AvaxTx | EVMTx) => {\n  const inputAmounts = getInputAmounts(tx);\n  const outputAmounts = getOutputAmounts(tx);\n  const burnedAmounts = new Map<string, bigint>();\n\n  for (const [id, inputAmount] of inputAmounts.entries()) {\n    const outputAmount = outputAmounts.get(id) ?? 0n;\n    burnedAmounts.set(id, inputAmount - outputAmount);\n  }\n\n  return burnedAmounts;\n};\n", "import util from 'util';\nimport { bufferToHex } from './buffer';\n\n// useful for printing transactions\nexport const printJSON = (obj: any) => {\n  console.log(JSON.stringify(obj, null, 2));\n};\n\n// useful for printing nested objects\nexport const printDeep = (obj: any) => {\n  console.log(util.inspect(obj, { depth: null, colors: true }));\n};\n\nexport const printHex = (bytes: Uint8Array, name = '') => {\n  console.log(`name = ${name}`, bufferToHex(bytes));\n};\n", "import type { Context } from '../vms/context/model';\nimport {\n  isAddDelegatorTx,\n  isAddPermissionlessDelegatorTx,\n  isAddPermissionlessValidatorTx,\n  isAddSubnetValidatorTx,\n  isAddValidatorTx,\n  isCreateChainTx,\n  isCreateSubnetTx,\n  isPvmBaseTx,\n  isExportTx as isPvmExportTx,\n  isImportTx as isPvmImportTx,\n  isRemoveSubnetValidatorTx,\n  isTransferSubnetOwnershipTx,\n  isTransformSubnetTx,\n} from '../serializable/pvm';\nimport type { Transaction, UnsignedTx } from '../vms/common';\nimport type { EVMTx } from '../serializable/evm';\nimport { isImportExportTx as isEvmImportExportTx } from '../serializable/evm';\nimport { costCorethTx } from './costs';\nimport {\n  isAvmBaseTx,\n  isExportTx as isAvmExportTx,\n  isImportTx as isAvmImportTx,\n} from '../serializable/avm';\nimport { getBurnedAmountByTx } from './getBurnedAmountByTx';\nimport type { AvaxTx } from '../serializable/avax';\nimport { PrimaryNetworkID } from '../constants/networkIDs';\n\nconst _getBurnedAmount = (tx: Transaction, context: Context) => {\n  const burnedAmounts = getBurnedAmountByTx(tx as AvaxTx | EVMTx);\n  return burnedAmounts.get(context.avaxAssetID) ?? 0n;\n};\n\nexport const validateBurnedAmount = ({\n  unsignedTx,\n  context,\n  burnedAmount,\n  evmBaseFee,\n  evmFeeTolerance,\n}: {\n  unsignedTx: UnsignedTx;\n  context: Context;\n  burnedAmount?: bigint;\n  evmBaseFee?: bigint; // fetched from the network and converted into nAvax (https://docs.avax.network/quickstart/transaction-fees#c-chain-fees)\n  evmFeeTolerance?: number; // tolerance percentage range where the burned amount is considered valid. e.g.: with evmFeeTolerance = 20% -> (evmBaseFee * 0.8 <= burnedAmount <= evmBaseFee * 1.2)\n}): { isValid: boolean; txFee: bigint } => {\n  const tx = unsignedTx.getTx();\n  const burned = burnedAmount ?? _getBurnedAmount(tx, context);\n\n  const validate = (expectedAmount: bigint) => ({\n    isValid: burned === expectedAmount,\n    txFee: expectedAmount,\n  });\n\n  if (isEvmImportExportTx(tx)) {\n    if (!evmBaseFee || !evmFeeTolerance) {\n      throw new Error('missing evm fee data');\n    }\n\n    const feeToleranceInt = Math.floor(evmFeeTolerance);\n\n    if (feeToleranceInt < 1 || feeToleranceInt > 100) {\n      throw new Error('evmFeeTolerance must be [1,100]');\n    }\n\n    const feeAmount = evmBaseFee * costCorethTx(unsignedTx);\n    const min = (feeAmount * (100n - BigInt(feeToleranceInt))) / 100n;\n    const max = (feeAmount * (100n + BigInt(feeToleranceInt))) / 100n;\n\n    return {\n      isValid: burned >= min && burned <= max,\n      txFee: burned,\n    };\n  }\n\n  if (isAddValidatorTx(tx)) {\n    return validate(context.addPrimaryNetworkValidatorFee);\n  }\n\n  if (isAddDelegatorTx(tx)) {\n    return validate(context.addPrimaryNetworkDelegatorFee);\n  }\n\n  if (isCreateSubnetTx(tx)) {\n    return validate(context.createSubnetTxFee);\n  }\n\n  if (isCreateChainTx(tx)) {\n    return validate(context.createBlockchainTxFee);\n  }\n\n  if (isAddSubnetValidatorTx(tx)) {\n    return validate(context.addSubnetValidatorFee);\n  }\n\n  if (isTransformSubnetTx(tx)) {\n    return validate(context.transformSubnetTxFee);\n  }\n\n  if (isAddPermissionlessValidatorTx(tx)) {\n    const isPrimarySubnet =\n      tx.subnetValidator.subnetId.toString() === PrimaryNetworkID.toString();\n\n    return validate(\n      isPrimarySubnet\n        ? context.addPrimaryNetworkValidatorFee\n        : context.addSubnetValidatorFee,\n    );\n  }\n\n  if (isAddPermissionlessDelegatorTx(tx)) {\n    const isPrimarySubnet =\n      tx.subnetValidator.subnetId.toString() === PrimaryNetworkID.toString();\n    return validate(\n      isPrimarySubnet\n        ? context.addPrimaryNetworkDelegatorFee\n        : context.addSubnetDelegatorFee,\n    );\n  }\n\n  if (\n    isAvmBaseTx(tx) ||\n    isPvmBaseTx(tx) ||\n    isAvmExportTx(tx) ||\n    isAvmImportTx(tx) ||\n    isPvmExportTx(tx) ||\n    isPvmImportTx(tx) ||\n    isRemoveSubnetValidatorTx(tx) ||\n    isTransferSubnetOwnershipTx(tx)\n  ) {\n    return validate(context.baseTxFee);\n  }\n\n  throw new Error(`tx type is not supported`);\n};\n", "import { concatBytes } from '@noble/hashes/utils';\nimport { UTXOID } from '.';\nimport { isRewardsOwner, isStakeableLockOut, isTransferOut } from '../../utils';\nimport { pack, unpack } from '../../utils/struct';\nimport { Codec } from '../codec/codec';\nimport type { Serializable } from '../common/types';\nimport { serializable } from '../common/types';\nimport { Id } from '../fxs/common';\nimport { TypeSymbols } from '../constants';\n\n/**\n * @see https://docs.avax.network/specs/avm-transaction-serialization#unsigned-Exporttx\n */\n@serializable()\nexport class Utxo {\n  _type = TypeSymbols.UTXO;\n\n  constructor(\n    public readonly utxoId: UTXOID,\n    public readonly assetId: Id,\n    public readonly output: Serializable,\n  ) {}\n\n  static fromBytes(bytes: Uint8Array, codec: Codec): [Utxo, Uint8Array] {\n    const [utxoId, assetId, output, remaining] = unpack(\n      bytes,\n      [UTXOID, Id, Codec],\n      codec,\n    );\n    return [new Utxo(utxoId, assetId, output), remaining];\n  }\n\n  getOutputOwners() {\n    if (isTransferOut(this.output)) {\n      return this.output.outputOwners;\n    }\n    if (isStakeableLockOut(this.output)) {\n      return this.output.getOutputOwners();\n    }\n    if (isRewardsOwner(this.output)) {\n      return this.output;\n    }\n    throw new Error('unable to get output owner');\n  }\n\n  toBytes(codec) {\n    return concatBytes(\n      pack([this.utxoId, this.assetId], codec),\n      codec.PackPrefix(this.output),\n    );\n  }\n\n  getAssetId() {\n    return this.assetId.toString();\n  }\n\n  ID() {\n    return this.utxoId.ID();\n  }\n}\n", "import type { UnsignedTx } from '../vms/common/unsignedTx';\nimport { secp256k1 } from '../crypto';\n\nexport const addTxSignatures = async ({\n  unsignedTx,\n  privateKeys,\n}: {\n  unsignedTx: UnsignedTx;\n  privateKeys: Uint8Array[];\n}) => {\n  const unsignedBytes = unsignedTx.toBytes();\n\n  await Promise.all(\n    privateKeys.map(async (privateKey) => {\n      const publicKey = secp256k1.getPublicKey(privateKey);\n\n      if (unsignedTx.hasPubkey(publicKey)) {\n        const signature = await secp256k1.sign(unsignedBytes, privateKey);\n        unsignedTx.addSignature(signature);\n      }\n    }),\n  );\n};\n", "export const AVAX_PUBLIC_URL = 'https://api.avax.network';\nexport const AVAX_PUBLIC_URL_FUJI = 'https://api.avax-test.network';\n", "export type RpcCallOptions = {\n  headers?: Record<string, string>;\n};\n\ntype JsonRpcSuccessResp<T> = {\n  jsonrpc: string;\n  result: T;\n  id: number;\n  error?: undefined;\n};\n\ninterface JsonRpcError {\n  code: number;\n  message: string;\n  data?: any;\n}\n\ntype JsonRpcErrorResp = {\n  jsonrpc: string;\n  id: number;\n  result?: undefined;\n  error: JsonRpcError;\n};\n\nexport class JrpcProvider {\n  private reqId = 0;\n\n  constructor(private readonly url: string) {}\n\n  async callMethod<T>(\n    method: string,\n    parameters?: Array<Record<string, any>> | Record<string, any>,\n    fetchOptions?: RequestInit,\n  ): Promise<T> {\n    const body = {\n      jsonrpc: '2.0',\n      id: this.reqId++,\n      method,\n      params: parameters,\n    };\n    const resp = await fetch(this.url, {\n      ...fetchOptions,\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        ...fetchOptions?.headers,\n      },\n    })\n      .then(async (r) => {\n        return r.json();\n      })\n      .then((data) => data as JsonRpcSuccessResp<T> | JsonRpcErrorResp);\n\n    if (resp.error) throw new Error(resp.error.message);\n\n    return resp.result;\n  }\n\n  // TODO: Batch RPC call\n}\n", "/* \n  this class has methods that pertain to all api sections\n*/\n\nimport { AVAX_PUBLIC_URL } from '../../constants/public-urls';\nimport { JrpcProvider } from './rpc';\n\nexport abstract class Api {\n  protected rpcProvider: JrpcProvider;\n\n  constructor(\n    baseURL: string = AVAX_PUBLIC_URL,\n    protected path: string,\n    protected base?: string,\n    protected fetchOptions?: RequestInit,\n  ) {\n    this.rpcProvider = new JrpcProvider(baseURL + path);\n  }\n\n  setFetchOptions(options: RequestInit | undefined) {\n    this.fetchOptions = options;\n  }\n\n  protected getMethodName = (methodName: string) => {\n    if (!this.base) {\n      return methodName;\n    }\n    return `${this.base}.${methodName}`;\n  };\n\n  protected callRpc = <T>(\n    methodName: string,\n    params?: Array<Record<string, any>> | Record<string, any>,\n  ): Promise<T> =>\n    this.rpcProvider.callMethod<T>(\n      this.getMethodName(methodName),\n      params,\n      this.fetchOptions,\n    );\n}\n", "/* \n  this class includes methods that are shared between all three chains/vms\n*/\n\nimport { AVAX_PUBLIC_URL } from '../../constants/public-urls';\nimport type { SignedTx } from '../../serializable/avax';\nimport { Utxo } from '../../serializable/avax/utxo';\nimport type { Manager } from '../../serializable/codec';\nimport { addChecksum } from '../../utils';\nimport { bufferToHex, hexToBuffer } from '../../utils/buffer';\nimport type {\n  GetUTXOsApiResp,\n  GetUTXOsInput,\n  IssueTxParams,\n  IssueTxResponse,\n} from './apiModels';\nimport { Api } from './baseApi';\n\nexport abstract class ChainApi extends Api {\n  constructor(\n    baseURL: string = AVAX_PUBLIC_URL,\n    protected path: string,\n    protected base: string,\n    protected manager: Manager,\n  ) {\n    super(baseURL, path, base);\n  }\n\n  async getUTXOs(input: GetUTXOsInput) {\n    const resp = await this.callRpc<GetUTXOsApiResp>('getUTXOs', {\n      ...input,\n      encoding: 'hex',\n    });\n    const utxos = resp.utxos.map((utxoHex) =>\n      this.manager.unpack(hexToBuffer(utxoHex), Utxo),\n    );\n\n    return {\n      ...resp,\n      utxos,\n    };\n  }\n\n  issueTx(issueTxParams: IssueTxParams): Promise<IssueTxResponse> {\n    return this.callRpc<IssueTxResponse>('issueTx', issueTxParams);\n  }\n\n  issueSignedTx(tx: SignedTx): Promise<IssueTxResponse> {\n    return this.issueTx({\n      tx: bufferToHex(addChecksum(tx.toBytes())),\n    });\n  }\n}\n", "/* \n  this class is for shared methods between avm/pvm api's\n*/\n\nimport { SignedTx } from '../../serializable/avax';\nimport { hexToBuffer } from '../../utils';\nimport type { GetAddressTxsParams, GetAddressTxsResponse } from '../avm/models';\nimport type { GetBalanceParams, GetBalanceResponse } from '../pvm';\nimport type { GetTxServerResponse } from '../pvm/privateModels';\nimport type {\n  GetAssetDescriptionResponse,\n  GetTxParams,\n  GetTxStatusParams,\n  GetTxStatusResponse,\n} from './apiModels';\nimport { ChainApi } from './chainAPI';\n\nexport class AvaxApi extends ChainApi {\n  getAssetDescription(assetID: string): Promise<GetAssetDescriptionResponse> {\n    return this.callRpc<GetAssetDescriptionResponse>('getAssetDescription', {\n      assetID,\n    });\n  }\n\n  getTx = async (getTxParams: GetTxParams) => {\n    const resp = await this.callRpc<GetTxServerResponse>('getTx', {\n      ...getTxParams,\n      encoding: 'hex',\n    });\n    return this.manager.unpack(hexToBuffer(resp.tx), SignedTx);\n  };\n\n  getTxJson = (getTxParams: GetTxParams) => {\n    return this.callRpc<GetTxServerResponse>('getTx', {\n      ...getTxParams,\n      encoding: 'json',\n    });\n  };\n\n  getTxStatus(getTxStatus: GetTxStatusParams): Promise<GetTxStatusResponse> {\n    return this.callRpc<GetTxStatusResponse>('getTxStatus', {\n      includeReason: true,\n      ...getTxStatus,\n    });\n  }\n\n  getBalance(getBalanceParams: GetBalanceParams): Promise<GetBalanceResponse> {\n    return this.callRpc<GetBalanceResponse>('getBalance', getBalanceParams);\n  }\n\n  getAddressTxs(\n    GetAddressTxsParams: GetAddressTxsParams,\n  ): Promise<GetAddressTxsResponse> {\n    return this.callRpc<GetAddressTxsResponse>(\n      'GetAddressTxs',\n      GetAddressTxsParams,\n    );\n  }\n}\n", "import { getAVMManager } from '../../serializable/avm/codec';\nimport { AvaxApi } from '../common/avaxApi';\nimport type {\n  BuildGenesisParams,\n  BuildGenesisResponse,\n  GetAllBalancesParams,\n  GetAllBalancesResponse,\n} from './models';\n\nexport class AVMApi extends AvaxApi {\n  constructor(baseURL?: string) {\n    super(baseURL, '/ext/bc/X', 'avm', getAVMManager());\n  }\n\n  /**\n   * Given a JSON representation of this Virtual Machine\u2019s genesis state, create the byte representation of that state.\n   *\n   * @param genesisData The blockchain's genesis data object\n   *\n   * @returns Promise of a string of bytes\n   */\n  buildGenesis = async (\n    params: BuildGenesisParams,\n  ): Promise<BuildGenesisResponse> => {\n    return await this.callRpc<BuildGenesisResponse>('buildGenesis', params);\n  };\n\n  getAllBalances(\n    getAllBalancesParams: GetAllBalancesParams,\n  ): Promise<GetAllBalancesResponse> {\n    return this.callRpc<GetAllBalancesResponse>(\n      'getAllBalances',\n      getAllBalancesParams,\n    );\n  }\n}\n", "import { TransferableInput } from '../serializable/avax';\nimport type { Utxo } from '../serializable/avax/utxo';\nimport { addressesFromBytes } from './addressesFromBytes';\nimport { matchOwners } from './matchOwners';\nimport { isTransferOut } from './typeGuards';\n\ntype GetImportedInputsFromUtxosOutput = {\n  importedInputs: TransferableInput[];\n  inputUTXOs: Utxo[];\n  importedAmounts: Record<string, bigint>;\n};\n\nexport const getImportedInputsFromUtxos = (\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  minIssuanceTime: bigint,\n): GetImportedInputsFromUtxosOutput => {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n  const outputs: GetImportedInputsFromUtxosOutput = {\n    importedInputs: [],\n    inputUTXOs: [],\n    importedAmounts: {},\n  };\n\n  return utxos.reduce((agg, utxo): GetImportedInputsFromUtxosOutput => {\n    const { importedInputs, inputUTXOs, importedAmounts } = agg;\n    const out = utxo.output;\n    if (!isTransferOut(out)) return agg;\n\n    const sigData = matchOwners(\n      out.outputOwners,\n      fromAddresses,\n      minIssuanceTime,\n    );\n\n    if (!sigData) return agg;\n\n    importedInputs.push(\n      TransferableInput.fromUtxoAndSigindicies(utxo, sigData.sigIndicies),\n    );\n    inputUTXOs.push(utxo);\n    importedAmounts[utxo.getAssetId()] =\n      (importedAmounts[utxo.getAssetId()] ?? 0n) + out.amount();\n    return agg;\n  }, outputs);\n};\n", "import { getPVMManager } from '../serializable/pvm/codec';\nimport type { TransferableOutput } from '../serializable/avax';\nimport { getAVMManager } from '../serializable/avm/codec';\nimport type { Output } from '../serializable/evm';\nimport { Id } from '../serializable/fxs/common';\nimport { bytesCompare } from './bytesCompare';\nimport { isStakeableLockOut } from './typeGuards';\n\nexport const compareTransferableOutputs = (\n  output1: TransferableOutput,\n  output2: TransferableOutput,\n): number => {\n  const assetIdRes = Id.compare(output1.assetId, output2.assetId);\n  if (assetIdRes !== 0) {\n    return assetIdRes;\n  }\n\n  const pvmOutputTypes = [isStakeableLockOut];\n  const avmCodec = getAVMManager().getDefaultCodec();\n  const pvmCodec = getPVMManager().getDefaultCodec();\n\n  const codec1 = pvmOutputTypes.some((checker) => checker(output1.output))\n    ? pvmCodec\n    : avmCodec;\n  const codec2 = pvmOutputTypes.some((checker) => checker(output2.output))\n    ? pvmCodec\n    : avmCodec;\n\n  return bytesCompare(output1.toBytes(codec1), output2.toBytes(codec2));\n};\n\nexport const compareEVMOutputs = (a: Output, b: Output) => {\n  if (a.address.value() === b.address.value()) {\n    return bytesCompare(a.assetId.toBytes(), b.assetId.toBytes());\n  }\n  return a.address.value().localeCompare(b.address.value());\n};\n", "import type { Amounter } from '../serializable/common/types';\n\nexport interface TransferableSummable extends Amounter {\n  getAssetId(): string;\n}\n\nexport const transferableAmounts = (transferables: TransferableSummable[]) => {\n  return transferables.reduce((agg, transferable) => {\n    agg[transferable.getAssetId()] = agg[transferable.getAssetId()] ?? 0n;\n    agg[transferable.getAssetId()] += transferable.amount();\n    return agg;\n  }, {} as Record<string, bigint>);\n};\n", "import type { SpendOptions, SpendOptionsRequired } from './models';\n\nexport const defaultSpendOptions = (\n  fromAddress: Uint8Array[],\n  options?: SpendOptions,\n): SpendOptionsRequired => {\n  return {\n    minIssuanceTime: BigInt(Math.floor(new Date().getTime() / 1000)),\n    changeAddresses: fromAddress,\n    threshold: 1,\n    memo: new Uint8Array(),\n    locktime: 0n,\n    ...options,\n  };\n};\n", "import { Id } from '../serializable/fxs/common';\nimport { OutputOwners } from '../serializable/fxs/secp256k1';\nimport {\n  SepkSignatureLength,\n  Signature,\n} from '../serializable/fxs/secp256k1/signature';\nimport { BigIntPr, Int } from '../serializable/primitives';\n\nexport const zeroOutputOwners = new OutputOwners(\n  new BigIntPr(0n),\n  new Int(0),\n  [],\n);\n\nexport const emptyId = new Id(new Uint8Array(32));\nexport const emptySignature = new Signature(\n  new Uint8Array(Array(SepkSignatureLength).fill(0)),\n);\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { emptySignature } from '../../constants/zeroValue';\nimport { SignedTx } from '../../serializable/avax';\nimport { Utxo } from '../../serializable/avax/utxo';\nimport type { VM } from '../../serializable/constants';\nimport { ValidVMs } from '../../serializable/constants';\nimport { Address } from '../../serializable/fxs/common';\nimport { Credential } from '../../serializable/fxs/secp256k1';\nimport { bufferToHex, hexToBuffer } from '../../utils';\nimport { secp256k1 } from '../../crypto';\nimport { AddressMaps } from '../../utils/addressMap';\nimport { getManagerForVM, packTx } from '../../utils/packTx';\nimport type { Transaction } from './transaction';\n\ntype UnsingedTxSerialize = {\n  txBytes: string;\n  utxos: string[];\n  addressMaps: [string, number][][];\n  vm: string;\n  codecId: string;\n  credentials: string[][];\n};\nexport class UnsignedTx {\n  credentials: Credential[];\n  constructor(\n    readonly tx: Transaction,\n    readonly utxos: Utxo[],\n    readonly addressMaps: AddressMaps,\n    credentials?: Credential[],\n  ) {\n    if (credentials) {\n      this.credentials = credentials;\n      return;\n    }\n    this.credentials = this.tx\n      .getSigIndices()\n      .map((indicies) => new Credential(indicies.map(() => emptySignature)));\n  }\n\n  toJSON() {\n    const codec = getManagerForVM(this.tx.vm).getDefaultCodec();\n    const codecId = getManagerForVM(this.tx.vm).getDefaultCodecId();\n    return {\n      codecId: codecId,\n      vm: this.tx.vm,\n      txBytes: bufferToHex(this.toBytes()),\n      utxos: this.utxos.map((utxo) => bufferToHex(utxo.toBytes(codec))),\n      addressMaps: this.addressMaps,\n      credentials: this.credentials,\n    };\n  }\n\n  static fromJSON(jsonString: string) {\n    const res = JSON.parse(jsonString) as UnsingedTxSerialize;\n\n    const fields = [\n      'txBytes',\n      'utxos',\n      'addressMaps',\n      'vm',\n      'codecId',\n      'credentials',\n    ];\n\n    fields.forEach((field) => {\n      if (!res[field]) {\n        throw new Error(\n          `invalid structure. must have ${fields.join(', ')}, missing ${field}`,\n        );\n      }\n    });\n\n    const vm = res.vm as VM;\n    if (!ValidVMs.includes(vm)) {\n      throw new Error('invalid VM');\n    }\n\n    const manager = getManagerForVM(vm);\n    const [codec, rest] = manager.getCodecFromBuffer(hexToBuffer(res.txBytes));\n    const tx = codec.UnpackPrefix<Transaction>(rest)[0];\n\n    const utxos = res.utxos.map(\n      (utxo) => Utxo.fromBytes(hexToBuffer(utxo), codec)[0],\n    );\n\n    const addressMaps = AddressMaps.fromJSON(res.addressMaps);\n\n    const credentials = res.credentials.map((credStr) =>\n      Credential.fromJSON(credStr),\n    );\n    return new UnsignedTx(tx, utxos, addressMaps, credentials);\n  }\n\n  getSigIndices() {\n    return this.tx.getSigIndices();\n  }\n\n  hasAddress(address: Address) {\n    return this.addressMaps.has(address);\n  }\n\n  hasPubkey(pubKey: Uint8Array) {\n    return this.hasAddress(new Address(this.publicKeyBytesToAddress(pubKey)));\n  }\n\n  getAddresses() {\n    return this.addressMaps.getAddresses();\n  }\n\n  getSigIndicesForAddress(address: Address) {\n    const useReorderedIndices = this.getSigIndices().some(\n      (sigIndices, credIndex) => {\n        const signaturesLength = this.credentials[credIndex].toJSON().length;\n        const maxSigIndex = Math.max(...sigIndices);\n\n        return maxSigIndex > signaturesLength - 1;\n      },\n    );\n\n    return this.addressMaps.getSigIndicesForAddress(\n      address,\n      useReorderedIndices,\n    );\n  }\n\n  getSigIndicesForPubKey(pubkey: Uint8Array) {\n    const addrAvax = this.publicKeyBytesToAddress(pubkey);\n    const addrEvm = secp256k1.publicKeyToEthAddress(pubkey);\n\n    // Check against both addresses\n    const coordinatesAvax = this.getSigIndicesForAddress(new Address(addrAvax));\n    const coordinatesEvm = this.getSigIndicesForAddress(new Address(addrEvm));\n\n    return coordinatesAvax || coordinatesEvm;\n  }\n\n  getInputUtxos() {\n    return this.utxos;\n  }\n\n  toBytes(): Uint8Array {\n    return packTx(this.tx);\n  }\n\n  getBlockchainId() {\n    return this.tx.getBlockchainId();\n  }\n\n  getTx() {\n    return this.tx;\n  }\n\n  getSignedTx() {\n    return new SignedTx(this.tx, this.credentials);\n  }\n\n  getCredentials(): Credential[] {\n    return this.credentials as Credential[];\n  }\n\n  addSignatureAt(sig: Uint8Array, index: number, subIndex: number) {\n    if (index >= this.getCredentials().length) {\n      throw new Error('index out of bounds');\n    }\n    this.getCredentials()[index].setSignature(subIndex, sig);\n  }\n\n  addSignature(sig: Uint8Array) {\n    const unsignedHash = sha256(this.toBytes());\n    const publicKey = secp256k1.recoverPublicKey(unsignedHash, sig);\n    this.addSignatureForPubKey(sig, publicKey);\n  }\n\n  private addSignatureForPubKey(sig: Uint8Array, publicKey: Uint8Array) {\n    const coordinates = this.getSigIndicesForPubKey(publicKey);\n    if (coordinates) {\n      coordinates.forEach(([index, subIndex]) => {\n        this.addSignatureAt(sig, index, subIndex);\n      });\n    }\n  }\n\n  protected publicKeyBytesToAddress(pubKey: Uint8Array) {\n    return secp256k1.publicKeyBytesToAddress(pubKey);\n  }\n\n  hasAllSignatures() {\n    const allSigsHex = this.credentials.map((cred) => cred.getSignatures());\n    const emptySignatureHex = emptySignature.toString();\n    const unsignedHash = sha256(this.toBytes());\n\n    const hasNoPlaceholders = allSigsHex.every((cred) => {\n      return cred.every((sig) => {\n        return sig !== emptySignatureHex;\n      });\n    });\n\n    if (!hasNoPlaceholders) return false;\n    let valid = true;\n\n    this.addressMaps.forEach((coordinates) => {\n      coordinates.forEach(([index, subIndex]) => {\n        const sig = allSigsHex[index]?.[subIndex];\n        if (!sig) {\n          throw new Error('error: incorrect structure for credentials');\n        }\n        const sigBytes = hexToBuffer(sig);\n        const publicKey = secp256k1.recoverPublicKey(unsignedHash, sigBytes);\n        if (!this.hasPubkey(publicKey)) {\n          valid = false;\n        }\n      });\n    }, true);\n    return valid;\n  }\n\n  getVM() {\n    return this.tx.getVM();\n  }\n}\n", "import { TransferableInput } from '../../../serializable';\nimport type { Utxo } from '../../../serializable/avax/utxo';\nimport type { Address } from '../../../serializable/fxs/common';\nimport { AddressMaps } from '../../../utils/addressMap';\nimport { compareTransferableOutputs } from '../../../utils/sort';\nimport type { SpendOptionsRequired } from '../../common';\nimport type { UTXOCalculationFn, UTXOCalculationResult } from './models';\n\nexport const defaultSpendResult = (): UTXOCalculationResult => ({\n  inputs: [],\n  inputUTXOs: [],\n  stakeOutputs: [],\n  changeOutputs: [],\n  addressMaps: new AddressMaps(),\n});\n\n/**\n * Make sure that the next state recieves a deep copy so that it cant mutate state. This is great if we need to\n * diagnose where something was changed. We can view state by state by putting logs between state cycles.\n *\n * @param state the state from previous action function\n * @returns UTXOCalculationResult\n */\nfunction deepCopyState(state) {\n  return {\n    ...state,\n    amountsToBurn: new Map([...state.amountsToBurn]),\n    amountsToStake: new Map([...state.amountsToStake]),\n    inputs: [...state.inputs],\n    inputUTXOs: [...state.inputUTXOs],\n    stakeOutputs: [...state.stakeOutputs],\n    changeOutputs: [...state.changeOutputs],\n  };\n}\n/**\n * The idea here is a iterator style UTXO operator function system. Pass in the UTXOs and all of its operating functions. Each\n * function takes into account the state and performs its state changes. The next function is given a copy of the previous\n * and makes it updates. This way there is no mutations between functions but we can see from function to function what changes\n * were made if needed.\n *\n * In the very near future we can break the operator functions into much smaller chunks and have very precise operators instead of one\n * operator that deals with unlocked tokens for burn and stake and inputs all in one\n *\n * @param amountsToBurn\n * @param utxos\n * @param amountsToStake\n * @param fromAddresses\n * @param options\n * @param utxoParsers\n * @returns\n */\nexport function calculateUTXOSpend(\n  amountsToBurn = new Map<string, bigint>(),\n  amountsToStake = new Map<string, bigint>(),\n  utxos: Utxo[],\n  fromAddresses: Address[],\n  options: SpendOptionsRequired,\n  utxoCalculationFns: [UTXOCalculationFn, ...UTXOCalculationFn[]],\n): UTXOCalculationResult {\n  const startState = {\n    amountsToBurn,\n    utxos,\n    amountsToStake,\n    fromAddresses,\n    options,\n    ...defaultSpendResult(),\n  };\n  const result = (\n    [\n      ...utxoCalculationFns,\n      function verifyAmountToBurnIsFulfilled({ amountsToBurn, ...state }) {\n        amountsToBurn.forEach((amount, assetId) => {\n          if (amount !== 0n) {\n            throw new Error(\n              `insufficient funds (Burn Amount): need ${amount} more units of ${assetId} to burn`,\n            );\n          }\n        });\n\n        return { amountsToBurn, ...state };\n      },\n      function verifyAmountToStateIsFulfilled({ amountsToStake, ...state }) {\n        amountsToStake.forEach((amount, assetId) => {\n          if (amount !== 0n) {\n            throw new Error(\n              `insufficient funds (Stake Amount): need ${amount} more units of ${assetId} to stake`,\n            );\n          }\n        });\n\n        return { amountsToStake, ...state };\n      },\n      function sortTransferableInputs({ inputs, ...state }) {\n        inputs.sort(TransferableInput.compare);\n        return { inputs, ...state };\n      },\n      function sortChangeOutputs({ changeOutputs, ...state }) {\n        changeOutputs.sort(compareTransferableOutputs);\n        return { changeOutputs, ...state };\n      },\n      function sortStakeOutputs({ stakeOutputs, ...state }) {\n        stakeOutputs.sort(compareTransferableOutputs);\n        return { stakeOutputs, ...state };\n      },\n      function getAdressMaps({ inputs, inputUTXOs, ...state }) {\n        const addressMaps = AddressMaps.fromTransferableInputs(\n          inputs,\n          inputUTXOs,\n          options.minIssuanceTime,\n          fromAddresses.map((add) => add.toBytes()),\n        );\n        return { inputs, inputUTXOs, ...state, addressMaps };\n      },\n    ] as UTXOCalculationFn[]\n  ).reduce((state, next) => {\n    // to prevent mutation we deep copy the arrays and maps before passing off to\n    // the next operator\n    return next(deepCopyState(state));\n  }, startState);\n  const {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    amountsToBurn: _amountsToBurn,\n    amountsToStake: _amountsToStake,\n    fromAddresses: _fromAddresses,\n    options: _options,\n    utxos: _utxos,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...calculationResults\n  } = result;\n  return calculationResults;\n}\n", "export const bigIntMin = (...args: bigint[]): bigint =>\n  args.reduce((m, e) => (e < m ? e : m));\n", "import type { MatchOwnerResult } from '../../../../utils/matchOwners';\nimport { matchOwners } from '../../../../utils/matchOwners';\nimport type { TransferOutput } from '../../../../serializable';\n\nexport type verifySigMatchItem<T> = Required<{\n  sigData: MatchOwnerResult;\n  data: T;\n}>;\n\nexport const NoSigMatchError = new Error('No addresses match UTXO owners');\n\n/**\n * The idea here is to verify that a given set of utxos contains any utxos that share addresses\n * with the fromAddresses array. If not we should be throwing an error as the tx is being formulated\n * incoreectly\n *\n * @param set the utxo or data set, this can change depening on the calcFn\n * @param getTransferOutput a callback that takes a utxo and gets the output\n * @param fromAddresses the addresses the utxos should belong to\n * @param options\n * @returns T[]\n */\nexport function verifySignaturesMatch<T>(\n  set: T[],\n  getTransferOutput: (utxo: T) => TransferOutput,\n  fromAddresses,\n  options,\n): verifySigMatchItem<T>[] {\n  const outs = set.reduce((acc, data) => {\n    const out = getTransferOutput(data);\n\n    const sigData = matchOwners(\n      out.outputOwners,\n      fromAddresses,\n      options.minIssuanceTime,\n    );\n\n    return sigData ? [...acc, { sigData, data }] : acc;\n  }, [] as verifySigMatchItem<T>[]);\n\n  if (set.length && !outs.length) throw NoSigMatchError;\n\n  return outs;\n}\n", "import type { UTXOCalculationState } from '../../utils/calculateSpend';\nimport {\n  TransferableInput,\n  TransferableOutput,\n} from '../../../serializable/avax';\nimport {\n  OutputOwners,\n  TransferOutput,\n} from '../../../serializable/fxs/secp256k1';\nimport { BigIntPr, Int } from '../../../serializable/primitives';\nimport { addressesFromBytes, isTransferOut } from '../../../utils';\nimport { bigIntMin } from '../../../utils/bigintMath';\nimport { verifySignaturesMatch } from '../../../vms/utils/calculateSpend/utils';\n\n// UTXO Spend for coreth/AVM UTXOs\nexport const useAvmAndCorethUTXOs = ({\n  amountsToBurn,\n  utxos,\n  options,\n  changeOutputs,\n  inputUTXOs,\n  fromAddresses,\n  inputs,\n  ...state\n}: UTXOCalculationState): UTXOCalculationState => {\n  const changeOwner = new OutputOwners(\n    new BigIntPr(0n),\n    new Int(options.threshold),\n    addressesFromBytes(options.changeAddresses),\n  );\n  verifySignaturesMatch(\n    utxos\n      .filter((utxo) => !!amountsToBurn.get(utxo.assetId.toString()))\n      // We only support burning [secp256k1fx.TransferOutput]s.\n      .filter((utxo) => !!isTransferOut(utxo.output as TransferOutput)),\n    (utxo) => utxo.output as TransferOutput,\n    fromAddresses,\n    options,\n  ).forEach(({ sigData, data: utxo }) => {\n    const utxoTransferout = utxo.output as TransferOutput;\n\n    const remainingAmountToBurn =\n      amountsToBurn.get(utxo.assetId.toString()) ?? 0n;\n\n    const amountToBurn = bigIntMin(\n      remainingAmountToBurn,\n      utxoTransferout.amt.value(),\n    );\n    // if nothing left to burn then lets skip the rest\n    if (!amountToBurn) return;\n\n    amountsToBurn.set(\n      utxo.assetId.toString(),\n      remainingAmountToBurn - amountToBurn,\n    );\n\n    inputs.push(\n      TransferableInput.fromUtxoAndSigindicies(utxo, sigData.sigIndicies),\n    );\n\n    inputUTXOs.push(utxo);\n\n    const remainingAmount = utxoTransferout.amt.value() - amountToBurn;\n\n    if (remainingAmount > 0) {\n      changeOutputs.push(\n        new TransferableOutput(\n          utxo.assetId,\n          new TransferOutput(new BigIntPr(remainingAmount), changeOwner),\n        ),\n      );\n    }\n  });\n\n  return {\n    utxos,\n    fromAddresses,\n    options,\n    ...state,\n    amountsToBurn,\n    inputs,\n    changeOutputs,\n    inputUTXOs,\n  };\n};\n", "import type { TransferableInput, TransferableOutput } from '../../serializable';\nimport type { Context } from '../context/model';\nimport { BaseTx as AvaxBaseTx } from '../../serializable/avax';\n\n/**\n * format a BaseTx for xChain directly from inputs with no validation\n * @param changeOutputs - the output representing the remaining amounts from each input\n * @param inputs - the inputs of the tx\n * @param memo - optional memo\n */\nexport const baseTxUnsafeAvm = (\n  context: Context,\n  changeOutputs: TransferableOutput[],\n  inputs: TransferableInput[],\n  memo: Uint8Array,\n) => {\n  return AvaxBaseTx.fromNative(\n    context.networkID,\n    context.xBlockchainID,\n    changeOutputs,\n    inputs,\n    memo,\n  );\n};\n\n/**\n * format a BaseTx for pChain directly from inputs with no validation\n * @param changeOutputs - the output representing the remaining amounts from each input\n * @param inputs - the inputs of the tx\n * @param memo - optional memo\n */\nexport const baseTxUnsafePvm = (\n  context: Context,\n  changeOutputs: TransferableOutput[],\n  inputs: TransferableInput[],\n  memo: Uint8Array,\n) => {\n  return AvaxBaseTx.fromNative(\n    context.networkID,\n    context.pBlockchainID,\n    changeOutputs,\n    inputs,\n    memo,\n  );\n};\n", "import {\n  BaseTx as AvaxBaseTx,\n  TransferableInput,\n  TransferableOutput,\n} from '../../serializable/avax';\nimport type { Utxo } from '../../serializable/avax/utxo';\nimport { ExportTx, ImportTx } from '../../serializable/avm';\nimport { Id } from '../../serializable/fxs/common';\nimport { addressesFromBytes } from '../../utils';\nimport { AddressMaps } from '../../utils/addressMap';\nimport { getImportedInputsFromUtxos } from '../../utils/builderUtils';\nimport { compareTransferableOutputs } from '../../utils/sort';\nimport { transferableAmounts } from '../../utils/transferableAmounts';\nimport { defaultSpendOptions } from '../common/defaultSpendOptions';\nimport type { SpendOptions } from '../common/models';\nimport { UnsignedTx } from '../common/unsignedTx';\nimport type { Context } from '../context/model';\nimport { BaseTx } from '../../serializable/avm/baseTx';\nimport type { UTXOCalculationResult } from '../utils/calculateSpend';\nimport { calculateUTXOSpend } from '../utils/calculateSpend';\nimport { useAvmAndCorethUTXOs } from './utxoCalculationFns';\nimport { baseTxUnsafeAvm } from '../common';\n\n/**\n *\n * @param sourceChainId id of the chain to import from\n * @param utxos list of utxos\n * @param toAddresses addresses to import the tx\n * @param fromAddressesBytes used to filter UTXOs\n * @param options used to filter UTXOs\n * @param threshold number of signers to put on the resulting utxo\n * @param locktime time the resulting utxo unlocks\n * @returns\n */\nexport function newImportTx(\n  context: Context,\n  sourceChainId: string,\n  utxos: Utxo[],\n  toAddresses: Uint8Array[],\n  fromAddressesBytes: Uint8Array[],\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n) {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const { importedAmounts, importedInputs, inputUTXOs } =\n    getImportedInputsFromUtxos(\n      utxos,\n      fromAddressesBytes,\n      defaultedOptions.minIssuanceTime,\n    );\n\n  if (!importedInputs.length) {\n    throw new Error('no UTXOs available to import');\n  }\n\n  importedInputs.sort(TransferableInput.compare);\n  const addressMaps = AddressMaps.fromTransferableInputs(\n    importedInputs,\n    utxos,\n    defaultedOptions.minIssuanceTime,\n    fromAddressesBytes,\n  );\n  const importedAvax = importedAmounts[context.avaxAssetID] ?? 0n;\n\n  let inputOutputs: UTXOCalculationResult = {\n    inputs: [],\n    inputUTXOs: [],\n    stakeOutputs: [],\n    changeOutputs: [],\n    addressMaps: new AddressMaps(),\n  };\n\n  const txFee = context.baseTxFee;\n  const avaxAssetID = context.avaxAssetID;\n\n  if (importedAvax > txFee) {\n    importedAmounts[avaxAssetID] -= txFee;\n  } else {\n    if (importedAvax < txFee) {\n      const toBurn = new Map<string, bigint>([\n        [avaxAssetID, txFee - importedAvax],\n      ]);\n\n      inputOutputs = calculateUTXOSpend(\n        toBurn,\n        undefined,\n        utxos,\n        fromAddresses,\n        defaultedOptions,\n        [useAvmAndCorethUTXOs],\n      );\n    }\n    delete importedAmounts[avaxAssetID];\n  }\n\n  inputUTXOs.push(...(inputOutputs.inputUTXOs || []));\n  addressMaps.merge(inputOutputs.addressMaps || new AddressMaps());\n\n  Object.entries(importedAmounts).forEach(([assetID, amount]) => {\n    inputOutputs.changeOutputs.push(\n      TransferableOutput.fromNative(\n        assetID,\n        amount,\n        toAddresses,\n        locktime,\n        threshold,\n      ),\n    );\n  });\n\n  return new UnsignedTx(\n    new ImportTx(\n      AvaxBaseTx.fromNative(\n        context.networkID,\n        context.xBlockchainID,\n        inputOutputs.changeOutputs || [],\n        inputOutputs.inputs || [],\n        defaultedOptions.memo,\n      ),\n      Id.fromString(sourceChainId),\n      importedInputs,\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\n/**\n * Format export Tx given a set of utxos. The priority is determined by the order of the utxo\n * array. Fee is automatically added\n * @param destinationChain - id of the destination chain\n * @param fromAddresses - used for selecting which utxos are signable\n * @param utxoSet - list of utxos to spend from\n * @param outputs - the final desired output\n * @param options - see SpendingOptions\n */\nexport function newExportTx(\n  context: Context,\n  destinationChain: string,\n  fromAddressesBytes: Uint8Array[],\n  utxoSet: Utxo[],\n  outputs: TransferableOutput[],\n  options?: SpendOptions,\n) {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const toBurn = new Map<string, bigint>([\n    [context.avaxAssetID, context.baseTxFee],\n  ]);\n\n  outputs.forEach((out) => {\n    const assetId = out.assetId.value();\n    toBurn.set(assetId, (toBurn.get(assetId) || 0n) + out.output.amount());\n  });\n\n  const { inputs, changeOutputs, inputUTXOs, addressMaps } = calculateUTXOSpend(\n    toBurn,\n    undefined,\n    utxoSet,\n    fromAddresses,\n    defaultedOptions,\n    [useAvmAndCorethUTXOs],\n  );\n  outputs.sort(compareTransferableOutputs);\n  return exportTxUnsafe(\n    context,\n    outputs,\n    changeOutputs,\n    inputs,\n    destinationChain,\n    defaultedOptions.memo,\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\n/**\n * Format base Tx given a set of utxos. The priority is determined by the order of the utxo\n * array. Fee is automatically added\n * @param fromAddresses - used for selecting which utxos are signable\n * @param utxoSet - list of utxos to spend from\n * @param outputs - the desired output (change outputs will be added to them automatically)\n * @param options - see SpendingOptions\n */\nexport function newBaseTx(\n  context: Context,\n  fromAddressesBytes: Uint8Array[],\n  utxoSet: Utxo[],\n  outputs: TransferableOutput[],\n  options?: SpendOptions,\n) {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const toBurn = new Map<string, bigint>([\n    [context.avaxAssetID, context.baseTxFee],\n  ]);\n\n  outputs.forEach((out) => {\n    const assetId = out.assetId.value();\n    toBurn.set(assetId, (toBurn.get(assetId) || 0n) + out.output.amount());\n  });\n\n  const { inputs, inputUTXOs, changeOutputs, addressMaps } = calculateUTXOSpend(\n    toBurn,\n    undefined,\n    utxoSet,\n    fromAddresses,\n    defaultedOptions,\n    [useAvmAndCorethUTXOs],\n  );\n\n  const allOutputs = [...outputs, ...changeOutputs];\n  allOutputs.sort(compareTransferableOutputs);\n\n  return new UnsignedTx(\n    new BaseTx(\n      baseTxUnsafeAvm(context, allOutputs, inputs, defaultedOptions.memo),\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\n/**\n * Format export Tx based on inputs directly. extra inputs amounts are burned\n * @param outputs - the total output for the tx\n * @param changeOutputs - the output representing the remaining amounts from each input\n * @param inputs - the inputs of the tx\n * @param destinationChain - id of the destination chain\n * @param memo - optional memo\n */\nconst exportTxUnsafe = (\n  context: Context,\n  outputs: TransferableOutput[],\n  changeOutputs: TransferableOutput[],\n  inputs: TransferableInput[],\n  destinationChain: string,\n  memo: Uint8Array,\n  inputUtxos: Utxo[],\n  sigMappings: AddressMaps,\n) => {\n  outputs.sort(compareTransferableOutputs);\n\n  const outputAmts = transferableAmounts([...outputs, ...changeOutputs]);\n\n  const inputAmts = transferableAmounts(inputs);\n\n  // check outputs and change outputs are all covered by inputs given\n  // extra inputs are burned and is allowed\n  const allOutputsCovered = Object.entries(outputAmts).every(\n    ([assetID, amount]) => inputAmts[assetID] && inputAmts[assetID] >= amount,\n  );\n\n  if (!allOutputsCovered) {\n    throw new Error('Not enough inputs to cover the outputs');\n  }\n\n  return new UnsignedTx(\n    new ExportTx(\n      baseTxUnsafeAvm(context, changeOutputs, inputs, memo),\n      Id.fromString(destinationChain),\n      outputs,\n    ),\n    inputUtxos,\n    sigMappings,\n  );\n};\n", "import { secp256k1 } from '../../crypto';\nimport { UnsignedTx } from './unsignedTx';\nimport { Address } from '../../serializable/fxs/common';\n\nexport class EVMUnsignedTx extends UnsignedTx {\n  hasPubkey(pubKey: Uint8Array): boolean {\n    const addrAvax = new Address(this.publicKeyBytesToAddress(pubKey));\n    const addrEVM = new Address(secp256k1.publicKeyToEthAddress(pubKey));\n\n    return this.hasAddress(addrAvax) || this.hasAddress(addrEVM);\n  }\n\n  static fromJSON(jsonStr: string) {\n    const tx = UnsignedTx.fromJSON(jsonStr);\n    return new EVMUnsignedTx(tx.tx, tx.utxos, tx.addressMaps, tx.credentials);\n  }\n}\n", "import { AVAX_PUBLIC_URL } from '../constants/public-urls';\nimport { Api } from '../vms/common/baseApi';\nimport type {\n  GetBlockchainIDResponse,\n  GetNetworkIdResponse,\n  GetNetworkNameResponse,\n  GetNodeIdResponse,\n  GetNodeIpResponse,\n  GetNodeVersionReply,\n  GetPeersResponse,\n  GetTxFeeResponse,\n  isBootstrapped,\n  UptimeResponse,\n} from './model';\n\nexport class Info extends Api {\n  constructor(private readonly baseURL: string = AVAX_PUBLIC_URL) {\n    super(baseURL, '/ext/info', 'info');\n  }\n\n  getNodeVersion(): Promise<GetNodeVersionReply> {\n    return this.callRpc<GetNodeVersionReply>('getNodeVersion');\n  }\n\n  async getNodeId(): Promise<GetNodeIdResponse> {\n    return this.callRpc<GetNodeIdResponse>('getNodeID');\n  }\n\n  getNodeIp(): Promise<GetNodeIpResponse> {\n    return this.callRpc<GetNodeIpResponse>('getNodeIP');\n  }\n\n  getNetworkId(): Promise<GetNetworkIdResponse> {\n    return this.callRpc<GetNetworkIdResponse>('getNetworkID');\n  }\n\n  getNetworkName(): Promise<GetNetworkNameResponse> {\n    return this.callRpc<GetNetworkNameResponse>('getNetworkName');\n  }\n\n  getBlockchainId(alias: string): Promise<GetBlockchainIDResponse> {\n    return this.callRpc<GetBlockchainIDResponse>('getBlockchainID', { alias });\n  }\n\n  peers(nodeIDs?: string[]): Promise<GetPeersResponse> {\n    return this.callRpc<GetPeersResponse>('peers', { nodeIDs });\n  }\n\n  isBootstrapped(chain: string): Promise<isBootstrapped> {\n    return this.callRpc<isBootstrapped>('peers', { chain });\n  }\n  /**\n   * @link https://docs.avax.network/apis/avalanchego/apis/info#infogettxfee\n   */\n  async getTxFee(): Promise<GetTxFeeResponse> {\n    const resp = await this.callRpc<GetTxFeeResponse>('getTxFee');\n\n    return {\n      txFee: BigInt(resp.txFee),\n      createAssetTxFee: BigInt(resp.createAssetTxFee),\n      createSubnetTxFee: BigInt(resp.createSubnetTxFee),\n      transformSubnetTxFee: BigInt(resp.transformSubnetTxFee),\n      createBlockchainTxFee: BigInt(resp.createBlockchainTxFee),\n      addPrimaryNetworkValidatorFee: BigInt(resp.addPrimaryNetworkValidatorFee),\n      addPrimaryNetworkDelegatorFee: BigInt(resp.addPrimaryNetworkDelegatorFee),\n      addSubnetValidatorFee: BigInt(resp.addSubnetValidatorFee),\n      addSubnetDelegatorFee: BigInt(resp.addSubnetDelegatorFee),\n    };\n  }\n\n  uptime(): Promise<UptimeResponse> {\n    return this.callRpc<UptimeResponse>('uptime');\n  }\n\n  getVMs(): Promise<Map<string, string[]>> {\n    return this.callRpc<Map<string, string[]>>('getVMs');\n  }\n}\n", "import { getHRP } from '../../constants/networkIDs';\nimport { Info } from '../../info/info';\nimport { AVMApi } from '../avm/api';\nimport type { Context } from './model';\n\n/*\ngrabs some basic info about an avm chain\n*/\nexport const getContextFromURI = async (\n  baseURL?: string,\n  assetDescription = 'AVAX',\n): Promise<Context> => {\n  const xChainApi = new AVMApi(baseURL);\n  const { assetID: avaxAssetID } = await xChainApi.getAssetDescription(\n    assetDescription,\n  );\n  const info = new Info(baseURL);\n  const {\n    txFee: baseTxFee,\n    createAssetTxFee,\n    createSubnetTxFee,\n    transformSubnetTxFee,\n    createBlockchainTxFee,\n    addPrimaryNetworkValidatorFee,\n    addPrimaryNetworkDelegatorFee,\n    addSubnetValidatorFee,\n    addSubnetDelegatorFee,\n  } = await info.getTxFee();\n  const { blockchainID: xBlockchainID } = await info.getBlockchainId('X');\n  const { blockchainID: pBlockchainID } = await info.getBlockchainId('P');\n  const { blockchainID: cBlockchainID } = await info.getBlockchainId('C');\n\n  const { networkID } = await info.getNetworkId();\n\n  return Object.freeze({\n    xBlockchainID,\n    pBlockchainID,\n    cBlockchainID,\n    avaxAssetID,\n    baseTxFee,\n    createAssetTxFee,\n    createSubnetTxFee,\n    transformSubnetTxFee,\n    createBlockchainTxFee,\n    addPrimaryNetworkValidatorFee,\n    addPrimaryNetworkDelegatorFee,\n    addSubnetValidatorFee,\n    addSubnetDelegatorFee,\n    networkID,\n    hrp: getHRP(networkID),\n  });\n};\n", "import { SignedTx } from '../../serializable/avax';\nimport { getEVMManager } from '../../serializable/evm/codec';\nimport { hexToBuffer } from '../../utils';\nimport { Api } from '../common/baseApi';\nimport { ChainApi } from '../common/chainAPI';\nimport type { GetAtomicTxParams, GetAtomicTxStatusResponse } from './model';\nimport type { GetAtomicTxServerResponse } from './privateModels';\n\nexport class EVMApi extends ChainApi {\n  ethAPI: EthereumAPI;\n  constructor(baseURL?: string) {\n    super(baseURL, '/ext/bc/C/avax', 'avax', getEVMManager());\n    this.ethAPI = new EthereumAPI(baseURL);\n  }\n\n  /**\n   * Returns the transaction data of a provided transaction ID by calling the node's `getAtomicTx` method.\n   *\n   * @param txID The string representation of the transaction ID\n   *\n   * @returns Returns a Promise with the signedTX unmarshalled from the bytes\n   */\n\n  getAtomicTx = async (getTxParams: GetAtomicTxParams) => {\n    const resp = await this.callRpc<GetAtomicTxServerResponse>('getAtomicTx', {\n      ...getTxParams,\n      encoding: 'hex',\n    });\n    return this.manager.unpack(hexToBuffer(resp.tx), SignedTx);\n  };\n\n  /**\n   * @returns a Promise string containing the base fee for the next block.\n   */\n  getBaseFee() {\n    return this.ethAPI.getBaseFee();\n  }\n\n  /**\n   * Returns the status of a provided atomic transaction ID by calling the node's `getAtomicTxStatus` method.\n   *\n   * @param txID The string representation of the transaction ID\n   *\n   * @returns Returns a Promise {status: string, blockHeight: string} containing the status retrieved from the node\n   */\n\n  getAtomicTxStatus(txID: string): Promise<GetAtomicTxStatusResponse> {\n    return this.callRpc<GetAtomicTxStatusResponse>('getAtomicTxStatus', {\n      txID,\n    });\n  }\n}\n\nclass EthereumAPI extends Api {\n  constructor(baseURL?: string) {\n    super(baseURL, '/ext/bc/C/rpc');\n  }\n\n  async getBaseFee() {\n    return BigInt(await this.callRpc<string>('eth_baseFee'));\n  }\n}\n", "import { TransferableInput, TransferableOutput } from '../../serializable/avax';\nimport type { Utxo } from '../../serializable/avax/utxo';\nimport { ExportTx, ImportTx, Input, Output } from '../../serializable/evm';\nimport { Address, Id } from '../../serializable/fxs/common';\nimport {\n  OutputOwners,\n  TransferInput,\n  TransferOutput,\n} from '../../serializable/fxs/secp256k1';\nimport { BigIntPr, Int } from '../../serializable/primitives';\nimport { addressesFromBytes } from '../../utils';\nimport { AddressMap, AddressMaps } from '../../utils/addressMap';\nimport { costCorethTx } from '../../utils/costs';\nimport { matchOwners } from '../../utils/matchOwners';\nimport { compareEVMOutputs } from '../../utils/sort';\nimport { EVMUnsignedTx } from '../common/evmUnsignedTx';\nimport type { UnsignedTx } from '../common/unsignedTx';\nimport type { Context } from '../context';\n\nexport type EVMExportOptions = {\n  locktime: bigint;\n  threshold: number;\n};\n\nconst defaultEVMExportOptions = (\n  options?: Partial<EVMExportOptions>,\n): EVMExportOptions => {\n  return {\n    locktime: 0n,\n    threshold: 1,\n    ...options,\n  };\n};\n\n/**\n * similar to new exportTX, except it estimates the price from base fee automatically\n * @param baseFee dynamic fee fetched from evmapi\n * @param amount amount to export\n * @param destinationChain chainID of the destination chain\n * @param fromAddress address that can sign this tx\n * @param toAddresses address on the destination chain\n * @param nonce the number of tx's on the sender's evm address. need to get from EVM directly using a lib like ethers.\n * @param assetId the assetId to export\n * @param options for additional properties of the resulting utxo\n * @returns EVMUnsignedTx\n */\nexport function newExportTxFromBaseFee(\n  context: Context,\n  baseFee: bigint,\n  amount: bigint,\n  destinationChain: string,\n  fromAddress: Uint8Array,\n  toAddresses: Uint8Array[],\n  nonce: bigint,\n  assetId?: string,\n  options?: Partial<EVMExportOptions>,\n) {\n  const fee = estimateExportCost(\n    context,\n    baseFee,\n    amount,\n    destinationChain,\n    fromAddress,\n    toAddresses,\n    nonce,\n    assetId,\n    options,\n  );\n\n  return newExportTx(\n    context,\n    amount,\n    destinationChain,\n    fromAddress,\n    toAddresses,\n    fee,\n    nonce,\n    assetId,\n    options,\n  );\n}\n\n/**\n *\n * estimate the export cost by forming a dummy tx and returning the fee based on the length of the tx\n * @param baseFee dynamic fee fetched from EVMAPI\n * @param amount amount to export in nAVAX\n * @param destinationChain chainID of the destination chain\n * @param fromAddress address that can sign this tx\n * @param toAddresses address on the destination chain\n * @param nonce the number of tx's on the sender's evm address. need to get from EVM directly using a lib like ethers.\n * @param assetId the assetId to export\n * @param options for additional properties of the resulting utxo\n * @returns BigInt\n */\n\nexport function estimateExportCost(\n  context: Context,\n  baseFee: bigint,\n  amount: bigint,\n  destinationChain: string,\n  fromAddress: Uint8Array,\n  toAddresses: Uint8Array[],\n  nonce: bigint,\n  assetId?: string,\n  options?: Partial<EVMExportOptions>,\n) {\n  const dummyTx = newExportTx(\n    context,\n    amount,\n    destinationChain,\n    fromAddress,\n    toAddresses,\n    baseFee,\n    nonce,\n    assetId,\n    options,\n  );\n\n  const importCost = costCorethTx(dummyTx);\n  return baseFee * importCost;\n}\n\n/**\n * returns an export tx\n * @param amount amount to export\n * @param destinationChain chainID of the destination chain\n * @param fromAddress address that can sign this tx\n * @param toAddresses address on the destination chain\n * @param fee dynamic fee fetched from evmapi\n * @param nonce the number of tx's on the sender's evm address. need to get from EVM directly using a lib like ethers.\n * @param assetId the assetId to export\n * @param options for additional properties of the resulting utxo\n * @returns EVMUnsignedTx\n */\n\nexport function newExportTx(\n  context: Context,\n  amount: bigint,\n  destinationChain: string,\n  fromAddress: Uint8Array,\n  toAddresses: Uint8Array[],\n  fee: bigint,\n  nonce: bigint,\n  assetId?: string,\n  options?: Partial<EVMExportOptions>,\n) {\n  assetId = assetId ?? context.avaxAssetID;\n  const { threshold, locktime } = defaultEVMExportOptions(options);\n  const avaxAssetID = context.avaxAssetID;\n  const evmInputConfigs: {\n    amount: bigint;\n    assetId: string;\n  }[] = [];\n\n  const assetIsAvax = avaxAssetID === assetId;\n\n  if (assetIsAvax) {\n    evmInputConfigs.push({\n      assetId: context.avaxAssetID,\n      amount: amount + fee,\n    });\n  } else {\n    // if asset id isn't AVAX asset id then create 2 inputs\n    // first input will be AVAX and will be for the amount of the fee\n    // second input will be the ANT\n    evmInputConfigs.push({\n      amount: fee,\n      assetId: context.avaxAssetID,\n    });\n    evmInputConfigs.push({\n      amount,\n      assetId,\n    });\n  }\n\n  const evmInputs = evmInputConfigs.map(\n    ({ assetId, amount }) =>\n      new Input(\n        new Address(fromAddress),\n        new BigIntPr(amount),\n        Id.fromString(assetId),\n        new BigIntPr(nonce),\n      ),\n  );\n\n  const transferableOutputs = [\n    new TransferableOutput(\n      Id.fromString(assetId),\n      new TransferOutput(\n        new BigIntPr(amount),\n        new OutputOwners(\n          new BigIntPr(locktime),\n          new Int(threshold),\n          addressesFromBytes(toAddresses),\n        ),\n      ),\n    ),\n  ];\n  evmInputs.sort(Input.compare);\n  return new EVMUnsignedTx(\n    new ExportTx(\n      new Int(context.networkID),\n      Id.fromString(context.cBlockchainID),\n      Id.fromString(destinationChain),\n      evmInputs,\n      transferableOutputs,\n    ),\n    [],\n    new AddressMaps([new AddressMap([[new Address(fromAddress), 0]])]),\n  );\n}\n\n/**\n  this method will handle making a dummy tx to calculate fees, and then using that to return the\n  correct tx\n  * @param toAddresses address on C-chain\n  * @param fromAddress address that can sign this tx\n  * @param sourceChain chainID of the source chain\n   * @param baseFee dynamic fee fetched from evmapi\n   * @param feeAssetId the assetId that the fee is measured in. defaults to AVAX\n   * @returns UnsignedTx\n\n\n  basefee is in nAvax\n   */\nexport function newImportTxFromBaseFee(\n  context: Context,\n  toAddress: Uint8Array,\n  fromAddressesBytes: Uint8Array[],\n  atomics: Utxo[],\n  sourceChain: string,\n  baseFee = 0n,\n  feeAssetId?: string,\n) {\n  const fee = estimateImportCost(\n    context,\n    toAddress,\n    fromAddressesBytes,\n    atomics,\n    sourceChain,\n    baseFee,\n    feeAssetId,\n  );\n\n  return newImportTx(\n    context,\n    toAddress,\n    fromAddressesBytes,\n    atomics,\n    sourceChain,\n    fee,\n    feeAssetId,\n  );\n}\n\n/**\n * calculates the fee by forming a dummy tx and calculating based on the length of the tx\n * @param toAddress address to import the utxos\n * @param fromAddressesBytes addresses that are able to sign utxos\n * @param atomics list of available utxos\n * @param sourceChain base58 id of the chain to import from\n * @param baseFee baseFee from EVMAPI.getBaseFee\n * @param feeAssetId base58 ID of the asset to use for fee\n * @returns BigInt\n */\n\nfunction estimateImportCost(\n  context: Context,\n  toAddress: Uint8Array,\n  fromAddressesBytes: Uint8Array[],\n  atomics: Utxo[],\n  sourceChain: string,\n  baseFee = 0n,\n  feeAssetId?: string,\n) {\n  const dummyImportTx = newImportTx(\n    context,\n    toAddress,\n    fromAddressesBytes,\n    atomics,\n    sourceChain,\n    baseFee,\n    feeAssetId,\n  );\n\n  const importCost = costCorethTx(dummyImportTx);\n  return baseFee * importCost;\n}\n\n/**\n *\n * @param toAddress address to import the utxos\n * @param fromAddressesBytes addresses that are able to sign utxos\n * @param atomics list of available utxos\n * @param sourceChain base58 id of the chain to import from\n * @param fee fee to subtract. If unsure, use newImportTxFromBaseFee\n * @param feeAssetId base58 ID of the asset to use for fee\n * @returns UnsignedTx\n */\nexport function newImportTx(\n  context: Context,\n  toAddress: Uint8Array,\n  fromAddressesBytes: Uint8Array[],\n  atomics: Utxo[],\n  sourceChain: string,\n  fee = 0n,\n  feeAssetId = context.avaxAssetID,\n): UnsignedTx {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n\n  const map: Map<string, bigint> = new Map();\n  let ins: TransferableInput[] = [];\n  let outs: Output[] = [];\n  let feepaid = 0n;\n  const inputUtxos: Utxo[] = [];\n\n  // build a set of inputs which covers the fee\n  atomics.forEach((atomic) => {\n    const assetID: string = atomic.getAssetId();\n    const output = atomic.output as TransferOutput;\n    const amount = output.amount();\n    let infeeamount = amount;\n    if (feeAssetId && fee && feepaid < fee && feeAssetId === assetID) {\n      feepaid += infeeamount;\n      if (feepaid > fee) {\n        infeeamount = feepaid - fee;\n        feepaid = fee;\n      } else {\n        infeeamount = 0n;\n      }\n    }\n\n    const sigData = matchOwners(output.outputOwners, fromAddresses, 0n);\n\n    if (!sigData) return;\n\n    const xferin: TransferableInput = new TransferableInput(\n      atomic.utxoId,\n      atomic.assetId,\n      TransferInput.fromNative(amount, sigData.sigIndicies),\n    );\n    ins.push(xferin);\n    inputUtxos.push(atomic);\n    const assetFeeAmount = map.get(assetID);\n    if (assetFeeAmount) {\n      infeeamount += assetFeeAmount;\n    }\n    map.set(assetID, infeeamount);\n  });\n\n  for (const [assetID, amount] of map.entries()) {\n    // Create single EVMOutput for each assetID\n    outs.push(\n      new Output(\n        new Address(toAddress),\n        new BigIntPr(amount),\n        Id.fromString(assetID),\n      ),\n    );\n  }\n\n  // lexicographically sort array\n  ins = ins.sort(TransferableInput.compare);\n  const addressMaps = AddressMaps.fromTransferableInputs(\n    ins,\n    atomics,\n    0n,\n    fromAddressesBytes,\n  );\n  outs = outs.sort(compareEVMOutputs);\n\n  const importTx = new ImportTx(\n    new Int(context.networkID),\n    Id.fromString(context.cBlockchainID),\n    Id.fromString(sourceChain),\n    ins,\n    outs,\n  );\n  return new EVMUnsignedTx(importTx, inputUtxos, addressMaps);\n}\n", "import { verifySignaturesMatch } from '../../../vms/utils/calculateSpend/utils';\nimport {\n  TransferableOutput,\n  TransferOutput,\n  TransferableInput,\n  TransferInput,\n} from '../../../serializable';\nimport { BigIntPr } from '../../../serializable/primitives';\nimport { StakeableLockOut, StakeableLockIn } from '../../../serializable/pvm';\nimport { isStakeableLockOut } from '../../../utils';\nimport { bigIntMin } from '../../../utils/bigintMath';\nimport type { UTXOCalculationState } from '../../utils/calculateSpend';\n\nfunction createTransferableInput(utxo, lockedOutput, out, sigData) {\n  return new TransferableInput(\n    utxo.utxoId,\n    utxo.assetId,\n    new StakeableLockIn(\n      lockedOutput.lockTime,\n      TransferInput.fromNative(out.amount(), sigData.sigIndicies),\n    ),\n  );\n}\n\nfunction createTransferableOutput(utxo, lockedOutput, out, amt) {\n  return new TransferableOutput(\n    utxo.assetId,\n    new StakeableLockOut(\n      lockedOutput.lockTime,\n      new TransferOutput(new BigIntPr(amt), out.outputOwners),\n    ),\n  );\n}\n\nexport function useSpendableLockedUTXOs({\n  amountsToBurn,\n  utxos,\n  fromAddresses,\n  amountsToStake,\n  options,\n  changeOutputs,\n  inputUTXOs,\n  inputs,\n  stakeOutputs,\n  ...state\n}: UTXOCalculationState): UTXOCalculationState {\n  const usableUTXOs = utxos\n    .filter((utxo) => {\n      const out = utxo.output;\n      if (!isStakeableLockOut(out)) {\n        return false;\n      }\n      return options.minIssuanceTime < out.getLocktime();\n    })\n    .map((utxo) => {\n      const assetId = utxo.assetId.value();\n      // If this is 0n then either we are not staking any of this asset or the amount left to stak is zero\n      const remainingAmountToStake = amountsToStake.get(assetId) ?? 0n;\n      const lockedOutput = utxo.output as StakeableLockOut;\n      return { utxo, assetId, remainingAmountToStake, lockedOutput };\n    })\n    .filter(({ remainingAmountToStake }) => {\n      return !!remainingAmountToStake;\n    })\n    .filter(({ lockedOutput }) => {\n      if (!(lockedOutput.transferOut instanceof TransferOutput)) {\n        throw new Error('unknown output type');\n      }\n\n      return options.minIssuanceTime < lockedOutput.lockTime.value();\n    });\n  verifySignaturesMatch(\n    usableUTXOs,\n    ({ lockedOutput }) => {\n      return lockedOutput.transferOut as TransferOutput;\n    },\n    fromAddresses,\n    options,\n  ).forEach(({ sigData, data: { utxo, assetId, lockedOutput } }) => {\n    const out = lockedOutput.transferOut as TransferOutput;\n    const remainingAmountToStake = amountsToStake.get(assetId) ?? 0n;\n\n    // if we have already reached the stake amount then there is nothing left to run beyond here\n    if (!remainingAmountToStake) return;\n\n    inputs.push(createTransferableInput(utxo, lockedOutput, out, sigData));\n\n    inputUTXOs.push(utxo);\n\n    // check if this UTXO value is greater than the amount left to stake\n    const amountToStake = bigIntMin(remainingAmountToStake, out.amt.value());\n\n    stakeOutputs.push(\n      createTransferableOutput(utxo, lockedOutput, out, amountToStake),\n    );\n    // update the remaining stake amount minus this UTXOs value\n    amountsToStake.set(assetId, remainingAmountToStake - amountToStake);\n    const remainingAmount = out.amount() - amountToStake;\n\n    if (remainingAmount > 0n) {\n      changeOutputs.push(\n        createTransferableOutput(utxo, lockedOutput, out, remainingAmount),\n      );\n    }\n  });\n\n  return {\n    ...state,\n    amountsToBurn,\n    utxos,\n    fromAddresses,\n    amountsToStake,\n    options,\n    changeOutputs,\n    inputUTXOs,\n    inputs,\n    stakeOutputs,\n  };\n}\n", "import { verifySignaturesMatch } from '../../../vms/utils/calculateSpend/utils';\nimport {\n  TransferableOutput,\n  TransferOutput,\n  TransferableInput,\n  TransferInput,\n  OutputOwners,\n} from '../../../serializable';\nimport { BigIntPr, Int } from '../../../serializable/primitives';\nimport type { StakeableLockOut } from '../../../serializable/pvm';\nimport {\n  isTransferOut,\n  isStakeableLockOut,\n  addressesFromBytes,\n} from '../../../utils';\nimport { bigIntMin } from '../../../utils/bigintMath';\nimport type { UTXOCalculationState } from '../../utils/calculateSpend';\n\nexport function useUnlockedUTXOs({\n  amountsToBurn,\n  utxos,\n  fromAddresses,\n  amountsToStake,\n  options,\n  changeOutputs,\n  inputUTXOs,\n  inputs,\n  stakeOutputs,\n  ...state\n}: UTXOCalculationState): UTXOCalculationState {\n  const changeOwner = new OutputOwners(\n    new BigIntPr(0n),\n    new Int(1),\n    addressesFromBytes(options.changeAddresses),\n  );\n  const usableUTXOs = utxos.filter((utxo) => {\n    if (isTransferOut(utxo.output)) {\n      return true;\n    }\n    const out = utxo.output;\n    if (!isStakeableLockOut(out) || !isTransferOut(out.transferOut)) {\n      return false;\n    }\n    return out.getLocktime() < options.minIssuanceTime;\n  });\n\n  verifySignaturesMatch(\n    usableUTXOs,\n    (utxo) => {\n      return (\n        isTransferOut(utxo.output)\n          ? utxo.output\n          : (utxo.output as StakeableLockOut).transferOut\n      ) as TransferOutput;\n    },\n    fromAddresses,\n    options,\n  ).forEach(({ sigData, data: utxo }) => {\n    const remainingAmountToBurn = amountsToBurn.get(utxo.assetId.value()) ?? 0n;\n\n    const remainingAmountToStake =\n      amountsToStake.get(utxo.assetId.value()) ?? 0n;\n\n    if (!remainingAmountToBurn && !remainingAmountToStake) {\n      return;\n    }\n\n    const utxoTransferout = (\n      isTransferOut(utxo.output)\n        ? utxo.output\n        : (utxo.output as StakeableLockOut).transferOut\n    ) as TransferOutput;\n\n    inputs.push(\n      new TransferableInput(\n        utxo.utxoId,\n        utxo.assetId,\n        TransferInput.fromNative(utxoTransferout.amount(), sigData.sigIndicies),\n      ),\n    );\n\n    inputUTXOs.push(utxo);\n\n    const amountToBurn = bigIntMin(\n      remainingAmountToBurn,\n      utxoTransferout.amt.value(),\n    );\n\n    amountsToBurn.set(\n      utxo.assetId.value(),\n      remainingAmountToBurn - amountToBurn,\n    );\n\n    const amountAvailableToStake = utxoTransferout.amount() - amountToBurn;\n\n    const amountToStake = bigIntMin(\n      remainingAmountToStake,\n      amountAvailableToStake,\n    );\n\n    amountsToStake.set(\n      utxo.assetId.value(),\n      (amountsToStake.get(utxo.assetId.value()) ?? 0n) - amountToStake,\n    );\n\n    if (amountToStake > 0n) {\n      stakeOutputs.push(\n        new TransferableOutput(\n          utxo.assetId,\n          new TransferOutput(new BigIntPr(amountToStake), changeOwner),\n        ),\n      );\n    }\n\n    const remainingAmount = amountAvailableToStake - amountToStake;\n    if (remainingAmount > 0) {\n      changeOutputs.push(\n        new TransferableOutput(\n          utxo.assetId,\n          new TransferOutput(new BigIntPr(remainingAmount), changeOwner),\n        ),\n      );\n    }\n  });\n\n  return {\n    ...state,\n    amountsToBurn,\n    utxos,\n    fromAddresses,\n    amountsToStake,\n    options,\n    changeOutputs,\n    inputUTXOs,\n    inputs,\n    stakeOutputs,\n  };\n}\n", "/**\n * This implementation of `consolidate` `combine`s all elements of `arr`\n * for which `canCombine` returns `true`. It is assumed that all combinations\n * can be determined with an initial scan of `arr`, and that `canCombine` is transitive,\n * meaning if `canCombine(A, B)` and `canCombine(B, C)` then `canCombine(combine(A, B), C)`\n * @param arr - an array of elements\n * @param canCombine - a function which determines if 2 elements can combine\n * @param combine - a function which combines 2 elements\n * @returns an array combined elements\n */\nexport const consolidate = <T>(\n  arr: T[],\n  canCombine: (a: T, b: T) => boolean,\n  combine: (a: T, b: T) => T,\n): T[] => {\n  const consolidated: T[] = [];\n  for (const el of arr) {\n    let combined = false;\n    for (let i = 0; i < consolidated.length; i++) {\n      const existing = consolidated[i];\n      if (canCombine(existing, el)) {\n        consolidated[i] = combine(existing, el);\n        combined = true;\n        break;\n      }\n    }\n    if (!combined) {\n      consolidated.push(el);\n    }\n  }\n  return consolidated;\n};\n", "import { isStakeableLockOut, isTransferOut } from '../../utils';\nimport {\n  TransferableOutput,\n  TransferOutput,\n  BigIntPr,\n  pvmSerial,\n} from '../../serializable';\nimport { consolidate } from '../../utils/consolidate';\n\nconst canCombine = (a: TransferableOutput, b: TransferableOutput) => {\n  return (\n    a.getAssetId() === b.getAssetId() &&\n    ((isStakeableLockOut(a.output) &&\n      isStakeableLockOut(b.output) &&\n      a.output.getStakeableLocktime() === b.output.getStakeableLocktime() &&\n      a.output.getOutputOwners().equals(b.output.getOutputOwners())) ||\n      (isTransferOut(a.output) &&\n        isTransferOut(b.output) &&\n        a.output.outputOwners.equals(b.output.outputOwners)))\n  );\n};\n\nconst combine = (a: TransferableOutput, b: TransferableOutput) => {\n  if (isStakeableLockOut(a.output) && isStakeableLockOut(b.output)) {\n    return new TransferableOutput(\n      a.assetId,\n      new pvmSerial.StakeableLockOut(\n        a.output.lockTime,\n        new TransferOutput(\n          new BigIntPr(a.amount() + b.amount()),\n          a.output.getOutputOwners(),\n        ),\n      ),\n    );\n  } else if (isTransferOut(a.output) && isTransferOut(b.output)) {\n    return new TransferableOutput(\n      a.assetId,\n      new TransferOutput(\n        new BigIntPr(a.amount() + b.amount()),\n        a.output.outputOwners,\n      ),\n    );\n  } else {\n    throw new Error('Calling combine on incompatible TransferableOutputs');\n  }\n};\n\nexport const consolidateOutputs = (\n  outputs: TransferableOutput[],\n): TransferableOutput[] => {\n  return consolidate(outputs, canCombine, combine);\n};\n", "import { consolidateOutputs } from '../../utils/consolidateOutputs';\nimport type { UTXOCalculationState } from '../../utils/calculateSpend';\n\nexport function useConsolidateOutputs({\n  changeOutputs,\n  stakeOutputs,\n  ...state\n}: UTXOCalculationState): UTXOCalculationState {\n  const consolidatedChangeOutputs = consolidateOutputs(changeOutputs);\n  const consolidatedStakeOutputs = consolidateOutputs(stakeOutputs);\n\n  return {\n    ...state,\n    changeOutputs: consolidatedChangeOutputs,\n    stakeOutputs: consolidatedStakeOutputs,\n  };\n}\n", "import { TransferableOutput } from '../../serializable/avax';\nimport { Utxo } from '../../serializable/avax/utxo';\nimport { getPVMManager } from '../../serializable/pvm/codec';\nimport { hexToBuffer } from '../../utils';\nimport type { GetAssetDescriptionResponse } from '../common/apiModels';\nimport { AvaxApi } from '../common/avaxApi';\nimport type {\n  GetBalanceParams,\n  GetBalanceResponse,\n  GetBlockchainsResponse,\n  GetBlockchainStatusResponse,\n  GetCurrentSupplyResponse,\n  GetCurrentValidatorsParams,\n  GetCurrentValidatorsResponse,\n  GetHeightResponse,\n  GetMaxStakeAmountParams,\n  GetMinStakeResponse,\n  GetPendingValidatorsParams,\n  GetPendingValidatorsResponse,\n  GetRewardUTXOsParams,\n  GetRewardUTXOsResponse,\n  GetStakeParams,\n  GetStakeResponse,\n  GetStakingAssetIDParams,\n  GetStakingAssetIDResponse,\n  GetSubnetsParams,\n  GetSubnetsResponse,\n  GetTimestampResponse,\n  GetTotalStakeResponse,\n  GetTxStatusParams,\n  GetTxStatusResponse,\n  GetValidatorsAtParams,\n  GetValidatorsAtResponse,\n  SampleValidatorsParams,\n  SampleValidatorsResponse,\n  ValidatedByParams,\n  ValidatedByResponse,\n  ValidatesParams,\n  ValidatesResponse,\n} from './models';\nimport type {\n  GetRewardUTXOsServerResponse,\n  GetStakeServerResponse,\n} from './privateModels';\n\nexport class PVMApi extends AvaxApi {\n  constructor(baseURL?: string) {\n    super(baseURL, '/ext/bc/P', 'platform', getPVMManager());\n  }\n\n  getAssetDescription(assetID: string): Promise<GetAssetDescriptionResponse> {\n    return this.callRpc<GetAssetDescriptionResponse>('getAssetDescription', {\n      assetID,\n    });\n  }\n\n  getCurrentValidators(\n    getCurrentValidatorsParams?: GetCurrentValidatorsParams,\n  ): Promise<GetCurrentValidatorsResponse> {\n    return this.callRpc<GetCurrentValidatorsResponse>(\n      'getCurrentValidators',\n      getCurrentValidatorsParams,\n    );\n  }\n  getPendingValidators(\n    getPendingValidatorsParams?: GetPendingValidatorsParams,\n  ): Promise<GetPendingValidatorsResponse> {\n    return this.callRpc<GetPendingValidatorsResponse>(\n      'getPendingValidators',\n      getPendingValidatorsParams,\n    );\n  }\n\n  async getRewardUTXOs(\n    getRewardUTXOsParams: GetRewardUTXOsParams,\n  ): Promise<GetRewardUTXOsResponse> {\n    const resp = await this.callRpc<GetRewardUTXOsServerResponse>(\n      'getRewardUTXOs',\n      getRewardUTXOsParams,\n    );\n    return {\n      ...resp,\n      utxos: resp.utxos.map((bytes) =>\n        getPVMManager().unpack(hexToBuffer(bytes), Utxo),\n      ),\n    };\n  }\n\n  async getStake(getStakeParams: GetStakeParams): Promise<GetStakeResponse> {\n    const resp = await this.callRpc<GetStakeServerResponse>(\n      'getStake',\n      getStakeParams,\n    );\n    return {\n      ...resp,\n      stakedOutputs: resp.stakedOutputs.map((bytes) =>\n        getPVMManager().unpack(hexToBuffer(bytes), TransferableOutput),\n      ),\n    };\n  }\n\n  getValidatorsAt(\n    getValidatorsAtParams: GetValidatorsAtParams,\n  ): Promise<GetValidatorsAtResponse> {\n    return this.callRpc<GetValidatorsAtResponse>(\n      'getValidatorsAt',\n      getValidatorsAtParams,\n    );\n  }\n\n  getCurrentSupply(): Promise<GetCurrentSupplyResponse> {\n    return this.callRpc<GetCurrentSupplyResponse>('getCurrentSupply');\n  }\n\n  getMaxStakeAmount(\n    getMaxStakeAmountParams: GetMaxStakeAmountParams,\n  ): Promise<GetMaxStakeAmountParams> {\n    return this.callRpc<GetMaxStakeAmountParams>(\n      'getMaxStakeAmount',\n      getMaxStakeAmountParams,\n    );\n  }\n\n  /**\n   * @link https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetbalance\n   *\n   * @param GetBalanceParams\n   * @returns GetBalanceResponse\n   */\n  async getBalance(\n    GetBalanceParams: GetBalanceParams,\n  ): Promise<GetBalanceResponse> {\n    const resp = await this.callRpc<{\n      balance: string;\n      unlocked: string;\n      lockedStakeable: string;\n      lockedNotStakeable: string;\n      utxoIDs: {\n        txID: string;\n        outputIndex: number;\n      }[];\n    }>('getBalance', GetBalanceParams);\n\n    return {\n      balance: BigInt(resp.balance),\n      unlocked: BigInt(resp.unlocked),\n      lockedStakeable: BigInt(resp.lockedStakeable),\n      lockedNotStakeable: BigInt(resp.lockedNotStakeable),\n      utxoIDs: resp.utxoIDs,\n    };\n  }\n\n  getBlockchains(): Promise<GetBlockchainsResponse> {\n    return this.callRpc<GetBlockchainsResponse>('getBlockchains');\n  }\n\n  getBlockchainStatus(\n    blockchainID: string,\n  ): Promise<GetBlockchainStatusResponse> {\n    return this.callRpc<GetBlockchainStatusResponse>('getBlockchainStatus', {\n      blockchainID,\n    });\n  }\n\n  getHeight(): Promise<GetHeightResponse> {\n    return this.callRpc<GetHeightResponse>('getHeight');\n  }\n\n  getMinStake(): Promise<GetMinStakeResponse> {\n    return this.callRpc<GetMinStakeResponse>('getMinStake');\n  }\n\n  getStakingAssetID(\n    getStakingAssetIDParams: GetStakingAssetIDParams,\n  ): Promise<GetStakingAssetIDResponse> {\n    return this.callRpc<GetStakingAssetIDResponse>(\n      'getStakingAssetID',\n      getStakingAssetIDParams,\n    );\n  }\n\n  getSubnets(getSubnetsParams: GetSubnetsParams): Promise<GetSubnetsResponse> {\n    return this.callRpc<GetSubnetsResponse>('getSubnets', getSubnetsParams);\n  }\n\n  getTimestamp(): Promise<GetTimestampResponse> {\n    return this.callRpc<GetTimestampResponse>('getTimestamp');\n  }\n\n  getTotalStake(subnetID: string): Promise<GetTotalStakeResponse> {\n    return this.callRpc<GetTotalStakeResponse>('getTotalStake', { subnetID });\n  }\n\n  getTxStatus(\n    getTxStatusParams: GetTxStatusParams,\n  ): Promise<GetTxStatusResponse> {\n    return this.callRpc<GetTxStatusResponse>('getTxStatus', getTxStatusParams);\n  }\n\n  sampleValidators(\n    sampleValidatorsParams: SampleValidatorsParams,\n  ): Promise<SampleValidatorsResponse> {\n    return this.callRpc<SampleValidatorsResponse>(\n      'sampleValidators',\n      sampleValidatorsParams,\n    );\n  }\n\n  validatedBy(\n    validatedByParams: ValidatedByParams,\n  ): Promise<ValidatedByResponse> {\n    return this.callRpc<ValidatedByResponse>('validatedBy', validatedByParams);\n  }\n\n  validates(validatesParams: ValidatesParams): Promise<ValidatesResponse> {\n    return this.callRpc<ValidatesResponse>('validates', validatesParams);\n  }\n}\n", "import { PlatformChainID, PrimaryNetworkID } from '../../constants/networkIDs';\nimport {\n  BaseTx as AvaxBaseTx,\n  TransferableInput,\n  TransferableOutput,\n} from '../../serializable/avax';\nimport type { Utxo } from '../../serializable/avax/utxo';\nimport { Id } from '../../serializable/fxs/common';\nimport { Input, OutputOwners } from '../../serializable/fxs/secp256k1';\nimport { BigIntPr, Byte, Stringpr } from '../../serializable/primitives';\nimport { Bytes, Int } from '../../serializable/primitives';\nimport {\n  AddDelegatorTx,\n  AddValidatorTx,\n  BaseTx,\n  CreateChainTx,\n  CreateSubnetTx,\n  ExportTx,\n  ImportTx,\n  Validator,\n  AddSubnetValidatorTx,\n  SubnetValidator,\n  AddPermissionlessValidatorTx,\n  AddPermissionlessDelegatorTx,\n  RemoveSubnetValidatorTx,\n  TransferSubnetOwnershipTx,\n  TransformSubnetTx,\n} from '../../serializable/pvm';\nimport { addressesFromBytes, hexToBuffer } from '../../utils';\nimport { AddressMaps } from '../../utils/addressMap';\nimport { getImportedInputsFromUtxos } from '../../utils/builderUtils';\nimport { compareTransferableOutputs } from '../../utils/sort';\nimport { defaultSpendOptions } from '../common/defaultSpendOptions';\nimport type { SpendOptions } from '../common/models';\nimport { UnsignedTx } from '../common/unsignedTx';\nimport type { Context } from '../context';\nimport { calculateUTXOSpend } from '../utils/calculateSpend';\nimport {\n  useConsolidateOutputs,\n  useSpendableLockedUTXOs,\n  useUnlockedUTXOs,\n} from './utxoCalculationFns';\nimport { NodeId } from '../../serializable/fxs/common/nodeId';\nimport { createSignerOrSignerEmptyFromStrings } from '../../serializable/pvm/signer';\nimport { baseTxUnsafePvm } from '../common';\n\n/*\n  Builder is useful for building transactions that are specific to a chain.\n */\n\n/**\n * @param fromAddresses - used for selecting which utxos are signable\n * @param utxoSet - list of utxos to spend from\n * @param outputs - the desired output (change outputs will be added to them automatically)\n * @param options - see SpendingOptions\n *\n * @returns UnsignedTx containing a BaseTx\n */\nexport function newBaseTx(\n  context: Context,\n  fromAddressesBytes: Uint8Array[],\n  utxoSet: Utxo[],\n  outputs: TransferableOutput[],\n  options?: SpendOptions,\n) {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const toBurn = new Map<string, bigint>([\n    [context.avaxAssetID, context.baseTxFee],\n  ]);\n\n  outputs.forEach((out) => {\n    const assetId = out.assetId.value();\n    toBurn.set(assetId, (toBurn.get(assetId) || 0n) + out.output.amount());\n  });\n\n  const { inputs, inputUTXOs, changeOutputs, addressMaps } = calculateUTXOSpend(\n    toBurn,\n    undefined,\n    utxoSet,\n    fromAddresses,\n    defaultedOptions,\n    [useUnlockedUTXOs, useConsolidateOutputs],\n  );\n\n  const allOutputs = [...outputs, ...changeOutputs];\n  allOutputs.sort(compareTransferableOutputs);\n\n  return new UnsignedTx(\n    new BaseTx(\n      baseTxUnsafePvm(context, allOutputs, inputs, defaultedOptions.memo),\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\n/** \n  @param sourceChainID - base58 of the sourceChain. can pass in from context\n  @param utxos - list of utxos\n  @param toAddress - list of addresses to import into\n  @param fromAddressesBytes - used for utxo selection. provide all addresses that can sign Tx\n  @param options - see SpendOptions\n  @param threshold - the threshold to write on the utxo\n  @param locktime - the locktime to write onto the utxo\n\n  @returns a unsignedTx\n*/\nexport function newImportTx(\n  context: Context,\n  sourceChainId: string,\n  utxos: Utxo[],\n  toAddresses: Uint8Array[],\n  fromAddressesBytes: Uint8Array[],\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n) {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  utxos = utxos.filter(\n    // Currently - only AVAX is allowed to be imported to the P-chain\n    (utxo) => utxo.assetId.toString() === context.avaxAssetID,\n  );\n\n  const { importedAmounts, importedInputs, inputUTXOs } =\n    getImportedInputsFromUtxos(\n      utxos,\n      fromAddressesBytes,\n      defaultedOptions.minIssuanceTime,\n    );\n\n  const importedAvax = importedAmounts[context.avaxAssetID] ?? 0n;\n\n  importedInputs.sort(TransferableInput.compare);\n  const addressMaps = AddressMaps.fromTransferableInputs(\n    importedInputs,\n    utxos,\n    defaultedOptions.minIssuanceTime,\n    fromAddressesBytes,\n  );\n  if (!importedInputs.length) {\n    throw new Error('no UTXOs available to import');\n  }\n  let inputs: TransferableInput[] = [];\n  let changeOutputs: TransferableOutput[] = [];\n\n  if (importedAvax < context.baseTxFee) {\n    const toBurn = new Map<string, bigint>([\n      [context.avaxAssetID, context.baseTxFee - importedAvax],\n    ]);\n\n    const spendRes = calculateUTXOSpend(\n      toBurn,\n      undefined,\n      utxos,\n      fromAddresses,\n      defaultedOptions,\n      [useUnlockedUTXOs],\n    );\n    inputs = spendRes.inputs;\n    changeOutputs = spendRes.changeOutputs;\n  } else if (importedAvax > context.baseTxFee) {\n    changeOutputs.push(\n      TransferableOutput.fromNative(\n        context.avaxAssetID,\n        importedAvax - context.baseTxFee,\n        toAddresses,\n        locktime,\n        threshold,\n      ),\n    );\n  }\n\n  return new UnsignedTx(\n    new ImportTx(\n      new AvaxBaseTx(\n        new Int(context.networkID),\n        PlatformChainID,\n        changeOutputs,\n        inputs,\n        new Bytes(defaultedOptions.memo),\n      ),\n      Id.fromString(sourceChainId),\n      importedInputs,\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\nconst getToBurn = (\n  context: Context,\n  outputs: TransferableOutput[],\n  baseFee: bigint,\n) => {\n  const toBurn = new Map<string, bigint>([[context.avaxAssetID, baseFee]]);\n\n  outputs.forEach((output) => {\n    const assetId = output.assetId.value();\n    toBurn.set(assetId, (toBurn.get(assetId) || 0n) + output.output.amount());\n  });\n  return toBurn;\n};\n\n/**\n * Helper function which creates an unsigned [[AddValidatorTx]]. For more granular control, you may create your own\n * [[UnsignedTx]] manually and import the [[AddValidatorTx]] class directly.\n *\n * @deprecated since {@link https://github.com/avalanche-foundation/ACPs/blob/main/ACPs/62-disable-addvalidatortx-and-adddelegatortx.md|Durango-upgrade}\n *\n * @param utxos A list of UTXOs that the transaction is built on\n * @param fromAddresses An array of addresses as uint8Array who own the staking UTXOs the fees in AVAX\n * @param nodeID The node ID of the validator being added.\n * @param start The Unix time based on p-chain timestamp when the validator starts validating the Primary Network.\n * @param end The Unix time based on p-chain timestamp when the validator stops validating the Primary Network (and staked AVAX is returned).\n * @param weight The amount being delegated in nAVAX\n * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n * @param shares A number for the percentage times 10,000 of reward to be given to the validator when someone delegates to them.\n * @param threshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n * @param locktime Optional. The locktime field created in the resulting reward outputs\n *\n * @returns An unsigned transaction created from the passed in parameters.\n */\nexport function newAddValidatorTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  nodeID: string,\n  start: bigint,\n  end: bigint,\n  weight: bigint,\n  rewardAddresses: Uint8Array[],\n  shares: number,\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n) {\n  const toBurn = new Map<string, bigint>([\n    [context.avaxAssetID, context.addPrimaryNetworkValidatorFee],\n  ]);\n  const toStake = new Map<string, bigint>([[context.avaxAssetID, weight]]);\n\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const { addressMaps, changeOutputs, inputUTXOs, inputs, stakeOutputs } =\n    calculateUTXOSpend(\n      toBurn,\n      toStake,\n      utxos,\n      addressesFromBytes(fromAddressesBytes),\n      defaultedOptions,\n      [useSpendableLockedUTXOs, useUnlockedUTXOs, useConsolidateOutputs],\n    );\n\n  const validatorTx = new AddValidatorTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    Validator.fromNative(nodeID, start, end, weight),\n    stakeOutputs,\n    OutputOwners.fromNative(rewardAddresses, locktime, threshold),\n    new Int(shares),\n  );\n  return new UnsignedTx(validatorTx, inputUTXOs, addressMaps);\n}\n\n/**\n *\n * @param destinationChainID chain to send the UTXOs to\n * @param fromAddressesBytes used for filtering utxos.\n * @param utxos list of utxos to choose from\n * @param outputs list of outputs to create.\n * @param options used for filtering UTXO's\n * @returns unsingedTx containing an exportTx\n */\n\nexport function newExportTx(\n  context: Context,\n  destinationChainID: string,\n  fromAddressesBytes: Uint8Array[],\n  utxos: Utxo[],\n  outputs: TransferableOutput[],\n  options?: SpendOptions,\n) {\n  const fromAddresses = addressesFromBytes(fromAddressesBytes);\n\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const toBurn = getToBurn(context, outputs, context.baseTxFee);\n\n  const { inputs, changeOutputs, addressMaps, inputUTXOs } = calculateUTXOSpend(\n    toBurn,\n    undefined,\n    utxos,\n    fromAddresses,\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  outputs.sort(compareTransferableOutputs);\n  return new UnsignedTx(\n    new ExportTx(\n      new AvaxBaseTx(\n        new Int(context.networkID),\n        PlatformChainID,\n        changeOutputs,\n        inputs,\n        new Bytes(defaultedOptions.memo),\n      ),\n      Id.fromString(destinationChainID),\n      outputs,\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\n/**\n * @deprecated since {@link https://github.com/avalanche-foundation/ACPs/blob/main/ACPs/62-disable-addvalidatortx-and-adddelegatortx.md|Durango-upgrade}\n *\n * @param utxos list of utxos to choose from\n * @param fromAddressesBytes used for filtering utxos\n * @param nodeID id of the node to delegate. starts with \"NodeID-\"\n * @param start The Unix time based on p-chain timestamp when the validator starts validating the Primary Network.\n * @param end The Unix time based on p-chain timestamp when the validator stops validating the Primary Network (and staked AVAX is returned).\n * @param weight The amount being delegated in nAVAX\n * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n * @param options - used for filtering utxos\n * @param threshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n * @param locktime Optional. The locktime field created in the resulting reward outputs\n * @returns UnsingedTx\n */\n\nexport function newAddDelegatorTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  nodeID: string,\n  start: bigint,\n  end: bigint,\n  weight: bigint,\n  rewardAddresses: Uint8Array[],\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n) {\n  const toBurn = new Map<string, bigint>([\n    [context.avaxAssetID, context.addPrimaryNetworkDelegatorFee],\n  ]);\n  const toStake = new Map<string, bigint>([[context.avaxAssetID, weight]]);\n\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const { inputs, addressMaps, changeOutputs, inputUTXOs, stakeOutputs } =\n    calculateUTXOSpend(\n      toBurn,\n      toStake,\n      utxos,\n      addressesFromBytes(fromAddressesBytes),\n      defaultedOptions,\n      [useSpendableLockedUTXOs, useUnlockedUTXOs, useConsolidateOutputs],\n    );\n\n  const addDelegatorTx = new AddDelegatorTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    Validator.fromNative(nodeID, start, end, weight),\n    stakeOutputs,\n    OutputOwners.fromNative(rewardAddresses, locktime, threshold),\n  );\n  return new UnsignedTx(addDelegatorTx, inputUTXOs, addressMaps);\n}\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-create-subnet-tx\n *\n * @param context\n * @param utxos list of utxos to choose from\n * @param fromAddressesBytes used for filtering utxos\n * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n * @param options used for filtering utxos\n * @param threshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n * @param locktime Optional. The locktime field created in the resulting reward outputs\n * @returns UnsingedTx\n */\nexport function newCreateSubnetTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  subnetOwners: Uint8Array[],\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n) {\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  const { inputs, addressMaps, changeOutputs, inputUTXOs } = calculateUTXOSpend(\n    new Map([[context.avaxAssetID, context.createSubnetTxFee]]),\n    undefined,\n    utxos,\n    addressesFromBytes(fromAddressesBytes),\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  const createSubnetTx = new CreateSubnetTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    OutputOwners.fromNative(subnetOwners, locktime, threshold),\n  );\n\n  return new UnsignedTx(createSubnetTx, inputUTXOs, addressMaps);\n}\n\n/**\n * @see https://docs.avax.network/specs/platform-transaction-serialization#unsigned-create-chain-tx\n *\n * @param context\n * @param utxos list of utxos to choose from\n * @param fromAddressesBytes used for filtering utxos\n * @param subnetID ID of the Subnet that validates this blockchain\n * @param chainName A human readable name for the chain; need not be unique\n * @param vmID ID of the VM running on the new chain\n * @param fxIds IDs of the feature extensions running on the new chain\n * @param genesisData json config for the genesis data\n * @param subnetAuth specifies indices of subnet owners\n * @param options used for filtering utxos\n * @returns UnsignedTx\n */\nexport function newCreateBlockchainTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  subnetID: string,\n  chainName: string,\n  vmID: string,\n  fxIds: string[],\n  genesisData: Record<string, unknown>,\n  subnetAuth: number[],\n  options?: SpendOptions,\n) {\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  const { inputs, addressMaps, changeOutputs, inputUTXOs } = calculateUTXOSpend(\n    new Map([[context.avaxAssetID, context.createBlockchainTxFee]]),\n    undefined,\n    utxos,\n    addressesFromBytes(fromAddressesBytes),\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  const createChainTx = new CreateChainTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    Id.fromString(subnetID),\n    new Stringpr(chainName),\n    Id.fromString(vmID),\n    fxIds.map(Id.fromString.bind(Id)),\n    new Bytes(new TextEncoder().encode(JSON.stringify(genesisData))),\n    Input.fromNative(subnetAuth),\n  );\n\n  return new UnsignedTx(createChainTx, inputUTXOs, addressMaps);\n}\n\nexport function newAddSubnetValidatorTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  nodeId: string,\n  start: bigint,\n  end: bigint,\n  weight: bigint,\n  subnetID: string,\n  subnetAuth: number[],\n  options?: SpendOptions,\n) {\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  const { inputs, addressMaps, changeOutputs, inputUTXOs } = calculateUTXOSpend(\n    new Map([[context.avaxAssetID, context.addSubnetValidatorFee]]),\n    undefined,\n    utxos,\n    addressesFromBytes(fromAddressesBytes),\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  const addSubnetValidatorTx = new AddSubnetValidatorTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    SubnetValidator.fromNative(\n      nodeId,\n      start,\n      end,\n      weight,\n      Id.fromString(subnetID),\n    ),\n    Input.fromNative(subnetAuth),\n  );\n\n  return new UnsignedTx(addSubnetValidatorTx, inputUTXOs, addressMaps);\n}\nexport function newRemoveSubnetValidatorTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  nodeId: string,\n  subnetID: string,\n  subnetAuth: number[],\n  options?: SpendOptions,\n) {\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  const { inputs, addressMaps, changeOutputs, inputUTXOs } = calculateUTXOSpend(\n    new Map([[context.avaxAssetID, context.baseTxFee]]),\n    undefined,\n    utxos,\n    addressesFromBytes(fromAddressesBytes),\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  const removeSubnetValidatorTx = new RemoveSubnetValidatorTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    NodeId.fromString(nodeId),\n    Id.fromString(subnetID),\n    Input.fromNative(subnetAuth),\n  );\n\n  return new UnsignedTx(removeSubnetValidatorTx, inputUTXOs, addressMaps);\n}\n\n/**\n * Helper function which creates an unsigned [[newAddPermissionlessValidatorTx]]. For more granular control, you may create your own\n * [[UnsignedTx]] manually and import the [[newAddPermissionlessValidatorTx]] class directly.\n *\n * @param utxos A list of UTXOs that the transaction is built on\n * @param fromAddresses An array of addresses as uint8Array who own the staking UTXOs the fees in AVAX\n * @param nodeID The node ID of the validator being added.\n * @param subnetID ID of the subnet this validator is validating\n * @param start The Unix time based on p-chain timestamp when the validator starts validating the Primary Network.\n * @param end The Unix time based on p-chain timestamp when the validator stops validating the Primary Network (and staked AVAX is returned).\n * @param weight The amount being locked for validation in nAVAX\n * @param rewardAddresses The addresses which will receive the rewards from the delegated stake. Given addresses will share the reward UTXO.\n * @param shares A number for the percentage times 10,000 of reward to be given to the validator when someone delegates to them.\n * @param threshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n * @param locktime Optional. The locktime field created in the resulting reward outputs\n * @param publicKey the BLS public key, If the subnet is the primary network\n * @param signature the BLS signature, If the subnet is the primary network\n * @param stakingAssetId Which asset to stake. Defaults to AVAX.\n *\n * @returns An unsigned transaction created from the passed in parameters.\n */\nexport function newAddPermissionlessValidatorTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  nodeID: string,\n  subnetID: string,\n  start: bigint,\n  end: bigint,\n  weight: bigint,\n  rewardAddresses: Uint8Array[],\n  delegatorRewardsOwner: Uint8Array[],\n  shares: number,\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n  publicKey?: Uint8Array,\n  signature?: Uint8Array,\n  stakingAssetId?: string,\n) {\n  const isPrimaryNetwork = subnetID === PrimaryNetworkID.toString();\n  const fee = isPrimaryNetwork\n    ? context.addPrimaryNetworkValidatorFee\n    : context.addSubnetValidatorFee;\n  const toBurn = new Map<string, bigint>([[context.avaxAssetID, fee]]);\n\n  const assetId = stakingAssetId ?? context.avaxAssetID;\n\n  // Check if we use correct asset if on primary network\n  if (isPrimaryNetwork && assetId !== context.avaxAssetID)\n    throw new Error('Staking asset ID must be AVAX for the primary network.');\n\n  const toStake = new Map<string, bigint>([[assetId, weight]]);\n\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const { addressMaps, changeOutputs, inputUTXOs, inputs, stakeOutputs } =\n    calculateUTXOSpend(\n      toBurn,\n      toStake,\n      utxos,\n      addressesFromBytes(fromAddressesBytes),\n      defaultedOptions,\n      [useSpendableLockedUTXOs, useUnlockedUTXOs, useConsolidateOutputs],\n    );\n\n  const validatorTx = new AddPermissionlessValidatorTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    SubnetValidator.fromNative(\n      nodeID,\n      start,\n      end,\n      weight,\n      Id.fromString(subnetID),\n    ),\n    createSignerOrSignerEmptyFromStrings(publicKey, signature),\n    stakeOutputs,\n    OutputOwners.fromNative(rewardAddresses, locktime, threshold),\n    OutputOwners.fromNative(delegatorRewardsOwner, 0n),\n    new Int(shares),\n  );\n  return new UnsignedTx(validatorTx, inputUTXOs, addressMaps);\n}\n\n/**\n * Helper function which creates an unsigned [[newAddPermissionlessDelegatorTx]]. For more granular control, you may create your own\n * [[UnsignedTx]] manually and import the [[newAddPermissionlessDelegatorTx]] class directly.\n *\n * @param context The context for the network\n * @param utxos A list of UTXOs that the transaction is built on\n * @param fromAddressesBytes An array of addresses as uint8Array who own the staking UTXOs the fees in AVAX\n * @param nodeID The node ID of the validator being delegated to.\n * @param subnetID ID of the subnet being delegated to\n * @param start The Unix time based on p-chain timestamp when the delegation starts.\n * @param end The Unix time based on p-chain timestamp when the delegation stops (and staked AVAX is returned).\n * @param weight The amount being delegated in nAVAX\n * @param rewardAddresses The addresses which will receive the rewards from the delegated stake. Given addresses will share the reward UTXO.\n * @param threshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n * @param locktime Optional. The locktime field created in the resulting reward outputs\n * @param options Optional. Config for the transaction such as change address, threshold and locktime.\n * @param stakingAssetId Optional. Which asset to stake. Defaults to AVAX.\n *\n * @returns An unsigned transaction created from the passed in parameters.\n */\nexport function newAddPermissionlessDelegatorTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  nodeID: string,\n  subnetID: string,\n  start: bigint,\n  end: bigint,\n  weight: bigint,\n  rewardAddresses: Uint8Array[],\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n  stakingAssetId?: string,\n) {\n  const isPrimaryNetwork = subnetID === PrimaryNetworkID.toString();\n  const fee = isPrimaryNetwork\n    ? context.addPrimaryNetworkDelegatorFee\n    : context.addSubnetDelegatorFee;\n\n  const assetId = stakingAssetId ?? context.avaxAssetID;\n\n  // Check if we use correct asset if on primary network\n  if (isPrimaryNetwork && assetId !== context.avaxAssetID)\n    throw new Error('Staking asset ID must be AVAX for the primary network.');\n\n  const toBurn = new Map<string, bigint>([[context.avaxAssetID, fee]]);\n  const toStake = new Map<string, bigint>([[assetId, weight]]);\n\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n  const { addressMaps, changeOutputs, inputUTXOs, inputs, stakeOutputs } =\n    calculateUTXOSpend(\n      toBurn,\n      toStake,\n      utxos,\n      addressesFromBytes(fromAddressesBytes),\n      defaultedOptions,\n      [useSpendableLockedUTXOs, useUnlockedUTXOs, useConsolidateOutputs],\n    );\n\n  const delegatorTx = new AddPermissionlessDelegatorTx(\n    AvaxBaseTx.fromNative(\n      context.networkID,\n      context.pBlockchainID,\n      changeOutputs,\n      inputs,\n      defaultedOptions.memo,\n    ),\n    SubnetValidator.fromNative(\n      nodeID,\n      start,\n      end,\n      weight,\n      Id.fromString(subnetID),\n    ),\n    stakeOutputs,\n    OutputOwners.fromNative(rewardAddresses, locktime, threshold),\n  );\n  return new UnsignedTx(delegatorTx, inputUTXOs, addressMaps);\n}\n\n/**\n * @param context\n * @param utxos list of utxos to choose from\n * @param fromAddressesBytes used for filtering utxos\n * @param subnetID ID of the subnet\n * @param assetID ID of the subnet's staking asset\n * @param initialSupply the amount to initially specify as the current supply\n * @param maximumSupply the amount to specify as the maximum token supply\n * @param minConsumptionRate the rate to allocate funds if the validator's stake duration is 0\n * @param maxConsumptionRate the rate to allocate funds if the validator's stake duration is equal to the minting period\n * @param minValidatorStake the minimum amount of funds required to become a validator\n * @param maxValidatorStake the maximum amount of funds a single validator can be allocated, including delegated funds\n * @param minStakeDuration the minimum number of seconds a staker can stake for\n * @param maxStakeDuration the maximum number of seconds a staker can stake for\n * @param minDelegationFee the minimum percentage a validator must charge a delegator for delegating\n * @param minDelegatorStake the minimum amount of funds required to become a delegator\n * @param maxValidatorWeightFactor the factor which calculates the maximum amount of delegation a validator can receive\n * @param uptimeRequirement the minimum percentage a validator must be online and responsive to receive a reward\n * @param subnetAuth specifies indices of existing subnet owners\n * @param options used for filtering utxos\n * @returns UnsingedTx containing a TransformSubnetTx\n */\nexport function newTransformSubnetTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  subnetID: string,\n  assetID: string,\n  initialSupply: bigint,\n  maximumSupply: bigint,\n  minConsumptionRate: bigint,\n  maxConsumptionRate: bigint,\n  minValidatorStake: bigint,\n  maxValidatorStake: bigint,\n  minStakeDuration: number,\n  maxStakeDuration: number,\n  minDelegationFee: number,\n  minDelegatorStake: number,\n  maxValidatorWeightFactor: number,\n  uptimeRequirement: number,\n  subnetAuth: number[],\n  options?: SpendOptions,\n) {\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  const { inputs, addressMaps, changeOutputs, inputUTXOs } = calculateUTXOSpend(\n    new Map([[context.avaxAssetID, context.transformSubnetTxFee]]),\n    undefined,\n    utxos,\n    addressesFromBytes(fromAddressesBytes),\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  return new UnsignedTx(\n    new TransformSubnetTx(\n      AvaxBaseTx.fromNative(\n        context.networkID,\n        context.pBlockchainID,\n        changeOutputs,\n        inputs,\n        defaultedOptions.memo,\n      ),\n      Id.fromString(subnetID),\n      Id.fromString(assetID),\n      new BigIntPr(initialSupply),\n      new BigIntPr(maximumSupply),\n      new BigIntPr(minConsumptionRate),\n      new BigIntPr(maxConsumptionRate),\n      new BigIntPr(minValidatorStake),\n      new BigIntPr(maxValidatorStake),\n      new Int(minStakeDuration),\n      new Int(maxStakeDuration),\n      new Int(minDelegationFee),\n      new Int(minDelegatorStake),\n      new Byte(hexToBuffer(maxValidatorWeightFactor.toString(16))),\n      new Int(uptimeRequirement),\n      Input.fromNative(subnetAuth),\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n\n/**\n * @param context\n * @param utxos list of utxos to choose from\n * @param fromAddressesBytes used for filtering utxos\n * @param subnetID ID of the subnet\n * @param subnetAuth specifies indices of existing subnet owners\n * @param subnetOwners The new owner addresses\n * @param options used for filtering utxos\n * @param threshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n * @param locktime Optional. The locktime field created in the resulting reward outputs\n * @returns UnsingedTx containing a TransferSubnetOwnershipTx\n */\nexport function newTransferSubnetOwnershipTx(\n  context: Context,\n  utxos: Utxo[],\n  fromAddressesBytes: Uint8Array[],\n  subnetID: string,\n  subnetAuth: number[],\n  subnetOwners: Uint8Array[],\n  options?: SpendOptions,\n  threshold = 1,\n  locktime = 0n,\n) {\n  const defaultedOptions = defaultSpendOptions(fromAddressesBytes, options);\n\n  const { inputs, addressMaps, changeOutputs, inputUTXOs } = calculateUTXOSpend(\n    new Map([[context.avaxAssetID, context.baseTxFee]]),\n    undefined,\n    utxos,\n    addressesFromBytes(fromAddressesBytes),\n    defaultedOptions,\n    [useUnlockedUTXOs],\n  );\n\n  return new UnsignedTx(\n    new TransferSubnetOwnershipTx(\n      AvaxBaseTx.fromNative(\n        context.networkID,\n        context.pBlockchainID,\n        changeOutputs,\n        inputs,\n        defaultedOptions.memo,\n      ),\n      Id.fromString(subnetID),\n      Input.fromNative(subnetAuth),\n      OutputOwners.fromNative(subnetOwners, locktime, threshold),\n    ),\n    inputUTXOs,\n    addressMaps,\n  );\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nexport type RpcCallOptions = {\n  headers?: Record<string, string>\n}\n\ntype JsonRpcSuccessResp<T> = {\n  jsonrpc: string\n  result: T\n  id: number\n  error?: undefined\n}\n\ninterface JsonRpcError {\n  code: number\n  message: string\n  data?: any\n}\n\ntype JsonRpcErrorResp = {\n  jsonrpc: string\n  id: number\n  result?: undefined\n  error: JsonRpcError\n}\n\nexport class JrpcProvider {\n  private reqId = 0\n\n  constructor(private readonly url: string) {}\n\n  async callMethod<T>(\n    method: string,\n    parameters?: Array<Record<string, any>> | Record<string, any>,\n    fetchOptions?: RequestInit\n  ): Promise<T> {\n    const body = {\n      jsonrpc: '2.0',\n      id: this.reqId++,\n      method,\n      params: parameters\n    }\n\n    const resp = await fetch(this.url, {\n      ...fetchOptions,\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        ...fetchOptions?.headers\n      }\n    })\n      .then(async (r) => r.json())\n      .then((data) => data as JsonRpcSuccessResp<T> | JsonRpcErrorResp)\n\n    if (resp.error) throw new Error(resp.error.message)\n\n    return resp.result\n  }\n\n  // TODO: Batch RPC call\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport {\n  COREAPI_PATH,\n  HYPERCHAIN_ENDPOINT,\n  MAINNET_PUBLIC_API_BASE_URL\n} from '../constants/endpoints'\nimport { JrpcProvider } from './rpc'\n\nexport abstract class Api {\n  protected rpcProvider: JrpcProvider\n\n  constructor(\n    baseURL: string = MAINNET_PUBLIC_API_BASE_URL,\n    protected path: string = `${HYPERCHAIN_ENDPOINT}/${COREAPI_PATH}`,\n    protected base?: string,\n    protected fetchOptions?: RequestInit\n  ) {\n    this.rpcProvider = new JrpcProvider(baseURL + path)\n  }\n\n  setFetchOptions(options: RequestInit | undefined) {\n    this.fetchOptions = options\n  }\n\n  protected getMethodName = (methodName: string) => {\n    if (!this.base) {\n      return methodName\n    }\n    return `${this.base}.${methodName}`\n  }\n\n  protected callRpc = <T>(\n    methodName: string,\n    params?: Array<Record<string, any>> | Record<string, any>\n  ): Promise<T> =>\n    this.rpcProvider.callMethod<T>(\n      this.getMethodName(methodName),\n      params,\n      this.fetchOptions\n    )\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nexport const HRP = 'nuklai'\nexport const SYMBOL = 'NAI'\nexport const DECIMALS = 9\n\n// Auth TypeIDs\nexport const ED25519_ID = 0\nexport const SECP256R1_ID = 1\nexport const BLS_ID = 2\n\n// Auth Units\nexport const ED25519_COMPUTE_UNITS = 5\nexport const SECP256R1_COMPUTE_UNITS = 10\nexport const BLS_COMPUTE_UNITS = 10\n\n// Action TypeIDs\nexport const TRANSFER_ID = 0\nexport const CREATEASSET_ID = 1\nexport const MINTASSET_ID = 2\n// Action Units\nexport const TRANSFER_COMPUTE_UNITS = 1\nexport const CREATEASSET_COMPUTE_UNITS = 5\nexport const MINTASSET_COMPUTE_UNITS = 5\n\n// Storage Chunks\nexport const STORAGE_BALANCE_CHUNKS = 1\nexport const STORAGE_ASSET_CHUNKS = 5\nexport const REGISTER_VALIDATOR_STAKE_CHUNKS = 5\nexport const DELEGATE_USER_STAKE_CHUNKS = 3\n\nexport const MAX_SYMBOL_SIZE = 8\nexport const MAX_MEMO_SIZE = 256\nexport const MAX_METADATA_SIZE = 256\nexport const MAX_DECIMALS = 9\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport { createHash } from 'crypto'\nimport { ID_LEN, UINT8_LEN } from '../constants/consts'\n\nconst HashLen = 32 // sha256 hash length in bytes\n\ntype Hash256 = Uint8Array\n\nfunction ComputeHash256Array(buf: Uint8Array): Hash256 {\n  const hash = createHash('sha256')\n  hash.update(buf)\n  return new Uint8Array(hash.digest())\n}\n\nfunction ComputeHash256(buf: Uint8Array): Uint8Array {\n  return ComputeHash256Array(buf)\n}\n\nexport function ToID(bytes: Uint8Array): Uint8Array {\n  return ComputeHash256(bytes)\n}\n\nexport function createActionID(txID: Id, i: number): Id {\n  if (txID.toBytes().length !== ID_LEN) {\n    throw new Error(`txID must be ${ID_LEN} bytes long`)\n  }\n\n  if (i < 0 || i > 255) {\n    throw new Error(`i must be a between 0 and 255`)\n  }\n\n  const actionBytes = new Uint8Array(ID_LEN + UINT8_LEN)\n  actionBytes.set(txID.toBytes(), 0)\n  actionBytes[ID_LEN] = i\n\n  return Id.fromBytes(ToID(actionBytes))[0]\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { TypeSymbols, utils } from '@avalabs/avalanchejs'\nimport { ADDRESS_LEN } from '../constants/consts'\nimport { BLS_ID, ED25519_ID, HRP, SECP256R1_ID } from '../constants/hypervm'\nimport { ToID } from './hashing'\n\nexport class Address {\n  _type = TypeSymbols.Address\n  constructor(private readonly address: Uint8Array) {\n    this.address = address\n  }\n\n  static fromBytes(buf: Uint8Array): [Address, Uint8Array] {\n    return [new Address(buf.slice(0, ADDRESS_LEN)), buf.slice(ADDRESS_LEN)]\n  }\n\n  toJSON(hrp = HRP) {\n    return this.toString(hrp)\n  }\n\n  //decodes from bech32 Addresses\n  static fromString(addr: string): Address {\n    return new Address(utils.parseBech32(addr)[1])\n  }\n\n  static fromHex(hex: string): Address {\n    return new Address(utils.hexToBuffer(hex))\n  }\n\n  toHex(): string {\n    return utils.bufferToHex(this.address)\n  }\n\n  toBytes() {\n    return utils.padLeft(this.address, ADDRESS_LEN)\n  }\n\n  toString(hrp = HRP) {\n    return utils.formatBech32(hrp, this.address)\n  }\n\n  value() {\n    return this.toString()\n  }\n\n  static newAddress(authTypeID: number, publicKeyBytes: Uint8Array): Address {\n    if (![ED25519_ID, SECP256R1_ID, BLS_ID].includes(authTypeID)) {\n      throw new Error('invalid auth type')\n    }\n    const address = new Uint8Array(ADDRESS_LEN)\n    address[0] = authTypeID\n    address.set(ToID(publicKeyBytes), 1)\n    return Address.fromBytes(address)[0]\n  }\n\n  static formatAddress(address: Uint8Array): string {\n    return utils.formatBech32(HRP, address)\n  }\n\n  static parseAddress(address: string): Uint8Array {\n    return utils.parseBech32(address)[1]\n  }\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport { Address } from '../utils/address'\n\nexport const BOOL_LEN = 1\nexport const BYTE_LEN = 1\nexport const SHORT_LEN = 1\nexport const UINT8_LEN = 1\nexport const UINT16_LEN = 2\nexport const INT_LEN = 4\nexport const UINT32_LEN = 4\nexport const UINT64_LEN = 8\nexport const INT64_LEN = 8\nexport const LONG_LEN = 8\nexport const ID_LEN = 32\nexport const ADDRESS_LEN = 33\n\nexport const EMPTY_ID = new Id(new Uint8Array(ID_LEN))\nexport const EMPTY_ADDRESS = new Address(new Uint8Array(ADDRESS_LEN))\n\n// AvalancheGo imposes a limit of 2 MiB on the network, so we limit at\n// 2 MiB - ProposerVM header - Protobuf encoding overhead (we assume this is\n// no more than 50 KiB of overhead but is likely much less)\nexport const NETWORK_SIZE_LIMIT = 2_044_723 // 1.95 MiB\n\nexport const MaxUint8 = 0xff // 255\nexport const MaxUint16 = 0xffff // 65535\nexport const MaxUint8Offset = 7\nexport const MaxUint = Number.MAX_SAFE_INTEGER // 9007199254740991 (Note: JavaScript does not have a direct equivalent for 64-bit unsigned integers)\nexport const MaxInt = Math.floor(MaxUint / 2) // 4503599627370495\nexport const MaxUint64Offset = 63\nexport const MaxUint64 = BigInt('0xFFFFFFFFFFFFFFFF') // 18446744073709551615n\nexport const MillisecondsPerSecond: bigint = BigInt(1000)\nexport const MaxStringLen = 65535 // math.MaxUint16 in Go\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport { EMPTY_ID, MillisecondsPerSecond } from '../constants/consts'\nimport { SYMBOL } from '../constants/hypervm'\n\nexport function parseBalance(\n  amount: string | number,\n  decimals: number\n): bigint {\n  const parsedAmount = typeof amount === 'string' ? parseFloat(amount) : amount\n  return BigInt(Math.floor(parsedAmount * Math.pow(10, decimals)))\n}\n\nexport function formatBalance(\n  parsedAmount: number | bigint,\n  decimals: number\n): number {\n  const factor = Math.pow(10, decimals)\n  const parsedBigInt =\n    typeof parsedAmount === 'bigint' ? parsedAmount : BigInt(parsedAmount)\n  const wholePart = Number(parsedBigInt / BigInt(factor))\n  const fractionalPart = Number(parsedBigInt % BigInt(factor)) / factor\n\n  return wholePart + fractionalPart\n}\n\nexport function getUnixRMilli(now: number, add: number): bigint {\n  let currentTime = now\n  if (currentTime < 0) {\n    currentTime = Date.now()\n  }\n  const t = BigInt(currentTime) + BigInt(add)\n  return t - (t % MillisecondsPerSecond)\n}\n\nexport function bufferEquals(buf1: Uint8Array, buf2: Uint8Array): boolean {\n  if (buf1.length !== buf2.length) return false\n  for (let i = 0; i < buf1.length; i++) {\n    if (buf1[i] !== buf2[i]) return false\n  }\n  return true\n}\n\nexport function toAssetID(asset: string): Id {\n  return asset.toUpperCase() === SYMBOL ? EMPTY_ID : Id.fromString(asset)\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport {\n  ADDRESS_LEN,\n  BYTE_LEN,\n  EMPTY_ADDRESS,\n  EMPTY_ID,\n  ID_LEN,\n  INT_LEN,\n  LONG_LEN,\n  MaxStringLen,\n  SHORT_LEN\n} from '../constants/consts'\nimport { Address } from './address'\nimport { bufferEquals } from './utils'\n\nconst ErrInsufficientLength = new Error(\n  'packer has insufficient length for input'\n)\nconst errNegativeOffset = new Error('negative offset')\nconst errInvalidInput = new Error('input does not match expected format')\nconst errBadBool = new Error('unexpected value when unpacking bool')\nconst errOversized = new Error('size is larger than limit')\nconst errFieldNotPopulated = new Error('field is not populated')\n\nclass Codec {\n  private buffer: Uint8Array\n  private offset: number\n  private maxSize: number\n  private error?: Error\n\n  constructor(bytes?: Uint8Array, maxSize: number = Infinity) {\n    this.buffer = bytes || new Uint8Array()\n    this.offset = 0\n    this.maxSize = maxSize\n  }\n\n  static newWriter(initialBufferSize: number, maxSize: number): Codec {\n    return new Codec(new Uint8Array(initialBufferSize), maxSize)\n  }\n\n  static newReader(bytes: Uint8Array, maxSize: number): Codec {\n    return new Codec(bytes, maxSize)\n  }\n\n  private checkSpace(bytes: number): void {\n    if (this.offset < 0) {\n      this.error = errNegativeOffset\n    } else if (bytes < 0) {\n      this.error = errInvalidInput\n    } else if (this.buffer.length - this.offset < bytes) {\n      this.error = ErrInsufficientLength\n    }\n  }\n\n  private expand(bytes: number): void {\n    const neededSize = bytes + this.offset\n    if (neededSize <= this.buffer.length) {\n      return\n    }\n    if (neededSize > this.maxSize) {\n      this.error = ErrInsufficientLength\n      return\n    }\n    if (neededSize <= this.buffer.byteLength) {\n      const newBuffer = new Uint8Array(this.buffer.byteLength)\n      newBuffer.set(this.buffer)\n      this.buffer = newBuffer.subarray(0, neededSize)\n      return\n    }\n    const newBuffer = new Uint8Array(neededSize)\n    newBuffer.set(this.buffer)\n    this.buffer = newBuffer\n  }\n\n  packByte(value: number): void {\n    this.expand(BYTE_LEN)\n    if (this.error) return\n\n    this.buffer[this.offset] = value\n    this.offset += BYTE_LEN\n  }\n\n  unpackByte(): number {\n    this.checkSpace(BYTE_LEN)\n    if (this.error) return 0\n\n    const value = this.buffer[this.offset]\n    this.offset += BYTE_LEN\n    return value\n  }\n\n  packShort(value: number): void {\n    this.expand(SHORT_LEN)\n    if (this.error) return\n\n    new DataView(this.buffer.buffer).setUint16(this.offset, value, false)\n    this.offset += SHORT_LEN\n  }\n\n  unpackShort(): number {\n    this.checkSpace(SHORT_LEN)\n    if (this.error) return 0\n\n    const value = new DataView(this.buffer.buffer).getUint16(this.offset, false)\n    this.offset += SHORT_LEN\n    return value\n  }\n\n  packInt(value: number): void {\n    this.expand(INT_LEN)\n    if (this.error) return\n\n    new DataView(this.buffer.buffer).setUint32(this.offset, value, false)\n    this.offset += INT_LEN\n  }\n\n  unpackInt(): number {\n    this.checkSpace(INT_LEN)\n    if (this.error) return 0\n\n    const value = new DataView(this.buffer.buffer).getUint32(this.offset, false)\n    this.offset += INT_LEN\n    return value\n  }\n\n  packLong(value: bigint): void {\n    this.expand(LONG_LEN)\n    if (this.error) return\n\n    new DataView(this.buffer.buffer).setBigUint64(this.offset, value, false)\n    this.offset += LONG_LEN\n  }\n\n  unpackLong(): bigint {\n    this.checkSpace(LONG_LEN)\n    if (this.error) return 0n\n\n    const value = new DataView(this.buffer.buffer).getBigUint64(\n      this.offset,\n      false\n    )\n    this.offset += LONG_LEN\n    return value\n  }\n\n  packBool(value: boolean): void {\n    this.packByte(value ? 1 : 0)\n  }\n\n  unpackBool(): boolean {\n    const b = this.unpackByte()\n    if (b === 0) return false\n    if (b === 1) return true\n\n    this.error = errBadBool\n    return false\n  }\n\n  packFixedBytes(bytes: Uint8Array): void {\n    this.expand(bytes.length)\n    if (this.error) return\n\n    this.buffer.set(bytes, this.offset)\n    this.offset += bytes.length\n  }\n\n  unpackFixedBytes(size: number): Uint8Array {\n    this.checkSpace(size)\n    if (this.error) return new Uint8Array()\n\n    const bytes = this.buffer.slice(this.offset, this.offset + size)\n    this.offset += size\n    return bytes\n  }\n\n  packBytes(bytes: Uint8Array): void {\n    this.packInt(bytes.length)\n    this.packFixedBytes(bytes)\n  }\n\n  unpackBytes(): Uint8Array {\n    const size = this.unpackInt()\n    return this.unpackFixedBytes(size)\n  }\n\n  unpackLimitedBytes(limit: number): Uint8Array {\n    const size = this.unpackInt()\n    if (size > limit) {\n      this.error = errOversized\n      return new Uint8Array()\n    }\n    return this.unpackFixedBytes(size)\n  }\n\n  packStr(value: string): void {\n    const strBytes = new TextEncoder().encode(value)\n    if (strBytes.length > MaxStringLen) {\n      this.error = errInvalidInput\n      return\n    }\n    this.packShort(strBytes.length)\n    this.packFixedBytes(strBytes)\n  }\n\n  unpackStr(): string {\n    const length = this.unpackShort()\n    return new TextDecoder().decode(this.unpackFixedBytes(length))\n  }\n\n  unpackLimitedStr(limit: number): string {\n    const length = this.unpackShort()\n    if (length > limit) {\n      this.error = errOversized\n      return ''\n    }\n    return new TextDecoder().decode(this.unpackFixedBytes(length))\n  }\n\n  packID(id: Id): void {\n    this.packFixedBytes(id.toBytes())\n  }\n\n  unpackID(required: boolean): Id {\n    const id = this.unpackFixedBytes(ID_LEN)\n    if (required && bufferEquals(id, EMPTY_ID.toBytes())) {\n      this.addError(new Error('Id field is not populated'))\n    }\n    return Id.fromBytes(id)[0]\n  }\n\n  packUint64(value: bigint): void {\n    this.packLong(value)\n  }\n\n  unpackUint64(required: boolean): bigint {\n    const value = this.unpackLong()\n    if (required && value === 0n) {\n      this.addError(new Error('Uint64 field is not populated'))\n    }\n    return value\n  }\n\n  packInt64(value: bigint): void {\n    this.packLong(value)\n  }\n\n  unpackInt64(required: boolean): bigint {\n    const value = this.unpackLong()\n    if (required && value === 0n) {\n      this.addError(new Error('Int64 field is not populated'))\n    }\n    return value\n  }\n\n  packString(value: string): void {\n    this.packStr(value)\n  }\n\n  unpackString(required: boolean): string {\n    const value = this.unpackStr()\n    if (required && value === '') {\n      this.addError(new Error('String field is not populated'))\n    }\n    return value\n  }\n\n  packAddress(address: Address): void {\n    this.packFixedBytes(address.toBytes())\n  }\n\n  unpackAddress(): Address {\n    const address = this.unpackFixedBytes(ADDRESS_LEN)\n    if (bufferEquals(address, EMPTY_ADDRESS.toBytes())) {\n      this.addError(new Error('Address field is not populated'))\n    }\n    return Address.fromBytes(address)[0]\n  }\n\n  toBytes(): Uint8Array {\n    return this.buffer.slice(0, this.offset)\n  }\n\n  getOffset(): number {\n    return this.offset\n  }\n\n  hasError(): boolean {\n    return this.error !== null\n  }\n\n  getError(): Error | undefined {\n    return this.error\n  }\n\n  addError(err: Error): void {\n    if (!this.error) {\n      this.error = err\n    }\n  }\n\n  empty(): boolean {\n    return this.offset === this.buffer.length\n  }\n}\n\nexport { Codec }\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport {\n  EMPTY_ID,\n  ID_LEN,\n  MillisecondsPerSecond,\n  UINT64_LEN\n} from '../constants/consts'\nimport { Codec } from '../utils/codec'\n\nexport const BaseTxSize = 2 * UINT64_LEN + ID_LEN\n\nexport class BaseTx {\n  timestamp: bigint\n  chainId: Id\n  maxFee: bigint\n\n  constructor(timestamp: bigint, chainId: Id, maxFee: bigint) {\n    this.timestamp = timestamp\n    this.chainId = chainId\n    this.maxFee = maxFee\n  }\n\n  size(): number {\n    return BaseTxSize\n  }\n\n  toBytes(): Uint8Array {\n    const codec = Codec.newWriter(this.size(), this.size())\n    codec.packInt64(this.timestamp)\n    const packedTimestampBytes = codec.toBytes()\n    codec.packID(this.chainId)\n    codec.packUint64(this.maxFee)\n    return codec.toBytes()\n  }\n\n  static fromBytes(bytes: Uint8Array): [BaseTx, Error?] {\n    const codec = Codec.newReader(bytes, bytes.length)\n    const timestamp = codec.unpackInt64(true)\n    if (timestamp % MillisecondsPerSecond !== 0n) {\n      return [\n        new BaseTx(0n, EMPTY_ID, 0n),\n        new Error('Timestamp is misaligned')\n      ]\n    }\n    const chainId = codec.unpackID(true)\n    const maxFee = codec.unpackUint64(true)\n    const baseTx = new BaseTx(timestamp, chainId, maxFee)\n    return [baseTx, codec.getError()]\n  }\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport bigInt from 'big-integer'\nimport { Action } from '../actions/action'\nimport { AuthFactory } from '../auth/auth'\nimport { Genesis } from '../common/models'\nimport { BYTE_LEN, UINT8_LEN } from '../constants/consts'\nimport { STORAGE_BALANCE_CHUNKS } from '../constants/hypervm'\nimport { BaseTxSize } from './baseTx'\n\ntype Dimension = number[]\nconst FeeDimensions: number = 5\n\nfunction mul64(a: number, b: number): bigint {\n  return BigInt(a) * BigInt(b)\n}\n\nfunction add64(a: bigint, b: bigint): bigint {\n  return a + b\n}\n\nexport function mulSum(a: Dimension, b: Dimension): [bigint, Error?] {\n  let val = 0n\n  for (let i = 0; i < FeeDimensions; i++) {\n    try {\n      const v = mul64(a[i], b[i])\n      val = add64(val, v)\n    } catch (err) {\n      return [0n, err as Error]\n    }\n  }\n  return [val]\n}\n\nexport function estimateUnits(\n  genesisInfo: Genesis,\n  actions: Action[],\n  authFactory: AuthFactory\n): Dimension {\n  let bandwidth = BaseTxSize\n  let stateKeysMaxChunks = [] as number[]\n  let computeOp = bigInt(genesisInfo.baseUnits)\n  let readsOp = bigInt(0)\n  let allocatesOp = bigInt(0)\n  let writesOp = bigInt(0)\n\n  // Calculate over action/auth\n  bandwidth += UINT8_LEN\n  actions.forEach((action) => {\n    bandwidth += BYTE_LEN + action.size()\n    const actionStateKeysMaxChunks = action.stateKeysMaxChunks()\n    stateKeysMaxChunks = [...stateKeysMaxChunks, ...actionStateKeysMaxChunks]\n    computeOp = computeOp.add(action.computeUnits())\n  })\n\n  bandwidth += BYTE_LEN + authFactory.bandwidth()\n  const sponsorStateKeyMaxChunks = [STORAGE_BALANCE_CHUNKS]\n  stateKeysMaxChunks = [...stateKeysMaxChunks, ...sponsorStateKeyMaxChunks]\n  computeOp = computeOp.add(authFactory.computeUnits())\n\n  // Estimate compute costs\n  const compute = computeOp.valueOf()\n\n  // Estimate storage costs\n  for (const maxChunks of stateKeysMaxChunks) {\n    // Compute key costs\n    readsOp = readsOp.add(genesisInfo.storageKeyReadUnits)\n    allocatesOp = allocatesOp.add(genesisInfo.storageKeyAllocateUnits)\n    writesOp = writesOp.add(genesisInfo.storageKeyWriteUnits)\n\n    // Compute value costs\n    readsOp = readsOp.add(\n      bigInt(maxChunks).multiply(bigInt(genesisInfo.storageValueReadUnits))\n    )\n    allocatesOp = allocatesOp.add(\n      bigInt(maxChunks).multiply(bigInt(genesisInfo.storageValueAllocateUnits))\n    )\n    writesOp = writesOp.add(\n      bigInt(maxChunks).multiply(bigInt(genesisInfo.storageValueWriteUnits))\n    )\n  }\n\n  const reads = readsOp.valueOf()\n  const allocates = allocatesOp.valueOf()\n  const writes = writesOp.valueOf()\n\n  return [bandwidth, compute, reads, allocates, writes] as Dimension\n}\n", "/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nconst P = 2n ** 255n - 19n; // ed25519 is twisted edwards curve\nconst N = 2n ** 252n + 27742317777372353535851937790883648493n; // curve's (group) order\nconst Gx = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an; // base point x\nconst Gy = 0x6666666666666666666666666666666666666666666666666666666666666658n; // base point y\nconst CURVE = {\n    a: -1n, // where a=-1, d = -(121665/121666) == -(121665 * inv(121666)) mod P\n    d: 37095705934669439343138083508754565189542113879843219016388785533085940283555n,\n    p: P, n: N, h: 8, Gx, Gy // field prime, curve (group) order, cofactor\n};\nconst err = (m = '') => { throw new Error(m); }; // error helper, messes-up stack trace\nconst str = (s) => typeof s === 'string'; // is string\nconst isu8 = (a) => (a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\nconst au8 = (a, l) => // is Uint8Array (of specific length)\n !isu8(a) || (typeof l === 'number' && l > 0 && a.length !== l) ?\n    err('Uint8Array of valid length expected') : a;\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst toU8 = (a, len) => au8(str(a) ? h2b(a) : u8n(au8(a)), len); // norm(hex/u8a) to u8a\nconst mod = (a, b = P) => { let r = a % b; return r >= 0n ? r : b + r; }; // mod division\nconst isPoint = (p) => (p instanceof Point ? p : err('Point expected')); // is xyzt point\nclass Point {\n    constructor(ex, ey, ez, et) {\n        this.ex = ex;\n        this.ey = ey;\n        this.ez = ez;\n        this.et = et;\n    }\n    static fromAffine(p) { return new Point(p.x, p.y, 1n, mod(p.x * p.y)); }\n    static fromHex(hex, zip215 = false) {\n        const { d } = CURVE;\n        hex = toU8(hex, 32);\n        const normed = hex.slice(); // copy the array to not mess it up\n        const lastByte = hex[31];\n        normed[31] = lastByte & ~0x80; // adjust first LE byte = last BE byte\n        const y = b2n_LE(normed); // decode as little-endian, convert to num\n        if (zip215 && !(0n <= y && y < 2n ** 256n))\n            err('bad y coord 1'); // zip215=true  [1..2^256-1]\n        if (!zip215 && !(0n <= y && y < P))\n            err('bad y coord 2'); // zip215=false [1..P-1]\n        const y2 = mod(y * y); // y\u00B2\n        const u = mod(y2 - 1n); // u=y\u00B2-1\n        const v = mod(d * y2 + 1n); // v=dy\u00B2+1\n        let { isValid, value: x } = uvRatio(u, v); // (uv\u00B3)(uv\u2077)^(p-5)/8; square root\n        if (!isValid)\n            err('bad y coordinate 3'); // not square root: bad point\n        const isXOdd = (x & 1n) === 1n; // adjust sign of x coordinate\n        const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n        if (!zip215 && x === 0n && isLastByteOdd)\n            err('bad y coord 3'); // x=0 and x_0 = 1\n        if (isLastByteOdd !== isXOdd)\n            x = mod(-x);\n        return new Point(x, y, 1n, mod(x * y)); // Z=1, T=xy\n    }\n    get x() { return this.toAffine().x; } // .x, .y will call expensive toAffine.\n    get y() { return this.toAffine().y; } // Should be used with care.\n    equals(other) {\n        const { ex: X1, ey: Y1, ez: Z1 } = this;\n        const { ex: X2, ey: Y2, ez: Z2 } = isPoint(other); // isPoint() checks class equality\n        const X1Z2 = mod(X1 * Z2), X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2), Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() { return this.equals(I); }\n    negate() {\n        return new Point(mod(-this.ex), this.ey, this.ez, mod(-this.et));\n    }\n    double() {\n        const { ex: X1, ey: Y1, ez: Z1 } = this; // Cost: 4M + 4S + 1*a + 6add + 1*2\n        const { a } = CURVE; // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this; // Cost: 8M + 1*k + 8add + 1*2.\n        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = isPoint(other); // doesn't check if other on-curve\n        const { a, d } = CURVE; // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n        const A = mod(X1 * X2);\n        const B = mod(Y1 * Y2);\n        const C = mod(T1 * d * T2);\n        const D = mod(Z1 * Z2);\n        const E = mod((X1 + Y1) * (X2 + Y2) - A - B);\n        const F = mod(D - C);\n        const G = mod(D + C);\n        const H = mod(B - a * A);\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    mul(n, safe = true) {\n        if (n === 0n)\n            return safe === true ? err('cannot multiply by 0') : I;\n        if (!(typeof n === 'bigint' && 0n < n && n < N))\n            err('invalid scalar, must be < L');\n        if (!safe && this.is0() || n === 1n)\n            return this; // safe=true bans 0. safe=false allows 0.\n        if (this.equals(G))\n            return wNAF(n).p; // use wNAF precomputes for base points\n        let p = I, f = G; // init result point & fake point\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) { // double-and-add ladder\n            if (n & 1n)\n                p = p.add(d); // if bit is present, add to point\n            else if (safe)\n                f = f.add(d); // if not, add to fake for timing safety\n        }\n        return p;\n    }\n    multiply(scalar) { return this.mul(scalar); } // Aliases for compatibilty\n    clearCofactor() { return this.mul(BigInt(CURVE.h), false); } // multiply by cofactor\n    isSmallOrder() { return this.clearCofactor().is0(); } // check if P is small order\n    isTorsionFree() {\n        let p = this.mul(N / 2n, false).double(); // ensures the point is not \"bad\".\n        if (N % 2n)\n            p = p.add(this); // P^(N+1)             // P*N == (P*(N/2))*2+P\n        return p.is0();\n    }\n    toAffine() {\n        const { ex: x, ey: y, ez: z } = this; // (x, y, z, t) \u220B (x=x/z, y=y/z, t=xy)\n        if (this.equals(I))\n            return { x: 0n, y: 1n }; // fast-path for zero point\n        const iz = invert(z); // z^-1: invert z\n        if (mod(z * iz) !== 1n)\n            err('invalid inverse'); // (z * z^-1) must be 1, otherwise bad math\n        return { x: mod(x * iz), y: mod(y * iz) }; // x = x*z^-1; y = y*z^-1\n    }\n    toRawBytes() {\n        const { x, y } = this.toAffine(); // convert to affine 2d point\n        const b = n2b_32LE(y); // encode number to 32 bytes\n        b[31] |= x & 1n ? 0x80 : 0; // store sign in first LE byte\n        return b;\n    }\n    toHex() { return b2h(this.toRawBytes()); } // encode to hex string\n}\nPoint.BASE = new Point(Gx, Gy, 1n, mod(Gx * Gy)); // Generator / Base point\nPoint.ZERO = new Point(0n, 1n, 1n, 0n); // Identity / Zero point\nconst { BASE: G, ZERO: I } = Point; // Generator, identity points\nconst padh = (num, pad) => num.toString(16).padStart(pad, '0');\nconst b2h = (b) => Array.from(b).map(e => padh(e, 2)).join(''); // bytes to hex\nconst h2b = (hex) => {\n    const l = hex.length; // error if not string,\n    if (!str(hex) || l % 2)\n        err('hex invalid 1'); // or has odd length like 3, 5.\n    const arr = u8n(l / 2); // create result array\n    for (let i = 0; i < arr.length; i++) {\n        const j = i * 2;\n        const h = hex.slice(j, j + 2); // hexByte. slice is faster than substr\n        const b = Number.parseInt(h, 16); // byte, created from string part\n        if (Number.isNaN(b) || b < 0)\n            err('hex invalid 2'); // byte must be valid 0 <= byte < 256\n        arr[i] = b;\n    }\n    return arr;\n};\nconst n2b_32LE = (num) => h2b(padh(num, 32 * 2)).reverse(); // number to bytes LE\nconst b2n_LE = (b) => BigInt('0x' + b2h(u8n(au8(b)).reverse())); // bytes LE to num\nconst concatB = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + au8(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\nconst invert = (num, md = P) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md); // no neg exponent for now\n    let a = mod(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) { // uses euclidean gcd algorithm\n        const q = b / a, r = b % a; // not constant-time\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? mod(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst pow2 = (x, power) => {\n    let r = x;\n    while (power-- > 0n) {\n        r *= r;\n        r %= P;\n    }\n    return r;\n};\nconst pow_2_252_3 = (x) => {\n    const x2 = (x * x) % P; // x^2,       bits 1\n    const b2 = (x2 * x) % P; // x^3,       bits 11\n    const b4 = (pow2(b2, 2n) * b2) % P; // x^(2^4-1), bits 1111\n    const b5 = (pow2(b4, 1n) * x) % P; // x^(2^5-1), bits 11111\n    const b10 = (pow2(b5, 5n) * b5) % P; // x^(2^10)\n    const b20 = (pow2(b10, 10n) * b10) % P; // x^(2^20)\n    const b40 = (pow2(b20, 20n) * b20) % P; // x^(2^40)\n    const b80 = (pow2(b40, 40n) * b40) % P; // x^(2^80)\n    const b160 = (pow2(b80, 80n) * b80) % P; // x^(2^160)\n    const b240 = (pow2(b160, 80n) * b80) % P; // x^(2^240)\n    const b250 = (pow2(b240, 10n) * b10) % P; // x^(2^250)\n    const pow_p_5_8 = (pow2(b250, 2n) * x) % P; // < To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n};\nconst RM1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n; // \u221A-1\nconst uvRatio = (u, v) => {\n    const v3 = mod(v * v * v); // v\u00B3\n    const v7 = mod(v3 * v3 * v); // v\u2077\n    const pow = pow_2_252_3(u * v7).pow_p_5_8; // (uv\u2077)^(p-5)/8\n    let x = mod(u * v3 * pow); // (uv\u00B3)(uv\u2077)^(p-5)/8\n    const vx2 = mod(v * x * x); // vx\u00B2\n    const root1 = x; // First root candidate\n    const root2 = mod(x * RM1); // Second root candidate; RM1 is \u221A-1\n    const useRoot1 = vx2 === u; // If vx\u00B2 = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u); // If vx\u00B2 = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * RM1); // There is no valid root, vx\u00B2 = -u\u221A-1\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if ((mod(x) & 1n) === 1n)\n        x = mod(-x); // edIsNegative\n    return { isValid: useRoot1 || useRoot2, value: x };\n};\nconst modL_LE = (hash) => mod(b2n_LE(hash), N); // modulo L; but little-endian\nlet _shaS;\nconst sha512a = (...m) => etc.sha512Async(...m); // Async SHA512\nconst sha512s = (...m) => // Sync SHA512, not set by default\n typeof _shaS === 'function' ? _shaS(...m) : err('etc.sha512Sync not set');\nconst hash2extK = (hashed) => {\n    const head = hashed.slice(0, 32); // slice creates a copy, unlike subarray\n    head[0] &= 248; // Clamp bits: 0b1111_1000,\n    head[31] &= 127; // 0b0111_1111,\n    head[31] |= 64; // 0b0100_0000\n    const prefix = hashed.slice(32, 64); // private key \"prefix\"\n    const scalar = modL_LE(head); // modular division over curve order\n    const point = G.mul(scalar); // public key point\n    const pointBytes = point.toRawBytes(); // point serialized to Uint8Array\n    return { head, prefix, scalar, point, pointBytes };\n};\n// RFC8032 5.1.5; getPublicKey async, sync. Hash priv key and extract point.\nconst getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, 32)).then(hash2extK);\nconst getExtendedPublicKey = (priv) => hash2extK(sha512s(toU8(priv, 32)));\nconst getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then(p => p.pointBytes);\nconst getPublicKey = (priv) => getExtendedPublicKey(priv).pointBytes;\nfunction hashFinish(asynchronous, res) {\n    if (asynchronous)\n        return sha512a(res.hashable).then(res.finish);\n    return res.finish(sha512s(res.hashable));\n}\nconst _sign = (e, rBytes, msg) => {\n    const { pointBytes: P, scalar: s } = e;\n    const r = modL_LE(rBytes); // r was created outside, reduce it modulo L\n    const R = G.mul(r).toRawBytes(); // R = [r]B\n    const hashable = concatB(R, P, msg); // dom2(F, C) || R || A || PH(M)\n    const finish = (hashed) => {\n        const S = mod(r + modL_LE(hashed) * s, N); // S = (r + k * s) mod L; 0 <= s < l\n        return au8(concatB(R, n2b_32LE(S)), 64); // 64-byte sig: 32b R.x + 32b LE(S)\n    };\n    return { hashable, finish };\n};\nconst signAsync = async (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key async\n    const e = await getExtendedPublicKeyAsync(privKey); // pub,prfx\n    const rBytes = await sha512a(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(true, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst sign = (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key sync\n    const e = getExtendedPublicKey(privKey); // pub,prfx\n    const rBytes = sha512s(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(false, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst dvo = { zip215: true };\nconst _verify = (sig, msg, pub, opts = dvo) => {\n    msg = toU8(msg); // Message hex str/Bytes\n    sig = toU8(sig, 64); // Signature hex str/Bytes, must be 64 bytes\n    const { zip215 } = opts; // switch between zip215 and rfc8032 verif\n    let A, R, s, SB, hashable = new Uint8Array();\n    try {\n        A = Point.fromHex(pub, zip215); // public key A decoded\n        R = Point.fromHex(sig.slice(0, 32), zip215); // 0 <= R < 2^256: ZIP215 R can be >= P\n        s = b2n_LE(sig.slice(32, 64)); // Decode second half as an integer S\n        SB = G.mul(s, false); // in the range 0 <= s < L\n        hashable = concatB(R.toRawBytes(), A.toRawBytes(), msg); // dom2(F, C) || R || A || PH(M)\n    }\n    catch (error) { }\n    const finish = (hashed) => {\n        if (SB == null)\n            return false; // false if try-catch catched an error\n        if (!zip215 && A.isSmallOrder())\n            return false; // false for SBS: Strongly Binding Signature\n        const k = modL_LE(hashed); // decode in little-endian, modulo L\n        const RkA = R.add(A.mul(k, false)); // [8]R + [8][k]A'\n        return RkA.add(SB.negate()).clearCofactor().is0(); // [8][S]B = [8]R + [8][k]A'\n    };\n    return { hashable, finish };\n};\n// RFC8032 5.1.7: verification async, sync\nconst verifyAsync = async (s, m, p, opts = dvo) => hashFinish(true, _verify(s, m, p, opts));\nconst verify = (s, m, p, opts = dvo) => hashFinish(false, _verify(s, m, p, opts));\nconst cr = () => // We support: 1) browsers 2) node.js 19+\n typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\nconst etc = {\n    bytesToHex: b2h, hexToBytes: h2b, concatBytes: concatB,\n    mod, invert,\n    randomBytes: (len = 32) => {\n        const crypto = cr(); // Can be shimmed in node.js <= 18 to prevent error:\n        // import { webcrypto } from 'node:crypto';\n        // if (!globalThis.crypto) globalThis.crypto = webcrypto;\n        if (!crypto || !crypto.getRandomValues)\n            err('crypto.getRandomValues must be defined');\n        return crypto.getRandomValues(u8n(len));\n    },\n    sha512Async: async (...messages) => {\n        const crypto = cr();\n        if (!crypto || !crypto.subtle)\n            err('crypto.subtle or etc.sha512Async must be defined');\n        const m = concatB(...messages);\n        return u8n(await crypto.subtle.digest('SHA-512', m.buffer));\n    },\n    sha512Sync: undefined, // Actual logic below\n};\nObject.defineProperties(etc, { sha512Sync: {\n        configurable: false, get() { return _shaS; }, set(f) { if (!_shaS)\n            _shaS = f; },\n    } });\nconst utils = {\n    getExtendedPublicKeyAsync, getExtendedPublicKey,\n    randomPrivateKey: () => etc.randomBytes(32),\n    precompute(w = 8, p = G) { p.multiply(3n); w; return p; }, // no-op\n};\nconst W = 8; // Precomputes-related code. W = window size\nconst precompute = () => {\n    const points = []; // 10x sign(), 2x verify(). To achieve this,\n    const windows = 256 / W + 1; // app needs to spend 40ms+ to calculate\n    let p = G, b = p; // a lot of points related to base point G.\n    for (let w = 0; w < windows; w++) { // Points are stored in array and used\n        b = p; // any time Gx multiplication is done.\n        points.push(b); // They consume 16-32 MiB of RAM.\n        for (let i = 1; i < 2 ** (W - 1); i++) {\n            b = b.add(p);\n            points.push(b);\n        }\n        p = b.double(); // Precomputes don't speed-up getSharedKey,\n    } // which multiplies user point by scalar,\n    return points; // when precomputes are using base point\n};\nlet Gpows = undefined; // precomputes for base point G\nconst wNAF = (n) => {\n    // Compared to other point mult methods,\n    const comp = Gpows || (Gpows = precompute()); // stores 2x less points using subtraction\n    const neg = (cnd, p) => { let n = p.negate(); return cnd ? n : p; }; // negate\n    let p = I, f = G; // f must be G, or could become I in the end\n    const windows = 1 + 256 / W; // W=8 17 windows\n    const wsize = 2 ** (W - 1); // W=8 128 window size\n    const mask = BigInt(2 ** W - 1); // W=8 will create mask 0b11111111\n    const maxNum = 2 ** W; // W=8 256\n    const shiftBy = BigInt(W); // W=8 8\n    for (let w = 0; w < windows; w++) {\n        const off = w * wsize;\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > wsize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off1 = off, off2 = off + Math.abs(wbits) - 1; // offsets, evaluate both\n        const cnd1 = w % 2 !== 0, cnd2 = wbits < 0; // conditions, evaluate both\n        if (wbits === 0) {\n            f = f.add(neg(cnd1, comp[off1])); // bits are 0: add garbage to fake point\n        }\n        else { //          ^ can't add off2, off2 = I\n            p = p.add(neg(cnd2, comp[off2])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n}; // !! you can disable precomputes by commenting-out call of the wNAF() inside Point#mul()\nexport { getPublicKey, getPublicKeyAsync, sign, verify, // Remove the export to easily use in REPL\nsignAsync, verifyAsync, CURVE, etc, utils, Point as ExtendedPoint }; // envs like browser console\n", "import { utils } from '@avalabs/avalanchejs'\nimport {\n  sign as ed25519Sign,\n  verify as ed25519Verify,\n  etc\n} from '@noble/ed25519'\nimport { createHash } from 'crypto'\n\nexport type PublicKey = Uint8Array\nexport type SecretKey = Uint8Array\nexport type Signature = Uint8Array\nexport type Message = Uint8Array\n\nexport const PUBLIC_KEY_LENGTH = 32\nexport const PRIVATE_KEY_LENGTH = 32\nexport const SIGNATURE_LENGTH = 64\n\nexport function secretKeyFromBytes(skBytes: Uint8Array | string): SecretKey {\n  return typeof skBytes === 'string' ? utils.hexToBuffer(skBytes) : skBytes\n}\n\nexport function secretKeyToBytes(sk: SecretKey): Uint8Array {\n  return sk\n}\n\nexport function publicKeyFromBytes(pkBytes: Uint8Array | string): PublicKey {\n  return typeof pkBytes === 'string' ? utils.hexToBuffer(pkBytes) : pkBytes\n}\n\nexport function publicKeyToBytes(pk: PublicKey): Uint8Array {\n  return pk\n}\n\nexport function signatureFromBytes(sigBytes: Uint8Array): Signature {\n  return sigBytes\n}\n\nexport function signatureToBytes(sig: Signature): Uint8Array {\n  return sig\n}\n\nexport function verify(\n  pk: PublicKey,\n  sig: Signature,\n  msg: Uint8Array | string\n): boolean {\n  const message = typeof msg === 'string' ? utils.hexToBuffer(msg) : msg\n  return ed25519Verify(sig, message, pk)\n}\n\nexport function sign(msg: Uint8Array | string, sk: SecretKey): Uint8Array {\n  const message = typeof msg === 'string' ? utils.hexToBuffer(msg) : msg\n  return ed25519Sign(message, sk)\n}\n\n// Set the synchronous SHA-512 function\netc.sha512Sync = (...messages: Uint8Array[]): Uint8Array => {\n  const hash = createHash('sha512')\n  for (const message of messages) {\n    hash.update(message)\n  }\n  return new Uint8Array(hash.digest())\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nexport function isHex(str: string): boolean {\n  const hexRegex = /^[0-9a-fA-F]+$/\n  return hexRegex.test(str)\n}\n\n// ToHex converts a byte to a hex string.\nexport function toHex(b: Uint8Array): string {\n  return Buffer.from(b).toString('hex')\n}\n\n// LoadHex Converts hex encoded string into bytes. Returns\n// an error if key is invalid.\nexport function loadHex(s: string, expectedSize: number): Uint8Array {\n  const bytes = Buffer.from(s, 'hex')\n  if (expectedSize !== -1 && bytes.length !== expectedSize) {\n    throw new Error('Invalid size')\n  }\n  return new Uint8Array(bytes)\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { getPublicKey } from '@noble/ed25519'\nimport { randomBytes } from '@noble/hashes/utils'\nimport { EMPTY_ADDRESS } from '../constants/consts'\nimport { ED25519_COMPUTE_UNITS, ED25519_ID } from '../constants/hypervm'\nimport {\n  PRIVATE_KEY_LENGTH,\n  PUBLIC_KEY_LENGTH,\n  PublicKey,\n  SIGNATURE_LENGTH,\n  SecretKey,\n  Signature,\n  sign,\n  verify\n} from '../crypto/ed25519'\nimport { Address } from '../utils/address'\nimport { Codec } from '../utils/codec'\nimport { loadHex, toHex } from '../utils/hex'\nimport { bufferEquals } from '../utils/utils'\nimport { Auth, AuthFactory } from './auth'\n\nexport const Ed25519AuthSize = PUBLIC_KEY_LENGTH + SIGNATURE_LENGTH\n\nexport class ED25519 implements Auth {\n  public signer: PublicKey\n  public signature: Signature\n  private addr: Address = EMPTY_ADDRESS\n\n  constructor(signer: PublicKey, signature: Signature) {\n    this.signer = signer\n    this.signature = signature\n  }\n\n  address(): Address {\n    if (bufferEquals(this.addr.toBytes(), EMPTY_ADDRESS.toBytes())) {\n      this.addr = Address.newAddress(ED25519_ID, this.signer)\n    }\n    return this.addr\n  }\n\n  getTypeId(): number {\n    return ED25519_ID\n  }\n\n  async verify(message: Uint8Array): Promise<boolean> {\n    return verify(this.signer, this.signature, message)\n  }\n\n  actor(): Address {\n    return this.address()\n  }\n\n  sponsor(): Address {\n    return this.address()\n  }\n\n  size(): number {\n    return Ed25519AuthSize\n  }\n\n  toBytes(): Uint8Array {\n    const size = this.size()\n    const codec = Codec.newWriter(size, size)\n    codec.packFixedBytes(this.signer)\n    codec.packFixedBytes(this.signature)\n    return codec.toBytes()\n  }\n\n  static fromBytes(bytes: Uint8Array): [ED25519, Error?] {\n    const codec = Codec.newReader(bytes, bytes.length)\n    const signer = codec.unpackFixedBytes(PUBLIC_KEY_LENGTH)\n    const signature = codec.unpackFixedBytes(SIGNATURE_LENGTH)\n    return [new ED25519(signer, signature), codec.getError()]\n  }\n\n  static publicKeyToHex(publicKey: PublicKey): string {\n    return Buffer.from(publicKey).toString('hex')\n  }\n\n  static hexToPublicKey(hex: string): PublicKey {\n    return Buffer.from(hex, 'hex')\n  }\n}\n\nexport class ED25519Factory implements AuthFactory {\n  privateKey: SecretKey\n\n  constructor(privateKey?: SecretKey) {\n    let privKey = randomBytes(32) // 32 bytes for a private key\n    if (privateKey) {\n      privKey = privateKey\n    }\n    this.privateKey = privKey\n  }\n\n  sign(message: Uint8Array): Auth {\n    const publicKey = getPublicKey(this.privateKey)\n    const signature = sign(message, this.privateKey)\n    return new ED25519(publicKey, signature)\n  }\n\n  computeUnits(): number {\n    return ED25519_COMPUTE_UNITS\n  }\n\n  bandwidth(): number {\n    return Ed25519AuthSize\n  }\n\n  static generateKeyPair(): {\n    privateKey: SecretKey\n    publicKey: PublicKey\n  } {\n    const privateKey = new ED25519Factory().privateKey\n    const publicKey = getPublicKey(privateKey)\n    return { privateKey, publicKey }\n  }\n\n  static publicKeyFromPrivateKey(privateKey: SecretKey): PublicKey {\n    return getPublicKey(privateKey)\n  }\n\n  static privateKeyToHex(privateKey: SecretKey): string {\n    return Buffer.from(privateKey).toString('hex')\n  }\n\n  static hexToPrivateKey(hex: string): SecretKey {\n    let privateKeyBytes = Buffer.from(hex, 'hex')\n    if (privateKeyBytes.length === PRIVATE_KEY_LENGTH + PUBLIC_KEY_LENGTH) {\n      privateKeyBytes = privateKeyBytes.subarray(0, PRIVATE_KEY_LENGTH)\n      return loadHex(toHex(privateKeyBytes), PRIVATE_KEY_LENGTH)\n    } else if (privateKeyBytes.length !== PRIVATE_KEY_LENGTH) {\n      throw new Error('Invalid combined key size')\n    }\n    return loadHex(hex, PRIVATE_KEY_LENGTH)\n  }\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport { ADDRESS_LEN, ID_LEN, INT_LEN, UINT64_LEN } from '../constants/consts'\nimport {\n  MAX_MEMO_SIZE,\n  STORAGE_BALANCE_CHUNKS,\n  TRANSFER_COMPUTE_UNITS,\n  TRANSFER_ID\n} from '../constants/hypervm'\nimport { Address } from '../utils/address'\nimport { Codec } from '../utils/codec'\nimport { toAssetID } from '../utils/utils'\nimport { Action } from './action'\n\nexport const TransferTxSize =\n  ADDRESS_LEN + ID_LEN + UINT64_LEN + INT_LEN + MAX_MEMO_SIZE\n\nexport class Transfer implements Action {\n  public to: Address\n  public asset: Id\n  public value: bigint\n  public memo: Uint8Array\n\n  constructor(to: string, asset: string, value: bigint, memo: string) {\n    this.to = Address.fromString(to)\n    // Default asset to NAI if asset is \"NAI\"\n    this.asset = toAssetID(asset)\n    this.value = value\n    this.memo = new TextEncoder().encode(memo)\n  }\n\n  getTypeId(): number {\n    return TRANSFER_ID\n  }\n\n  size(): number {\n    // We have to add INT_LEN because when packing bytes, we pack the length of the bytes\n    return ADDRESS_LEN + ID_LEN + UINT64_LEN + INT_LEN + this.memo.length\n  }\n\n  computeUnits(): number {\n    return TRANSFER_COMPUTE_UNITS\n  }\n\n  stateKeysMaxChunks(): number[] {\n    return [STORAGE_BALANCE_CHUNKS, STORAGE_BALANCE_CHUNKS]\n  }\n\n  toBytes(): Uint8Array {\n    const codec = Codec.newWriter(this.size(), this.size())\n    codec.packAddress(this.to)\n    codec.packID(this.asset)\n    codec.packUint64(this.value)\n    codec.packBytes(this.memo)\n    const bytes = codec.toBytes()\n    return bytes\n  }\n\n  static fromBytes(bytes: Uint8Array): [Transfer, Error?] {\n    const codec = Codec.newReader(bytes, bytes.length)\n    const to = codec.unpackAddress()\n    const asset = codec.unpackID(false)\n    const value = codec.unpackUint64(true)\n\n    // Ensure the memo is unpacked as fixed bytes of MAX_MEMO_SIZE\n    const memoBytes = codec.unpackLimitedBytes(MAX_MEMO_SIZE)\n    const memo = new TextDecoder().decode(memoBytes)\n\n    const action = new Transfer(to.toString(), asset.toString(), value, memo)\n    return [action, codec.getError()]\n  }\n\n  static fromBytesCodec(codec: Codec): [Transfer, Codec] {\n    const codecResult = codec\n    const to = codecResult.unpackAddress()\n    const asset = codecResult.unpackID(false)\n    const value = codecResult.unpackUint64(true)\n\n    // Ensure the memo is unpacked as fixed bytes of MAX_MEMO_SIZE\n    const memoBytes = codecResult.unpackLimitedBytes(MAX_MEMO_SIZE)\n    const memo = new TextDecoder().decode(memoBytes)\n\n    const action = new Transfer(to.toString(), asset.toString(), value, memo)\n    return [action, codecResult]\n  }\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto =\n  nc && typeof nc === 'object' && 'webcrypto' in nc ? (nc.webcrypto as any) : undefined;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) \u2261 1    if a is a square (mod p)\n  // (a | p) \u2261 -1   if a is not a square (mod p)\n  // (a | p) \u2261 0    if a \u2261 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) \u2261 -1 and set c \u2261 zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be \u2261 -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P \u2261 3 (mod 4)\n  // \u221An = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q \u2261 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P \u2261 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / \uD835\uDC4A) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(\uD835\uDC4A\u22121) * (Math.ceil(\uD835\uDC5B / \uD835\uDC4A) + 1), where:\n     * - \uD835\uDC4A is the window size\n     * - \uD835\uDC5B is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y\u00B2 = x\u00B3 + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y\u00B2 = x\u00B3 + ax + b: Short weierstrass curve formula\n   * @returns y\u00B2\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) \u220B (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y\u00B2\n      const right = weierstrassEquation(x); // x\u00B3 + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) \u220B (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y\u00B2 = x\u00B3 + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y\u00B2 ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b \u2208 [1,q\u22121] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G \u00D7 k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1\u22C5G - U2\u22C5P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1\u22C5G + u2\u22C5P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n/**\n * BLS (Barreto-Lynn-Scott) family of pairing-friendly curves.\n * Implements BLS (Boneh-Lynn-Shacham) signatures.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y\u00B2 = x\u00B3 + 4.\n * - G2 is a subgroup of ((x\u2081, x\u2082+i), (y\u2081, y\u2082+i)) E(Fq\u00B2) over y\u00B2 = x\u00B3 + 4(1 + i) where i is \u221A-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * We are using Fp for private keys (shorter) and Fp\u2082 for signatures (longer).\n * Some projects may prefer to swap this relation, it is not supported for now.\n */\nimport { AffinePoint } from './curve.js';\nimport { IField, getMinHashLength, mapHashToField } from './modular.js';\nimport { Hex, PrivKey, CHash, bitLen, bitGet, ensureBytes } from './utils.js';\n// prettier-ignore\nimport {\n  MapToCurve, Opts as HTFOpts, H2CPointConstructor, htfBasicOpts,\n  createHasher\n} from './hash-to-curve.js';\nimport {\n  CurvePointsType,\n  ProjPointType as ProjPointType,\n  CurvePointsRes,\n  weierstrassPoints,\n} from './weierstrass.js';\n\ntype Fp = bigint; // Can be different field?\n\n// prettier-ignore\nconst _2n = BigInt(2), _3n = BigInt(3);\n\nexport type ShortSignatureCoder<Fp> = {\n  fromHex(hex: Hex): ProjPointType<Fp>;\n  toRawBytes(point: ProjPointType<Fp>): Uint8Array;\n  toHex(point: ProjPointType<Fp>): string;\n};\n\nexport type SignatureCoder<Fp2> = {\n  fromHex(hex: Hex): ProjPointType<Fp2>;\n  toRawBytes(point: ProjPointType<Fp2>): Uint8Array;\n  toHex(point: ProjPointType<Fp2>): string;\n};\n\nexport type CurveType<Fp, Fp2, Fp6, Fp12> = {\n  G1: Omit<CurvePointsType<Fp>, 'n'> & {\n    ShortSignature: SignatureCoder<Fp>;\n    mapToCurve: MapToCurve<Fp>;\n    htfDefaults: HTFOpts;\n  };\n  G2: Omit<CurvePointsType<Fp2>, 'n'> & {\n    Signature: SignatureCoder<Fp2>;\n    mapToCurve: MapToCurve<Fp2>;\n    htfDefaults: HTFOpts;\n  };\n  fields: {\n    Fp: IField<Fp>;\n    Fr: IField<bigint>;\n    Fp2: IField<Fp2> & {\n      reim: (num: Fp2) => { re: bigint; im: bigint };\n      multiplyByB: (num: Fp2) => Fp2;\n      frobeniusMap(num: Fp2, power: number): Fp2;\n    };\n    Fp6: IField<Fp6>;\n    Fp12: IField<Fp12> & {\n      frobeniusMap(num: Fp12, power: number): Fp12;\n      multiplyBy014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n      conjugate(num: Fp12): Fp12;\n      finalExponentiate(num: Fp12): Fp12;\n    };\n  };\n  params: {\n    x: bigint;\n    r: bigint;\n  };\n  htfDefaults: HTFOpts;\n  hash: CHash; // Because we need outputLen for DRBG\n  randomBytes: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn<Fp, Fp2, Fp6, Fp12> = {\n  getPublicKey: (privateKey: PrivKey) => Uint8Array;\n  getPublicKeyForShortSignatures: (privateKey: PrivKey) => Uint8Array;\n  sign: {\n    (message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (message: ProjPointType<Fp2>, privateKey: PrivKey, htfOpts?: htfBasicOpts): ProjPointType<Fp2>;\n  };\n  signShortSignature: {\n    (message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (message: ProjPointType<Fp>, privateKey: PrivKey, htfOpts?: htfBasicOpts): ProjPointType<Fp>;\n  };\n  verify: (\n    signature: Hex | ProjPointType<Fp2>,\n    message: Hex | ProjPointType<Fp2>,\n    publicKey: Hex | ProjPointType<Fp>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyShortSignature: (\n    signature: Hex | ProjPointType<Fp>,\n    message: Hex | ProjPointType<Fp>,\n    publicKey: Hex | ProjPointType<Fp2>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyBatch: (\n    signature: Hex | ProjPointType<Fp2>,\n    messages: (Hex | ProjPointType<Fp2>)[],\n    publicKeys: (Hex | ProjPointType<Fp>)[],\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  aggregatePublicKeys: {\n    (publicKeys: Hex[]): Uint8Array;\n    (publicKeys: ProjPointType<Fp>[]): ProjPointType<Fp>;\n  };\n  aggregateSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: ProjPointType<Fp2>[]): ProjPointType<Fp2>;\n  };\n  aggregateShortSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: ProjPointType<Fp>[]): ProjPointType<Fp>;\n  };\n  millerLoop: (ell: [Fp2, Fp2, Fp2][], g1: [Fp, Fp]) => Fp12;\n  pairing: (P: ProjPointType<Fp>, Q: ProjPointType<Fp2>, withFinalExponent?: boolean) => Fp12;\n  G1: CurvePointsRes<Fp> & ReturnType<typeof createHasher<Fp>>;\n  G2: CurvePointsRes<Fp2> & ReturnType<typeof createHasher<Fp2>>;\n  Signature: SignatureCoder<Fp2>;\n  ShortSignature: ShortSignatureCoder<Fp>;\n  params: {\n    x: bigint;\n    r: bigint;\n    G1b: bigint;\n    G2b: Fp2;\n  };\n  fields: {\n    Fp: IField<Fp>;\n    Fp2: IField<Fp2>;\n    Fp6: IField<Fp6>;\n    Fp12: IField<Fp12>;\n    Fr: IField<bigint>;\n  };\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    calcPairingPrecomputes: (p: AffinePoint<Fp2>) => [Fp2, Fp2, Fp2][];\n  };\n};\n\nexport function bls<Fp2, Fp6, Fp12>(\n  CURVE: CurveType<Fp, Fp2, Fp6, Fp12>\n): CurveFn<Fp, Fp2, Fp6, Fp12> {\n  // Fields are specific for curve, so for now we'll need to pass them with opts\n  const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n  const BLS_X_LEN = bitLen(CURVE.params.x);\n\n  // Pre-compute coefficients for sparse multiplication\n  // Point addition and point double calculations is reused for coefficients\n  function calcPairingPrecomputes(p: AffinePoint<Fp2>) {\n    const { x, y } = p;\n    // prettier-ignore\n    const Qx = x, Qy = y, Qz = Fp2.ONE;\n    // prettier-ignore\n    let Rx = Qx, Ry = Qy, Rz = Qz;\n    let ell_coeff: [Fp2, Fp2, Fp2][] = [];\n    for (let i = BLS_X_LEN - 2; i >= 0; i--) {\n      // Double\n      let t0 = Fp2.sqr(Ry); // Ry\u00B2\n      let t1 = Fp2.sqr(Rz); // Rz\u00B2\n      let t2 = Fp2.multiplyByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n      let t3 = Fp2.mul(t2, _3n); // 3 * T2\n      let t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)\u00B2 - T1 - T0\n      ell_coeff.push([\n        Fp2.sub(t2, t0), // T2 - T0\n        Fp2.mul(Fp2.sqr(Rx), _3n), // 3 * Rx\u00B2\n        Fp2.neg(t4), // -T4\n      ]);\n      Rx = Fp2.div(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), _2n); // ((T0 - T3) * Rx * Ry) / 2\n      Ry = Fp2.sub(Fp2.sqr(Fp2.div(Fp2.add(t0, t3), _2n)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)\u00B2 - 3 * T2\u00B2\n      Rz = Fp2.mul(t0, t4); // T0 * T4\n      if (bitGet(CURVE.params.x, i)) {\n        // Addition\n        let t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n        let t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n        ell_coeff.push([\n          Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)), // T0 * Qx - T1 * Qy\n          Fp2.neg(t0), // -T0\n          t1, // T1\n        ]);\n        let t2 = Fp2.sqr(t1); // T1\u00B2\n        let t3 = Fp2.mul(t2, t1); // T2 * T1\n        let t4 = Fp2.mul(t2, Rx); // T2 * Rx\n        let t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0\u00B2 * Rz\n        Rx = Fp2.mul(t1, t5); // T1 * T5\n        Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n        Rz = Fp2.mul(Rz, t3); // Rz * T3\n      }\n    }\n    return ell_coeff;\n  }\n\n  function millerLoop(ell: [Fp2, Fp2, Fp2][], g1: [Fp, Fp]): Fp12 {\n    const { x } = CURVE.params;\n    const Px = g1[0];\n    const Py = g1[1];\n    let f12 = Fp12.ONE;\n    for (let j = 0, i = BLS_X_LEN - 2; i >= 0; i--, j++) {\n      const E = ell[j];\n      f12 = Fp12.multiplyBy014(f12, E[0], Fp2.mul(E[1], Px), Fp2.mul(E[2], Py));\n      if (bitGet(x, i)) {\n        j += 1;\n        const F = ell[j];\n        f12 = Fp12.multiplyBy014(f12, F[0], Fp2.mul(F[1], Px), Fp2.mul(F[2], Py));\n      }\n      if (i !== 0) f12 = Fp12.sqr(f12);\n    }\n    return Fp12.conjugate(f12);\n  }\n\n  const utils = {\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(Fr.ORDER);\n      return mapHashToField(CURVE.randomBytes(length), Fr.ORDER);\n    },\n    calcPairingPrecomputes,\n  };\n\n  // Point on G1 curve: (x, y)\n  const G1_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G1 });\n  const G1 = Object.assign(\n    G1_,\n    createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G1.htfDefaults,\n    })\n  );\n\n  // Sparse multiplication against precomputed coefficients\n  // TODO: replace with weakmap?\n  type withPairingPrecomputes = { _PPRECOMPUTES: [Fp2, Fp2, Fp2][] | undefined };\n  function pairingPrecomputes(point: G2): [Fp2, Fp2, Fp2][] {\n    const p = point as G2 & withPairingPrecomputes;\n    if (p._PPRECOMPUTES) return p._PPRECOMPUTES;\n    p._PPRECOMPUTES = calcPairingPrecomputes(point.toAffine());\n    return p._PPRECOMPUTES;\n  }\n\n  // TODO: export\n  // function clearPairingPrecomputes(point: G2) {\n  //   const p = point as G2 & withPairingPrecomputes;\n  //   p._PPRECOMPUTES = undefined;\n  // }\n\n  // Point on G2 curve (complex numbers): (x\u2081, x\u2082+i), (y\u2081, y\u2082+i)\n  const G2_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G2 });\n  const G2 = Object.assign(\n    G2_,\n    createHasher(G2_.ProjectivePoint as H2CPointConstructor<Fp2>, CURVE.G2.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G2.htfDefaults,\n    })\n  );\n\n  const { ShortSignature } = CURVE.G1;\n  const { Signature } = CURVE.G2;\n\n  // Calculates bilinear pairing\n  function pairing(Q: G1, P: G2, withFinalExponent: boolean = true): Fp12 {\n    if (Q.equals(G1.ProjectivePoint.ZERO) || P.equals(G2.ProjectivePoint.ZERO))\n      throw new Error('pairing is not available for ZERO point');\n    Q.assertValidity();\n    P.assertValidity();\n    // Performance: 9ms for millerLoop and ~14ms for exp.\n    const Qa = Q.toAffine();\n    const looped = millerLoop(pairingPrecomputes(P), [Qa.x, Qa.y]);\n    return withFinalExponent ? Fp12.finalExponentiate(looped) : looped;\n  }\n  type G1 = typeof G1.ProjectivePoint.BASE;\n  type G2 = typeof G2.ProjectivePoint.BASE;\n\n  type G1Hex = Hex | G1;\n  type G2Hex = Hex | G2;\n  function normP1(point: G1Hex): G1 {\n    return point instanceof G1.ProjectivePoint ? (point as G1) : G1.ProjectivePoint.fromHex(point);\n  }\n  function normP1Hash(point: G1Hex, htfOpts?: htfBasicOpts): G1 {\n    return point instanceof G1.ProjectivePoint\n      ? point\n      : (G1.hashToCurve(ensureBytes('point', point), htfOpts) as G1);\n  }\n  function normP2(point: G2Hex): G2 {\n    return point instanceof G2.ProjectivePoint ? point : Signature.fromHex(point);\n  }\n  function normP2Hash(point: G2Hex, htfOpts?: htfBasicOpts): G2 {\n    return point instanceof G2.ProjectivePoint\n      ? point\n      : (G2.hashToCurve(ensureBytes('point', point), htfOpts) as G2);\n  }\n\n  // Multiplies generator (G1) by private key.\n  // P = pk x G\n  function getPublicKey(privateKey: PrivKey): Uint8Array {\n    return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n\n  // Multiplies generator (G2) by private key.\n  // P = pk x G\n  function getPublicKeyForShortSignatures(privateKey: PrivKey): Uint8Array {\n    return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n\n  // Executes `hashToCurve` on the message and then multiplies the result by private key.\n  // S = pk x H(m)\n  function sign(message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n  function sign(message: G2, privateKey: PrivKey, htfOpts?: htfBasicOpts): G2;\n  function sign(message: G2Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array | G2 {\n    const msgPoint = normP2Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G2.ProjectivePoint) return sigPoint;\n    return Signature.toRawBytes(sigPoint);\n  }\n\n  function signShortSignature(\n    message: Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array;\n  function signShortSignature(message: G1, privateKey: PrivKey, htfOpts?: htfBasicOpts): G1;\n  function signShortSignature(\n    message: G1Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array | G1 {\n    const msgPoint = normP1Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G1.ProjectivePoint) return sigPoint;\n    return ShortSignature.toRawBytes(sigPoint);\n  }\n\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(P, H(m)) == e(G, S)\n  function verify(\n    signature: G2Hex,\n    message: G2Hex,\n    publicKey: G1Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const P = normP1(publicKey);\n    const Hm = normP2Hash(message, htfOpts);\n    const G = G1.ProjectivePoint.BASE;\n    const S = normP2(signature);\n    // Instead of doing 2 exponentiations, we use property of billinear maps\n    // and do one exp after multiplying 2 points.\n    const ePHm = pairing(P.negate(), Hm, false);\n    const eGS = pairing(G, S, false);\n    const exp = Fp12.finalExponentiate(Fp12.mul(eGS, ePHm));\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(S, G) == e(H(m), P)\n  function verifyShortSignature(\n    signature: G1Hex,\n    message: G1Hex,\n    publicKey: G2Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const P = normP2(publicKey);\n    const Hm = normP1Hash(message, htfOpts);\n    const G = G2.ProjectivePoint.BASE;\n    const S = normP1(signature);\n    // Instead of doing 2 exponentiations, we use property of billinear maps\n    // and do one exp after multiplying 2 points.\n    const eHmP = pairing(Hm, P, false);\n    const eSG = pairing(S, G.negate(), false);\n    const exp = Fp12.finalExponentiate(Fp12.mul(eSG, eHmP));\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n\n  // Adds a bunch of public key points together.\n  // pk1 + pk2 + pk3 = pkA\n  function aggregatePublicKeys(publicKeys: Hex[]): Uint8Array;\n  function aggregatePublicKeys(publicKeys: G1[]): G1;\n  function aggregatePublicKeys(publicKeys: G1Hex[]): Uint8Array | G1 {\n    if (!publicKeys.length) throw new Error('Expected non-empty array');\n    const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (publicKeys[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    // toRawBytes ensures point validity\n    return aggAffine.toRawBytes(true);\n  }\n\n  // Adds a bunch of signature points together.\n  function aggregateSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateSignatures(signatures: G2[]): G2;\n  function aggregateSignatures(signatures: G2Hex[]): Uint8Array | G2 {\n    if (!signatures.length) throw new Error('Expected non-empty array');\n    const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G2.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return Signature.toRawBytes(aggAffine);\n  }\n\n  // Adds a bunch of signature points together.\n  function aggregateShortSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateShortSignatures(signatures: G1[]): G1;\n  function aggregateShortSignatures(signatures: G1Hex[]): Uint8Array | G1 {\n    if (!signatures.length) throw new Error('Expected non-empty array');\n    const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return ShortSignature.toRawBytes(aggAffine);\n  }\n\n  // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n  // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n  function verifyBatch(\n    signature: G2Hex,\n    messages: G2Hex[],\n    publicKeys: G1Hex[],\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    // @ts-ignore\n    // console.log('verifyBatch', bytesToHex(signature as any), messages, publicKeys.map(bytesToHex));\n\n    if (!messages.length) throw new Error('Expected non-empty messages array');\n    if (publicKeys.length !== messages.length)\n      throw new Error('Pubkey count should equal msg count');\n    const sig = normP2(signature);\n    const nMessages = messages.map((i) => normP2Hash(i, htfOpts));\n    const nPublicKeys = publicKeys.map(normP1);\n    try {\n      const paired = [];\n      for (const message of new Set(nMessages)) {\n        const groupPublicKey = nMessages.reduce(\n          (groupPublicKey, subMessage, i) =>\n            subMessage === message ? groupPublicKey.add(nPublicKeys[i]) : groupPublicKey,\n          G1.ProjectivePoint.ZERO\n        );\n        // const msg = message instanceof PointG2 ? message : await PointG2.hashToCurve(message);\n        // Possible to batch pairing for same msg with different groupPublicKey here\n        paired.push(pairing(groupPublicKey, message, false));\n      }\n      paired.push(pairing(G1.ProjectivePoint.BASE.negate(), sig, false));\n      const product = paired.reduce((a, b) => Fp12.mul(a, b), Fp12.ONE);\n      const exp = Fp12.finalExponentiate(product);\n      return Fp12.eql(exp, Fp12.ONE);\n    } catch {\n      return false;\n    }\n  }\n\n  G1.ProjectivePoint.BASE._setWindowSize(4);\n\n  return {\n    getPublicKey,\n    getPublicKeyForShortSignatures,\n    sign,\n    signShortSignature,\n    verify,\n    verifyBatch,\n    verifyShortSignature,\n    aggregatePublicKeys,\n    aggregateSignatures,\n    aggregateShortSignatures,\n    millerLoop,\n    pairing,\n    G1,\n    G2,\n    Signature,\n    ShortSignature,\n    fields: {\n      Fr,\n      Fp,\n      Fp2,\n      Fp6,\n      Fp12,\n    },\n    params: {\n      x: CURVE.params.x,\n      r: CURVE.params.r,\n      G1b: CURVE.G1.b,\n      G2b: CURVE.G2.b,\n    },\n    utils,\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n// - Construct zk-SNARKs at the 120-bit security\n// - Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n//   the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n//\n// ### Summary\n// 1. BLS Relies on Bilinear Pairing (expensive)\n// 2. Private Keys: 32 bytes\n// 3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n// 4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n//     - The signature is a point on the G2 subgroup, which is defined over a finite field\n//     with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the complex numbers).\n// 5. The 12 stands for the Embedding degree.\n//\n// ### Formulas\n// - `P = pk x G` - public keys\n// - `S = pk x H(m)` - signing\n// - `e(P, H(m)) == e(G, S)` - verification using pairings\n// - `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n//\n// ### Compatibility and notes\n// 1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC\n//    Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n// 2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\"\n// 3. Curve security level is about 120 bits as per Barbulescu-Duquesne 2017\n//    https://hal.science/hal-01534101/file/main.pdf\n// 4. Compatible with specs:\n// [cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n// [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05),\n// [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls, CurveFn } from './abstract/bls.js';\nimport * as mod from './abstract/modular.js';\nimport {\n  concatBytes as concatB,\n  ensureBytes,\n  numberToBytesBE,\n  bytesToNumberBE,\n  bitLen,\n  bitGet,\n  Hex,\n  bitMask,\n  bytesToHex,\n} from './abstract/utils.js';\n// Types\nimport {\n  ProjPointType,\n  ProjConstructor,\n  mapToCurveSimpleSWU,\n  AffinePoint,\n} from './abstract/weierstrass.js';\nimport { isogenyMap } from './abstract/hash-to-curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// prettier-ignore\nconst _8n = BigInt(8), _16n = BigInt(16);\n\n// CURVE FIELDS\n// Finite field over p.\nconst Fp_raw = BigInt(\n  '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\n);\nconst Fp = mod.Field(Fp_raw);\ntype Fp = bigint;\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = mod.Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\n\n// Fp\u2082 over complex plane\ntype BigintTuple = [bigint, bigint];\ntype Fp2 = { c0: bigint; c1: bigint };\nconst Fp2Add = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n  c0: Fp.add(c0, r0),\n  c1: Fp.add(c1, r1),\n});\nconst Fp2Subtract = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n  c0: Fp.sub(c0, r0),\n  c1: Fp.sub(c1, r1),\n});\nconst Fp2Multiply = ({ c0, c1 }: Fp2, rhs: Fp2) => {\n  if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n  // (a+bi)(c+di) = (ac\u2212bd) + (ad+bc)i\n  const { c0: r0, c1: r1 } = rhs;\n  let t1 = Fp.mul(c0, r0); // c0 * o0\n  let t2 = Fp.mul(c1, r1); // c1 * o1\n  // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n  const o0 = Fp.sub(t1, t2);\n  const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n  return { c0: o0, c1: o1 };\n};\nconst Fp2Square = ({ c0, c1 }: Fp2) => {\n  const a = Fp.add(c0, c1);\n  const b = Fp.sub(c0, c1);\n  const c = Fp.add(c0, c0);\n  return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n};\ntype Fp2Utils = {\n  fromBigTuple: (tuple: BigintTuple | bigint[]) => Fp2;\n  reim: (num: Fp2) => { re: bigint; im: bigint };\n  mulByNonresidue: (num: Fp2) => Fp2;\n  multiplyByB: (num: Fp2) => Fp2;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n};\n// G2 is the order-q subgroup of E2(Fp\u00B2) : y\u00B2 = x\u00B3+4(1+\u221A\u22121),\n// where Fp2 is Fp[\u221A\u22121]/(x2+1). #E2(Fp2 ) = h2q, where\n// G\u00B2 - 1\n// h2q\n// NOTE: ORDER was wrong!\nconst FP2_ORDER = Fp_raw * Fp_raw;\n\nconst Fp2: mod.IField<Fp2> & Fp2Utils = {\n  ORDER: FP2_ORDER,\n  BITS: bitLen(FP2_ORDER),\n  BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n  MASK: bitMask(bitLen(FP2_ORDER)),\n  ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n  ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n  create: (num) => num,\n  isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n  is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n  eql: ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n  neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n  pow: (num, power) => mod.FpPow(Fp2, num, power),\n  invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n  // Normalized\n  add: Fp2Add,\n  sub: Fp2Subtract,\n  mul: Fp2Multiply,\n  sqr: Fp2Square,\n  // NonNormalized stuff\n  addN: Fp2Add,\n  subN: Fp2Subtract,\n  mulN: Fp2Multiply,\n  sqrN: Fp2Square,\n  // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n  div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n  inv: ({ c0: a, c1: b }) => {\n    // We wish to find the multiplicative inverse of a nonzero\n    // element a + bu in Fp2. We leverage an identity\n    //\n    // (a + bu)(a - bu) = a\u00B2 + b\u00B2\n    //\n    // which holds because u\u00B2 = -1. This can be rewritten as\n    //\n    // (a + bu)(a - bu)/(a\u00B2 + b\u00B2) = 1\n    //\n    // because a\u00B2 + b\u00B2 = 0 has no nonzero solutions for (a, b).\n    // This gives that (a - bu)/(a\u00B2 + b\u00B2) is the inverse\n    // of (a + bu). Importantly, this can be computing using\n    // only a single inversion in Fp.\n    const factor = Fp.inv(Fp.create(a * a + b * b));\n    return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n  },\n  sqrt: (num) => {\n    if (Fp2.eql(num, Fp2.ZERO)) return Fp2.ZERO; // Algo doesn't handles this case\n    // TODO: Optimize this line. It's extremely slow.\n    // Speeding this up would boost aggregateSignatures.\n    // https://eprint.iacr.org/2012/685.pdf applicable?\n    // https://github.com/zkcrypto/bls12_381/blob/080eaa74ec0e394377caa1ba302c8c121df08b07/src/fp2.rs#L250\n    // https://github.com/supranational/blst/blob/aae0c7d70b799ac269ff5edf29d8191dbd357876/src/exp2.c#L1\n    // Inspired by https://github.com/dalek-cryptography/curve25519-dalek/blob/17698df9d4c834204f83a3574143abacb4fc81a5/src/field.rs#L99\n    const candidateSqrt = Fp2.pow(num, (Fp2.ORDER + _8n) / _16n);\n    const check = Fp2.div(Fp2.sqr(candidateSqrt), num); // candidateSqrt.square().div(this);\n    const R = FP2_ROOTS_OF_UNITY;\n    const divisor = [R[0], R[2], R[4], R[6]].find((r) => Fp2.eql(r, check));\n    if (!divisor) throw new Error('No root');\n    const index = R.indexOf(divisor);\n    const root = R[index / 2];\n    if (!root) throw new Error('Invalid root');\n    const x1 = Fp2.div(candidateSqrt, root);\n    const x2 = Fp2.neg(x1);\n    const { re: re1, im: im1 } = Fp2.reim(x1);\n    const { re: re2, im: im2 } = Fp2.reim(x2);\n    if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n    return x2;\n  },\n  // Same as sgn0_m_eq_2 in RFC 9380\n  isOdd: (x: Fp2) => {\n    const { re: x0, im: x1 } = Fp2.reim(x);\n    const sign_0 = x0 % _2n;\n    const zero_0 = x0 === _0n;\n    const sign_1 = x1 % _2n;\n    return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n  },\n  // Bytes util\n  fromBytes(b: Uint8Array): Fp2 {\n    if (b.length !== Fp2.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n    return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n  },\n  toBytes: ({ c0, c1 }) => concatB(Fp.toBytes(c0), Fp.toBytes(c1)),\n  cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n    c0: Fp.cmov(c0, r0, c),\n    c1: Fp.cmov(c1, r1, c),\n  }),\n  // Specific utils\n  // toString() {\n  //   return `Fp2(${this.c0} + ${this.c1}\u00D7i)`;\n  // }\n  reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n  // multiply by u + 1\n  mulByNonresidue: ({ c0, c1 }) => ({ c0: Fp.sub(c0, c1), c1: Fp.add(c0, c1) }),\n  multiplyByB: ({ c0, c1 }) => {\n    let t0 = Fp.mul(c0, _4n); // 4 * c0\n    let t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n  },\n  fromBigTuple: (tuple: BigintTuple | bigint[]) => {\n    if (tuple.length !== 2) throw new Error('Invalid tuple');\n    const fps = tuple.map((n) => Fp.create(n)) as [Fp, Fp];\n    return { c0: fps[0], c1: fps[1] };\n  },\n  frobeniusMap: ({ c0, c1 }, power: number): Fp2 => ({\n    c0,\n    c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n  }),\n};\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u\u00B2 - \u03B2) where \u03B2 = -1\nconst FP2_FROBENIUS_COEFFICIENTS = [\n  BigInt('0x1'),\n  BigInt(\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'\n  ),\n].map((item) => Fp.create(item));\n\n// For Fp2 roots of unity.\nconst rv1 = BigInt(\n  '0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'\n);\n// const ev1 =\n//   BigInt('0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90');\n// const ev2 =\n//   BigInt('0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5');\n// const ev3 =\n//   BigInt('0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17');\n// const ev4 =\n//   BigInt('0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1');\n\n// Eighth roots of unity, used for computing square roots in Fp2.\n// To verify or re-calculate:\n// Array(8).fill(new Fp2([1n, 1n])).map((fp2, k) => fp2.pow(Fp2.ORDER * BigInt(k) / 8n))\nconst FP2_ROOTS_OF_UNITY = [\n  [_1n, _0n],\n  [rv1, -rv1],\n  [_0n, _1n],\n  [rv1, rv1],\n  [-_1n, _0n],\n  [-rv1, rv1],\n  [_0n, -_1n],\n  [-rv1, -rv1],\n].map((pair) => Fp2.fromBigTuple(pair));\n// eta values, used for computing sqrt(g(X1(t)))\n// const FP2_ETAs = [\n//   [ev1, ev2],\n//   [-ev2, ev1],\n//   [ev3, ev4],\n//   [-ev4, ev3],\n// ].map((pair) => Fp2.fromBigTuple(pair));\n\n// Finite extension field over irreducible polynominal.\n// Fp2(v) / (v\u00B3 - \u03BE) where \u03BE = u + 1\ntype BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\ntype Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nconst Fp6Add = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n  c0: Fp2.add(c0, r0),\n  c1: Fp2.add(c1, r1),\n  c2: Fp2.add(c2, r2),\n});\nconst Fp6Subtract = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n  c0: Fp2.sub(c0, r0),\n  c1: Fp2.sub(c1, r1),\n  c2: Fp2.sub(c2, r2),\n});\nconst Fp6Multiply = ({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) => {\n  if (typeof rhs === 'bigint') {\n    return {\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    };\n  }\n  const { c0: r0, c1: r1, c2: r2 } = rhs;\n  const t0 = Fp2.mul(c0, r0); // c0 * o0\n  const t1 = Fp2.mul(c1, r1); // c1 * o1\n  const t2 = Fp2.mul(c2, r2); // c2 * o2\n  return {\n    // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n    c0: Fp2.add(\n      t0,\n      Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n    ),\n    // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n    c1: Fp2.add(\n      Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n      Fp2.mulByNonresidue(t2)\n    ),\n    // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n    c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n  };\n};\nconst Fp6Square = ({ c0, c1, c2 }: Fp6) => {\n  let t0 = Fp2.sqr(c0); // c0\u00B2\n  let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n  let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n  let t4 = Fp2.sqr(c2); // c2\u00B2\n  return {\n    c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n    c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n    // T1 + (c0 - c1 + c2)\u00B2 + T3 - T0 - T4\n    c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n  };\n};\ntype Fp6Utils = {\n  fromBigSix: (tuple: BigintSix) => Fp6;\n  mulByNonresidue: (num: Fp6) => Fp6;\n  frobeniusMap(num: Fp6, power: number): Fp6;\n  multiplyBy1(num: Fp6, b1: Fp2): Fp6;\n  multiplyBy01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n  multiplyByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n};\n\nconst Fp6: mod.IField<Fp6> & Fp6Utils = {\n  ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n  BITS: 3 * Fp2.BITS,\n  BYTES: 3 * Fp2.BYTES,\n  MASK: bitMask(3 * Fp2.BITS),\n  ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n  ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n  create: (num) => num,\n  isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n  is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n  neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n  eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) =>\n    Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n  sqrt: () => {\n    throw new Error('Not implemented');\n  },\n  // Do we need division by bigint at all? Should be done via order:\n  div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n  pow: (num, power) => mod.FpPow(Fp6, num, power),\n  invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n  // Normalized\n  add: Fp6Add,\n  sub: Fp6Subtract,\n  mul: Fp6Multiply,\n  sqr: Fp6Square,\n  // NonNormalized stuff\n  addN: Fp6Add,\n  subN: Fp6Subtract,\n  mulN: Fp6Multiply,\n  sqrN: Fp6Square,\n\n  inv: ({ c0, c1, c2 }) => {\n    let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0\u00B2 - c2 * c1 * (u + 1)\n    let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2\u00B2 * (u + 1) - c0 * c1\n    let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1\u00B2 - c0 * c2\n    // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n    let t4 = Fp2.inv(\n      Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n    );\n    return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n  },\n  // Bytes utils\n  fromBytes: (b: Uint8Array): Fp6 => {\n    if (b.length !== Fp6.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n    return {\n      c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n      c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n      c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n    };\n  },\n  toBytes: ({ c0, c1, c2 }): Uint8Array =>\n    concatB(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n  cmov: ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c) => ({\n    c0: Fp2.cmov(c0, r0, c),\n    c1: Fp2.cmov(c1, r1, c),\n    c2: Fp2.cmov(c2, r2, c),\n  }),\n  // Utils\n  //   fromTriple(triple: [Fp2, Fp2, Fp2]) {\n  //     return new Fp6(...triple);\n  //   }\n  //   toString() {\n  //     return `Fp6(${this.c0} + ${this.c1} * v, ${this.c2} * v^2)`;\n  //   }\n  fromBigSix: (t: BigintSix): Fp6 => {\n    if (!Array.isArray(t) || t.length !== 6) throw new Error('Invalid Fp6 usage');\n    return {\n      c0: Fp2.fromBigTuple(t.slice(0, 2)),\n      c1: Fp2.fromBigTuple(t.slice(2, 4)),\n      c2: Fp2.fromBigTuple(t.slice(4, 6)),\n    };\n  },\n  frobeniusMap: ({ c0, c1, c2 }, power: number) => ({\n    c0: Fp2.frobeniusMap(c0, power),\n    c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n    c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n  }),\n  mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n\n  // Sparse multiplication\n  multiplyBy1: ({ c0, c1, c2 }, b1: Fp2): Fp6 => ({\n    c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n    c1: Fp2.mul(c0, b1),\n    c2: Fp2.mul(c1, b1),\n  }),\n  // Sparse multiplication\n  multiplyBy01({ c0, c1, c2 }, b0: Fp2, b1: Fp2): Fp6 {\n    let t0 = Fp2.mul(c0, b0); // c0 * b0\n    let t1 = Fp2.mul(c1, b1); // c1 * b1\n    return {\n      // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n      c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n      // (b0 + b1) * (c0 + c1) - T0 - T1\n      c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n      // (c0 + c2) * b0 - T0 + T1\n      c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n    };\n  },\n\n  multiplyByFp2: ({ c0, c1, c2 }, rhs: Fp2): Fp6 => ({\n    c0: Fp2.mul(c0, rhs),\n    c1: Fp2.mul(c1, rhs),\n    c2: Fp2.mul(c2, rhs),\n  }),\n};\n\nconst FP6_FROBENIUS_COEFFICIENTS_1 = [\n  [BigInt('0x1'), BigInt('0x0')],\n  [\n    BigInt('0x0'),\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n    BigInt('0x0'),\n  ],\n  [BigInt('0x0'), BigInt('0x1')],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt('0x0'),\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n  ],\n].map((pair) => Fp2.fromBigTuple(pair));\nconst FP6_FROBENIUS_COEFFICIENTS_2 = [\n  [BigInt('0x1'), BigInt('0x0')],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff'\n    ),\n    BigInt('0x0'),\n  ],\n].map((pair) => Fp2.fromBigTuple(pair));\n\n// Finite extension field over irreducible polynominal.\n// Fp\u2081\u2082 = Fp\u2086\u00B2 => Fp\u2082\u00B3\n// Fp\u2086(w) / (w\u00B2 - \u03B3) where \u03B3 = v\ntype Fp12 = { c0: Fp6; c1: Fp6 };\n// The BLS parameter x for BLS12-381\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\n\n// prettier-ignore\ntype BigintTwelve = [\n    bigint, bigint, bigint, bigint, bigint, bigint,\n    bigint, bigint, bigint, bigint, bigint, bigint\n  ];\nconst Fp12Add = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n  c0: Fp6.add(c0, r0),\n  c1: Fp6.add(c1, r1),\n});\nconst Fp12Subtract = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n  c0: Fp6.sub(c0, r0),\n  c1: Fp6.sub(c1, r1),\n});\nconst Fp12Multiply = ({ c0, c1 }: Fp12, rhs: Fp12 | bigint) => {\n  if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n  let { c0: r0, c1: r1 } = rhs;\n  let t1 = Fp6.mul(c0, r0); // c0 * r0\n  let t2 = Fp6.mul(c1, r1); // c1 * r1\n  return {\n    c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n    // (c0 + c1) * (r0 + r1) - (T1 + T2)\n    c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n  };\n};\nconst Fp12Square = ({ c0, c1 }: Fp12) => {\n  let ab = Fp6.mul(c0, c1); // c0 * c1\n  return {\n    // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n    c0: Fp6.sub(\n      Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n      Fp6.mulByNonresidue(ab)\n    ),\n    c1: Fp6.add(ab, ab),\n  }; // AB + AB\n};\nfunction Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n  const a2 = Fp2.sqr(a);\n  const b2 = Fp2.sqr(b);\n  return {\n    first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b\u00B2 * Nonresidue + a\u00B2\n    second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)\u00B2 - a\u00B2 - b\u00B2\n  };\n}\ntype Fp12Utils = {\n  fromBigTwelve: (t: BigintTwelve) => Fp12;\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  multiplyBy014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  multiplyByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n  _cyclotomicSquare(num: Fp12): Fp12;\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n};\n\nconst Fp12: mod.IField<Fp12> & Fp12Utils = {\n  ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n  BITS: 2 * Fp2.BITS,\n  BYTES: 2 * Fp2.BYTES,\n  MASK: bitMask(2 * Fp2.BITS),\n  ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n  ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n  create: (num) => num,\n  isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n  is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n  neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n  eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n  sqrt: () => {\n    throw new Error('Not implemented');\n  },\n  inv: ({ c0, c1 }) => {\n    let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0\u00B2 - c1\u00B2 * v)\n    return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n  },\n  div: (lhs, rhs) =>\n    Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n  pow: (num, power) => mod.FpPow(Fp12, num, power),\n  invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n  // Normalized\n  add: Fp12Add,\n  sub: Fp12Subtract,\n  mul: Fp12Multiply,\n  sqr: Fp12Square,\n  // NonNormalized stuff\n  addN: Fp12Add,\n  subN: Fp12Subtract,\n  mulN: Fp12Multiply,\n  sqrN: Fp12Square,\n\n  // Bytes utils\n  fromBytes: (b: Uint8Array): Fp12 => {\n    if (b.length !== Fp12.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n    return {\n      c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n      c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n    };\n  },\n  toBytes: ({ c0, c1 }): Uint8Array => concatB(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n  cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n    c0: Fp6.cmov(c0, r0, c),\n    c1: Fp6.cmov(c1, r1, c),\n  }),\n  // Utils\n  // toString() {\n  //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n  // },\n  // fromTuple(c: [Fp6, Fp6]) {\n  //   return new Fp12(...c);\n  // }\n  fromBigTwelve: (t: BigintTwelve): Fp12 => ({\n    c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n    c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n  }),\n  // Raises to q**i -th power\n  frobeniusMap(lhs, power: number) {\n    const r0 = Fp6.frobeniusMap(lhs.c0, power);\n    const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n    const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n    return {\n      c0: r0,\n      c1: Fp6.create({\n        c0: Fp2.mul(c0, coeff),\n        c1: Fp2.mul(c1, coeff),\n        c2: Fp2.mul(c2, coeff),\n      }),\n    };\n  },\n  // Sparse multiplication\n  multiplyBy014: ({ c0, c1 }, o0: Fp2, o1: Fp2, o4: Fp2) => {\n    let t0 = Fp6.multiplyBy01(c0, o0, o1);\n    let t1 = Fp6.multiplyBy1(c1, o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n      // (c1 + c0) * [o0, o1+o4] - T0 - T1\n      c1: Fp6.sub(Fp6.sub(Fp6.multiplyBy01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n    };\n  },\n  multiplyByFp2: ({ c0, c1 }, rhs: Fp2): Fp12 => ({\n    c0: Fp6.multiplyByFp2(c0, rhs),\n    c1: Fp6.multiplyByFp2(c1, rhs),\n  }),\n  conjugate: ({ c0, c1 }): Fp12 => ({ c0, c1: Fp6.neg(c1) }),\n\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   G\u03A6\u2099(p) = {\u03B1 \u2208 Fp\u207F : \u03B1^\u03A6\u2099(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  _cyclotomicSquare: ({ c0, c1 }): Fp12 => {\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n    let t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n      }), // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n      }),\n    }; // 2 * (T6 + c1c2) + T6\n  },\n  _cyclotomicExp(num, n) {\n    let z = Fp12.ONE;\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n      z = Fp12._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\n    }\n    return z;\n  },\n  // https://eprint.iacr.org/2010/354.pdf\n  // https://eprint.iacr.org/2009/565.pdf\n  finalExponentiate: (num) => {\n    const x = BLS_X;\n    // this^(q\u2076) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q\u00B2) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q\u00B2) * (t4 * t1)^(q\u00B3) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  },\n};\nconst FP12_FROBENIUS_COEFFICIENTS = [\n  [BigInt('0x1'), BigInt('0x0')],\n  [\n    BigInt(\n      '0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8'\n    ),\n    BigInt(\n      '0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3'\n    ),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2'\n    ),\n    BigInt(\n      '0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'\n    ),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995'\n    ),\n    BigInt(\n      '0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116'\n    ),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3'\n    ),\n    BigInt(\n      '0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8'\n    ),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'\n    ),\n    BigInt(\n      '0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2'\n    ),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116'\n    ),\n    BigInt(\n      '0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995'\n    ),\n  ],\n].map((n) => Fp2.fromBigTuple(n));\n// END OF CURVE FIELDS\n\n// HashToCurve\n\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(\n  Fp2,\n  [\n    // xNum\n    [\n      [\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n      ],\n      [\n        '0x0',\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n      ],\n      [\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n        '0x0',\n      ],\n    ],\n    // xDen\n    [\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n      ],\n      [\n        '0xc',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n      [\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n      ],\n      [\n        '0x0',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n      ],\n      [\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n        '0x0',\n      ],\n    ],\n    // yDen\n    [\n      [\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n      ],\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n      ],\n      [\n        '0x12',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))) as [Fp2[], Fp2[], Fp2[], Fp2[]]\n);\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\n);\n\n// SWU Map - Fp2 to G2': y\u00B2 = x\u00B3 + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(\n    BigInt(\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\n    )\n  ),\n  B: Fp.create(\n    BigInt(\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\n    )\n  ),\n  Z: Fp.create(BigInt(11)),\n});\n\n// Endomorphisms (for fast cofactor clearing)\n// \u03A8(P) endomorphism\nconst ut_root = Fp6.create({ c0: Fp2.ZERO, c1: Fp2.ONE, c2: Fp2.ZERO });\nconst wsq = Fp12.create({ c0: ut_root, c1: Fp6.ZERO });\nconst wcu = Fp12.create({ c0: Fp6.ZERO, c1: ut_root });\nconst [wsq_inv, wcu_inv] = Fp12.invertBatch([wsq, wcu]);\nfunction psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n  // Untwist Fp2->Fp12 && frobenius(1) && twist back\n  const x2 = Fp12.mul(Fp12.frobeniusMap(Fp12.multiplyByFp2(wsq_inv, x), 1), wsq).c0.c0;\n  const y2 = Fp12.mul(Fp12.frobeniusMap(Fp12.multiplyByFp2(wcu_inv, y), 1), wcu).c0.c0;\n  return [x2, y2];\n}\n// \u03A8 endomorphism\nfunction G2psi(c: ProjConstructor<Fp2>, P: ProjPointType<Fp2>) {\n  const affine = P.toAffine();\n  const p = psi(affine.x, affine.y);\n  return new c(p[0], p[1], Fp2.ONE);\n}\n// \u03A8\u00B2(P) endomorphism\n// 1 / F2(2)^((p-1)/3) in GF(p\u00B2)\nconst PSI2_C1 = BigInt(\n  '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n);\n\nfunction psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n  return [Fp2.mul(x, PSI2_C1), Fp2.neg(y)];\n}\nfunction G2psi2(c: ProjConstructor<Fp2>, P: ProjPointType<Fp2>) {\n  const affine = P.toAffine();\n  const p = psi2(affine.x, affine.y);\n  return new c(p[0], p[1], Fp2.ONE);\n}\n\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n  // DST: a domain separation tag\n  // defined in section 2.2.5\n  // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  // p: the characteristic of F\n  //    where F is a finite field of characteristic p and order q = p^m\n  p: Fp.ORDER,\n  // m: the extension degree of F, m >= 1\n  //     where F is a finite field of characteristic p and order q = p^m\n  m: 2,\n  // k: the target security level for the suite in bits\n  // defined in section 5.1\n  k: 128,\n  // option to use a message that has already been processed by\n  // expand_message_xmd\n  expand: 'xmd',\n  // Hash functions for: expand_message_xmd is appropriate for use with a\n  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n  hash: sha256,\n} as const);\n\n// Encoding utils\n// Point on G1 curve: (x, y)\n\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true }); // set compressed & point-at-infinity bits\n\nfunction parseMask(bytes: Uint8Array) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 0b1110_0000;\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\n  return { compressed, infinity, sort, value: bytes };\n}\n\nfunction setMask(\n  bytes: Uint8Array,\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\n) {\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\n  if (mask.sort) bytes[0] |= 0b0010_0000;\n  return bytes;\n}\n\nfunction signatureG1ToRawBytes(point: ProjPointType<Fp>) {\n  point.assertValidity();\n  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n  const { x, y } = point.toAffine();\n  if (isZero) return COMPRESSED_ZERO.slice();\n  const P = Fp.ORDER;\n  const sort = Boolean((y * _2n) / P);\n  return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n}\n\nfunction signatureG2ToRawBytes(point: ProjPointType<Fp2>) {\n  // NOTE: by some reasons it was missed in bls12-381, looks like bug\n  point.assertValidity();\n  const len = Fp.BYTES;\n  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))\n    return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n  const { x, y } = point.toAffine();\n  const { re: x0, im: x1 } = Fp2.reim(x);\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\n  const z2 = x0;\n  return concatB(\n    setMask(numberToBytesBE(x1, len), { sort, compressed: true }),\n    numberToBytesBE(z2, len)\n  );\n}\n\n// To verify curve parameters, see pairing-friendly-curves spec:\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// Basic math is done over finite fields over p.\n// More complicated math is done over polynominal extension fields.\n// To simplify calculations in Fp12, we construct extension tower:\n// Fp\u2081\u2082 = Fp\u2086\u00B2 => Fp\u2082\u00B3\n// Fp(u) / (u\u00B2 - \u03B2) where \u03B2 = -1\n// Fp\u2082(v) / (v\u00B3 - \u03BE) where \u03BE = u + 1\n// Fp\u2086(w) / (w\u00B2 - \u03B3) where \u03B3 = v\n// Here goes constants && point encoding format\nexport const bls12_381: CurveFn<Fp, Fp2, Fp6, Fp12> = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr,\n  },\n  // G1 is the order-q subgroup of E1(Fp) : y\u00B2 = x\u00B3 + 4, #E1(Fp) = h1q, where\n  // characteristic; z + (z\u2074 - z\u00B2 + 1)(z - 1)\u00B2/3\n  G1: {\n    Fp,\n    // cofactor; (z - 1)\u00B2/3\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    // generator's coordinates\n    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n    Gx: BigInt(\n      '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\n    ),\n    Gy: BigInt(\n      '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\n    ),\n    a: Fp.ZERO,\n    b: _4n,\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point): boolean => {\n      // \u03C6 endomorphism\n      const cubicRootOfUnityModP = BigInt(\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n      );\n      const phi = new c(Fp.mul(point.px, cubicRootOfUnityModP), point.py, point.pz);\n\n      // todo: unroll\n      const xP = point.multiplyUnsafe(bls12_381.params.x).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(bls12_381.params.x); // [u2]P\n      return u2P.equals(phi);\n\n      // https://eprint.iacr.org/2019/814.pdf\n      // (z\u00B2 \u2212 1)/3\n      // const c1 = BigInt('0x396c8c005555e1560000000055555555');\n      // const P = this;\n      // const S = P.sigma();\n      // const Q = S.double();\n      // const S2 = S.sigma();\n      // // [(z\u00B2 \u2212 1)/3](2\u03C3(P) \u2212 P \u2212 \u03C3\u00B2(P)) \u2212 \u03C3\u00B2(P) = O\n      // const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n      // const C = left.subtract(S2);\n      // return C.isZero();\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(bls12_381.params.x).add(point); // x*P + P\n    },\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G1_SWU(Fp.create(scalars[0]));\n      return isogenyMapG1(x, y);\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (value.length === 48 && compressed) {\n        // TODO: Fp.bytes\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n          if (x !== _0n) throw new Error('G1: non-empty compressed point at infinity');\n          return { x: _0n, y: _0n };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y\u00B2 = x\u00B3 + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n        const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n        if (infinity) {\n          if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n        }\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else {\n        throw new Error('Invalid point G1, expected 48/96 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return COMPRESSED_ZERO.slice();\n        const P = Fp.ORDER;\n        const sort = Boolean((y * _2n) / P);\n        return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n      } else {\n        if (isZero) {\n          // 2x PUBLIC_KEY_LENGTH\n          const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n          return x;\n        } else {\n          return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n        }\n      }\n    },\n    ShortSignature: {\n      fromHex(hex: Hex): ProjPointType<Fp> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        if (infinity) return bls12_381.G1.ProjectivePoint.ZERO;\n        const x = Fp.create(compressedValue & Fp.MASK);\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y\u00B2 = x\u00B3 + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        const aflag = BigInt(sort);\n        if ((y * _2n) / P !== aflag) y = Fp.neg(y);\n        const point = bls12_381.G1.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp>) {\n        return signatureG1ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp>) {\n        return bytesToHex(signatureG1ToRawBytes(point));\n      },\n    },\n  },\n  // G2 is the order-q subgroup of E2(Fp\u00B2) : y\u00B2 = x\u00B3+4(1+\u221A\u22121),\n  // where Fp2 is Fp[\u221A\u22121]/(x2+1). #E2(Fp2 ) = h2q, where\n  // G\u00B2 - 1\n  // h2q\n  G2: {\n    Fp: Fp2,\n    // cofactor\n    h: BigInt(\n      '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\n    ),\n    Gx: Fp2.fromBigTuple([\n      BigInt(\n        '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\n      ),\n      BigInt(\n        '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\n      ),\n    ]),\n    // y =\n    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n    Gy: Fp2.fromBigTuple([\n      BigInt(\n        '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\n      ),\n      BigInt(\n        '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\n      ),\n    ]),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    hEff: BigInt(\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\n    ),\n    htfDefaults: { ...htfDefaults },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars));\n      return isogenyMapG2(x, y);\n    },\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, P): boolean => {\n      return P.multiplyUnsafe(bls12_381.params.x).negate().equals(G2psi(c, P)); // \u03C8(P) == [u](P)\n      // Older version: https://eprint.iacr.org/2019/814.pdf\n      // \u03A8\u00B2(P) => \u03A8\u00B3(P) => [z]\u03A8\u00B3(P) where z = -x => [z]\u03A8\u00B3(P) - \u03A8\u00B2(P) + P == O\n      // return P.psi2().psi().mulNegX().subtract(psi2).add(P).isZero();\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from cfrg-hash-to-curve-11\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = bls12_381.params.x;\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\n      let t2 = G2psi(c, P);                   // \u03A8(P)\n      let t3 = P.double();                    // 2P\n      t3 = G2psi2(c, t3);                     // \u03A8\u00B2(2P)\n      t3 = t3.subtract(t2);                   // \u03A8\u00B2(2P) - \u03A8(P)\n      t2 = t1.add(t2);                        // [-x]P + \u03A8(P)\n      t2 = t2.multiplyUnsafe(x).negate();     // [x\u00B2]P - [x]\u03A8(P)\n      t3 = t3.add(t2);                        // \u03A8\u00B2(2P) - \u03A8(P) + [x\u00B2]P - [x]\u03A8(P)\n      t3 = t3.subtract(t1);                   // \u03A8\u00B2(2P) - \u03A8(P) + [x\u00B2]P - [x]\u03A8(P) + [x]P\n      const Q = t3.subtract(P);               // \u03A8\u00B2(2P) - \u03A8(P) + [x\u00B2]P - [x]\u03A8(P) + [x]P - 1P\n      return Q;                               // [x\u00B2-x-1]P + [x-1]\u03A8(P) + \u03A8\u00B2(2P)\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp2> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (\n        (!compressed && !infinity && sort) || // 00100000\n        (!compressed && infinity && sort) || // 01100000\n        (sort && infinity && compressed) // 11100000\n      ) {\n        throw new Error('Invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\n      }\n      const L = Fp.BYTES;\n      const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\n      if (value.length === 96 && compressed) {\n        const b = bls12_381.params.G2b;\n        const P = Fp.ORDER;\n        if (infinity) {\n          // check that all bytes are 0\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('Invalid compressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n        const right = Fp2.add(Fp2.pow(x, _3n), b); // y\u00B2 = x\u00B3 + 4 * (u+1) = x\u00B3 + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return { x, y };\n      } else if (value.length === 192 && !compressed) {\n        if (infinity) {\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('Invalid uncompressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x1 = slc(value, 0, L);\n        const x0 = slc(value, L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n      } else {\n        throw new Error('Invalid point G2, expected 96/192 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const { BYTES: len, ORDER: P } = Fp;\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n        const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n        return concatB(\n          setMask(numberToBytesBE(x.c1, len), { compressed: true, sort: flag }),\n          numberToBytesBE(x.c0, len)\n        );\n      } else {\n        if (isZero) return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n        const { re: x0, im: x1 } = Fp2.reim(x);\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        return concatB(\n          numberToBytesBE(x1, len),\n          numberToBytesBE(x0, len),\n          numberToBytesBE(y1, len),\n          numberToBytesBE(y0, len)\n        );\n      }\n    },\n    Signature: {\n      // TODO: Optimize, it's very slow because of sqrt.\n      fromHex(hex: Hex): ProjPointType<Fp2> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n        const P = Fp.ORDER;\n        const half = value.length / 2;\n        if (half !== 48 && half !== 96)\n          throw new Error('Invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(value.slice(0, half));\n        const z2 = bytesToNumberBE(value.slice(half));\n        // Indicates the infinity point\n        if (infinity) return bls12_381.G2.ProjectivePoint.ZERO;\n        const x1 = Fp.create(z1 & Fp.MASK);\n        const x2 = Fp.create(z2);\n        const x = Fp2.create({ c0: x2, c1: x1 });\n        const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y\u00B2 = x\u00B3 + 4\n        // The slow part\n        let y = Fp2.sqrt(y2);\n        if (!y) throw new Error('Failed to find a square root');\n\n        // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n        // If y1 happens to be zero, then use the bit of y0\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        const aflag1 = BigInt(sort);\n        const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n        const isZero = y1 === _0n && (y0 * _2n) / P !== aflag1;\n        if (isGreater || isZero) y = Fp2.neg(y);\n        const point = bls12_381.G2.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp2>) {\n        return signatureG2ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp2>) {\n        return bytesToHex(signatureG2ToRawBytes(point));\n      },\n    },\n  },\n  params: {\n    x: BLS_X, // The BLS parameter x for BLS12-381\n    r: Fr.ORDER, // order; z\u2074 \u2212 z\u00B2 + 1; CURVE.n from other curves\n  },\n  htfDefaults,\n  hash: sha256,\n  randomBytes,\n});\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { bls } from '@avalabs/avalanchejs'\nimport { bls12_381 } from '@noble/curves/bls12-381'\nimport { randomBytes } from '@noble/hashes/utils'\nimport { EMPTY_ADDRESS } from '../constants/consts'\nimport { BLS_COMPUTE_UNITS, BLS_ID } from '../constants/hypervm'\nimport { Address } from '../utils/address'\nimport { Codec } from '../utils/codec'\nimport { bufferEquals } from '../utils/utils'\nimport { Auth, AuthFactory } from './auth'\n\nexport const BlsAuthSize = bls.PUBLIC_KEY_LENGTH + bls.SIGNATURE_LENGTH\n\nexport class BLS implements Auth {\n  public signer: bls.PublicKey\n  public signature: bls.Signature\n  private addr: Address = EMPTY_ADDRESS\n\n  constructor(signer: bls.PublicKey, signature: bls.Signature) {\n    this.signer = signer\n    this.signature = signature\n  }\n\n  address(): Address {\n    if (bufferEquals(this.addr.toBytes(), EMPTY_ADDRESS.toBytes())) {\n      this.addr = Address.newAddress(BLS_ID, bls.publicKeyToBytes(this.signer))\n    }\n    return this.addr\n  }\n\n  getTypeId(): number {\n    return BLS_ID\n  }\n\n  async verify(message: Uint8Array): Promise<boolean> {\n    return bls.verify(this.signer, this.signature, message)\n  }\n\n  actor(): Address {\n    return this.address()\n  }\n\n  sponsor(): Address {\n    return this.address()\n  }\n\n  size(): number {\n    return BlsAuthSize\n  }\n\n  toBytes(): Uint8Array {\n    const size = this.size()\n    const codec = Codec.newWriter(size, size)\n    const signerBytes = bls.publicKeyToBytes(this.signer)\n    codec.packFixedBytes(signerBytes)\n    const signatureBytes = bls.signatureToBytes(this.signature)\n    codec.packFixedBytes(signatureBytes)\n    return codec.toBytes()\n  }\n\n  static fromBytes(bytes: Uint8Array): [BLS, Error?] {\n    const codec = Codec.newReader(bytes, bytes.length)\n    const signer = bls.publicKeyFromBytes(\n      codec.unpackFixedBytes(bls.PUBLIC_KEY_LENGTH)\n    )\n    const signature = bls.signatureFromBytes(\n      codec.unpackFixedBytes(bls.SIGNATURE_LENGTH)\n    )\n    return [new BLS(signer, signature), codec.getError()]\n  }\n\n  static publicKeyToHex(publicKey: bls.PublicKey): string {\n    return Buffer.from(bls.publicKeyToBytes(publicKey)).toString('hex')\n  }\n\n  static hexToPublicKey(hex: string): bls.PublicKey {\n    return bls.publicKeyFromBytes(Buffer.from(hex, 'hex'))\n  }\n}\n\nexport class BLSFactory implements AuthFactory {\n  public privateKey: bls.SecretKey\n\n  constructor(privateKey?: bls.SecretKey) {\n    let privKey = bls.secretKeyFromBytes(randomBytes(32)) // 32 bytes for a private key\n    if (privateKey) {\n      privKey = privateKey\n    }\n    this.privateKey = privKey\n  }\n\n  sign(message: Uint8Array): Auth {\n    const signer = BLSFactory.publicKeyFromPrivateKey(this.privateKey)\n    const signature = bls.sign(message, this.privateKey)\n    return new BLS(signer, bls.signatureFromBytes(signature))\n  }\n\n  computeUnits(): number {\n    return BLS_COMPUTE_UNITS\n  }\n\n  bandwidth(): number {\n    return BlsAuthSize\n  }\n\n  static generateKeyPair(): {\n    privateKey: bls.SecretKey\n    publicKey: bls.PublicKey\n  } {\n    const privateKey = new BLSFactory().privateKey\n    const publicKey = BLSFactory.publicKeyFromPrivateKey(privateKey)\n    return { privateKey, publicKey }\n  }\n\n  static publicKeyFromPrivateKey(privateKey: bls.SecretKey): bls.PublicKey {\n    const publicKeyBytes = bls12_381.getPublicKey(privateKey)\n    return bls.publicKeyFromBytes(publicKeyBytes)\n  }\n\n  static privateKeyToHex(privateKey: bls.SecretKey): string {\n    return Buffer.from(bls.secretKeyToBytes(privateKey)).toString('hex')\n  }\n\n  static hexToPrivateKey(hex: string): bls.SecretKey {\n    return bls.secretKeyFromBytes(Buffer.from(hex, 'hex'))\n  }\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport { ED25519, Ed25519AuthSize } from 'auth/ed25519'\nimport { Action } from '../actions/action'\nimport { Transfer } from '../actions/transfer'\nimport { Auth, AuthFactory } from '../auth/auth'\nimport { BLS, BlsAuthSize } from '../auth/bls'\nimport { BYTE_LEN, NETWORK_SIZE_LIMIT } from '../constants/consts'\nimport { BLS_ID, ED25519_ID, TRANSFER_ID } from '../constants/hypervm'\nimport { Codec } from '../utils/codec'\nimport { ToID } from '../utils/hashing'\nimport { BaseTx, BaseTxSize } from './baseTx'\n\nexport class Transaction {\n  public base: BaseTx\n  public actions: Action[]\n  public auth?: Auth\n  private bytes: Uint8Array = new Uint8Array()\n\n  constructor(base: BaseTx, actions: Action[]) {\n    this.base = base\n    this.actions = actions\n  }\n\n  calculateDigest(): [Uint8Array, Error?] {\n    const codec = Codec.newWriter(this.size(), NETWORK_SIZE_LIMIT)\n    codec.packFixedBytes(this.base.toBytes())\n    codec.packByte(this.actions.length)\n    this.actions.forEach((action) => {\n      const actionTypeId = action.getTypeId()\n      codec.packByte(actionTypeId)\n      codec.packFixedBytes(action.toBytes())\n    })\n\n    return [codec.toBytes(), codec.getError()]\n  }\n\n  sign(factory: AuthFactory): [Transaction, Error?] {\n    let [msg, err] = this.calculateDigest()\n    if (err) {\n      return [this, err]\n    }\n    this.auth = factory.sign(msg)\n    ;[this.bytes, err] = this.toBytes()\n    if (err) {\n      return [this, err]\n    }\n\n    return Transaction.fromBytes(this.bytes)\n  }\n\n  toBytes(): [Uint8Array, Error?] {\n    if (this.bytes.length > 0) {\n      return [this.bytes, undefined]\n    }\n\n    const codec = Codec.newWriter(this.size(), NETWORK_SIZE_LIMIT)\n\n    // Pack the base transaction\n    const baseBytes = this.base.toBytes()\n    codec.packFixedBytes(baseBytes)\n\n    // Pack the number of actions\n    const numActions = this.actions.length\n    codec.packByte(numActions)\n\n    // Pack each action\n    this.actions.forEach((action) => {\n      const actionTypeId = action.getTypeId()\n      codec.packByte(actionTypeId)\n      const actionBytes = action.toBytes()\n      codec.packFixedBytes(actionBytes)\n    })\n\n    // Pack the auth if present\n    if (this.auth) {\n      const authTypeId = this.auth.getTypeId()\n      codec.packByte(authTypeId)\n      const authBytes = this.auth.toBytes()\n      codec.packFixedBytes(authBytes)\n    }\n\n    return [codec.toBytes(), codec.getError()]\n  }\n\n  static fromBytes(bytes: Uint8Array): [Transaction, Error?] {\n    let codec = Codec.newReader(bytes, bytes.length)\n\n    // Unpack the base transaction\n    const baseBytes = codec.unpackFixedBytes(BaseTxSize)\n    let [base, err] = BaseTx.fromBytes(baseBytes)\n    if (err) {\n      return [\n        new Transaction(base, []),\n        new Error(`Failed to unpack base transaction: ${err}`)\n      ]\n    }\n\n    // Unpack the number of actions\n    const numActions = codec.unpackByte()\n    if (numActions === 0) {\n      return [\n        new Transaction(base, []),\n        new Error('Transaction must have at least one action')\n      ]\n    }\n\n    // Unpack each action\n    const actions: Action[] = []\n    for (let i = 0; i < numActions; i++) {\n      const actionTypeId = codec.unpackByte()\n      let action: Action\n      let codecAction: Codec\n      if (actionTypeId === TRANSFER_ID) {\n        const [actionTransfer, codecActionTransfer] =\n          Transfer.fromBytesCodec(codec)\n        if (codecActionTransfer.getError()) {\n          return [\n            new Transaction(base, []),\n            new Error(`Failed to unpack transfer action: ${err}`)\n          ]\n        }\n        codecAction = codecActionTransfer\n        action = actionTransfer\n      } else {\n        return [\n          new Transaction(base, []),\n          new Error(`Invalid action type: ${actionTypeId}`)\n        ]\n      }\n      codec = codecAction\n      actions.push(action)\n    }\n\n    const transaction = new Transaction(base, actions)\n    // Check if there are additional bytes for auth\n    if (codec.getOffset() < bytes.length) {\n      const authTypeId = codec.unpackByte()\n      let auth: Auth\n      if (authTypeId === BLS_ID) {\n        const authBytes = codec.unpackFixedBytes(BlsAuthSize)\n        ;[auth, err] = BLS.fromBytes(authBytes)\n        if (err) {\n          return [transaction, new Error(`Failed to unpack BLS auth: ${err}`)]\n        }\n      } else if (authTypeId === ED25519_ID) {\n        const authBytes = codec.unpackFixedBytes(Ed25519AuthSize)\n        ;[auth, err] = ED25519.fromBytes(authBytes)\n        if (err) {\n          return [\n            transaction,\n            new Error(`Failed to unpack ED25519 auth: ${err}`)\n          ]\n        }\n      } else {\n        return [transaction, new Error(`Invalid auth type: ${authTypeId}`)]\n      }\n      transaction.auth = auth\n    }\n    transaction.bytes = bytes\n\n    return [transaction, codec.getError()]\n  }\n\n  id(): Id {\n    return Id.fromBytes(ToID(this.bytes))[0]\n  }\n\n  size(): number {\n    let size = this.base.size() + BYTE_LEN // BaseTx size + number of actions byte\n    this.actions.forEach((action) => {\n      const actionSize = BYTE_LEN + action.size() // Action type byte + action size\n      size += actionSize\n    })\n    if (this.auth) {\n      const authSize = BYTE_LEN + this.auth.size() // Auth type byte + auth size\n      size += authSize\n    }\n    return size\n  }\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { Id } from '@avalabs/avalanchejs'\nimport { Action } from '../actions/action'\nimport { AuthFactory } from '../auth/auth'\nimport { Api } from '../common/baseApi'\nimport {\n  Genesis,\n  GetLastAcceptedResponse,\n  GetNetworkInfoResponse,\n  GetUnitPricesResponse,\n  GetWarpSignaturesResponse,\n  PingResponse,\n  SubmitTransactionResponse\n} from '../common/models'\nimport { NodeConfig } from '../config'\nimport { COREAPI_METHOD_PREFIX, COREAPI_PATH } from '../constants/endpoints'\nimport { BaseTx } from '../transactions/baseTx'\nimport { estimateUnits, mulSum } from '../transactions/fees'\nimport { Transaction } from '../transactions/transaction'\nimport { getUnixRMilli } from '../utils/utils'\n\nexport class RpcService extends Api {\n  constructor(protected config: NodeConfig) {\n    super(\n      config.baseApiUrl,\n      `/ext/bc/${config.blockchainId}/${COREAPI_PATH}`,\n      COREAPI_METHOD_PREFIX\n    )\n  }\n\n  ping(): Promise<PingResponse> {\n    return this.callRpc<PingResponse>('ping')\n  }\n\n  // Retrieve network IDs\n  getNetworkInfo(): Promise<GetNetworkInfoResponse> {\n    return this.callRpc<GetNetworkInfoResponse>('network')\n  }\n\n  // Get information about the last accepted block\n  getLastAccepted(): Promise<GetLastAcceptedResponse> {\n    return this.callRpc<GetLastAcceptedResponse>('lastAccepted')\n  }\n\n  // Fetch current unit prices for transactions\n  getUnitPrices(): Promise<GetUnitPricesResponse> {\n    return this.callRpc<GetUnitPricesResponse>('unitPrices')\n  }\n\n  // Fetch warp signatures associated with a transaction\n  getWarpSignatures(txID: string): Promise<GetWarpSignaturesResponse> {\n    return this.callRpc<GetWarpSignaturesResponse>('getWarpSignatures', {\n      txID\n    })\n  }\n\n  // Submit a transaction to the network\n  async submitTransaction(tx: Uint8Array): Promise<SubmitTransactionResponse> {\n    // Convert Uint8Array to base64 string\n    const txBase64 = Array.from(tx)\n    return this.callRpc<SubmitTransactionResponse>('submitTx', { tx: txBase64 })\n  }\n\n  async generateTransaction(\n    genesisInfo: Genesis,\n    actions: Action[],\n    authFactory: AuthFactory\n  ): Promise<{\n    submit: () => Promise<SubmitTransactionResponse>\n    txSigned: Transaction\n    err: Error | undefined\n  }> {\n    try {\n      // Construct the base transaction\n      // Set timestamp\n      const timestamp: bigint = getUnixRMilli(\n        Date.now(),\n        genesisInfo.validityWindow\n      )\n      // Set chain ID\n      const chainId = Id.fromString(this.config.blockchainId)\n      // Set maxFee\n      const unitPrices: GetUnitPricesResponse = await this.getUnitPrices()\n      const units = estimateUnits(genesisInfo, actions, authFactory)\n      const [maxFee, error] = mulSum(unitPrices.unitPrices, units)\n      if (error) {\n        return {\n          submit: async () => {\n            throw new Error('Transaction failed, cannot submit.')\n          },\n          txSigned: {} as Transaction,\n          err: error as Error\n        }\n      }\n\n      const base = new BaseTx(timestamp, chainId, maxFee)\n\n      const tx: Transaction = new Transaction(base, actions)\n\n      // Sign the transaction\n      const [txSigned, err] = tx.sign(authFactory)\n      if (err) {\n        return {\n          submit: async () => {\n            throw new Error('Transaction failed, cannot submit.')\n          },\n          txSigned: {} as Transaction,\n          err: err as Error\n        }\n      }\n\n      const submit = async (): Promise<SubmitTransactionResponse> => {\n        const [txBytes, err] = txSigned.toBytes()\n        if (err) {\n          throw new Error(`Transaction failed, cannot submit. Err: ${err}`)\n        }\n        return await this.submitTransaction(txBytes)\n      }\n\n      return { submit, txSigned, err: undefined }\n    } catch (error) {\n      return {\n        submit: async () => {\n          throw new Error('Transaction failed, cannot submit.')\n        },\n        txSigned: {} as Transaction,\n        err: error as Error\n      }\n    }\n  }\n}\n", "export * from './action'\nexport * from './transfer'\n", "export * from './auth'\nexport * from './bls'\nexport * from './ed25519'\nexport * from './provider'\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nexport function isBase64(str: string): boolean {\n  const base64Regex =\n    /^(?:[A-Za-z0-9+\\/]{4})*?(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/\n  return base64Regex.test(str)\n}\n\nexport function base64ToUint8Array(base64: string): Uint8Array {\n  const binaryString = atob(base64)\n  const len = binaryString.length\n  const bytes = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i)\n  }\n  return bytes\n}\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { bls } from '@avalabs/avalanchejs'\nimport { base64ToUint8Array, isBase64 } from '../utils/base64'\nimport { isHex } from '../utils/hex'\nimport { Auth, AuthFactory } from './auth'\nimport { BLS, BLSFactory } from './bls'\nimport { ED25519, ED25519Factory } from './ed25519'\n\nexport type AuthType = 'bls' | 'ed25519'\n\nfunction decodePrivateKey(privateKey: string): Uint8Array {\n  if (isHex(privateKey)) {\n    return Buffer.from(privateKey, 'hex')\n  } else if (isBase64(privateKey)) {\n    return base64ToUint8Array(privateKey)\n  } else {\n    throw new Error('Unsupported private key format')\n  }\n}\n\nexport function getAuthFactory(\n  authType: AuthType,\n  privateKeyString: string\n): AuthFactory {\n  const privateKeyBytes = decodePrivateKey(privateKeyString)\n  const privateKeyHex = Buffer.from(privateKeyBytes).toString('hex')\n\n  if (authType === 'bls') {\n    const privateKey = BLSFactory.hexToPrivateKey(privateKeyHex)\n    return new BLSFactory(privateKey)\n  } else if (authType === 'ed25519') {\n    const privateKey = ED25519Factory.hexToPrivateKey(privateKeyHex)\n    return new ED25519Factory(privateKey)\n  } else {\n    throw new Error('Unsupported key type')\n  }\n}\n\nexport function getAuth(\n  authType: AuthType,\n  signer: Uint8Array,\n  signature: Uint8Array\n): Auth {\n  if (authType === 'bls') {\n    return new BLS(\n      bls.publicKeyFromBytes(signer),\n      bls.signatureFromBytes(signature)\n    )\n  } else if (authType === 'ed25519') {\n    return new ED25519(signer, signature)\n  } else {\n    throw new Error('Unsupported key type')\n  }\n}\n", "export * from './baseApi'\nexport * from './models'\nexport * from './rpc'\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nexport type NodeConfig = {\n  baseApiUrl: string\n  blockchainId: string\n}\n", "export * from './consts'\nexport * from './endpoints'\nexport * from './hypervm'\n", "export * from './ed25519'\n", "export * from './rpc'\n", "export * from './baseTx'\nexport * as fees from './fees'\nexport * from './transaction'\n", "export * from './address'\nexport * from './base64'\nexport * from './codec'\nexport * from './hashing'\nexport * from './hex'\nexport * from './utils'\n", "// Copyright (C) 2024, Nuklai. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nimport { NodeConfig } from './config'\nimport {\n  HYPERCHAIN_ID,\n  MAINNET_PUBLIC_API_BASE_URL\n} from './constants/endpoints'\nimport { RpcService } from './services/rpc'\n\nexport * as actions from './actions'\nexport * as auth from './auth'\nexport * as common from './common'\nexport * as config from './config'\nexport * as consts from './constants'\nexport * as crypto from './crypto'\nexport * as services from './services'\nexport * as transactions from './transactions'\nexport * as utils from './utils'\n\nexport class HyperchainSDK {\n  nodeConfig: NodeConfig\n\n  // Hypervm services\n  rpcService: RpcService\n\n  constructor(nodeConfig?: Partial<NodeConfig>) {\n    const defaultSDKConfig: NodeConfig = {\n      baseApiUrl: MAINNET_PUBLIC_API_BASE_URL,\n      blockchainId: HYPERCHAIN_ID\n    }\n    this.nodeConfig = { ...defaultSDKConfig, ...nodeConfig }\n\n    // Hypervm services\n    this.rpcService = new RpcService(this.nodeConfig)\n  }\n}\n"],
  "mappings": "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",
  "names": ["bigInt", "undefined", "v", "radix", "alphabet", "sign", "i", "x", "b", "l", "j", "y", "d", "ac", "q", "mod", "fn", "p", "gcd", "pow", "str", "max", "min", "b", "x", "alphabet", "to", "fn", "d", "padding", "bytes", "str", "j", "b", "v", "str", "_words", "str", "bytes", "isBytes", "_", "bytes", "hex", "ai", "hi", "str", "isBytes", "isBytes", "b", "isLE", "h", "l", "to", "b", "A", "B", "C", "D", "E", "F", "G", "H", "W2", "_", "j", "k", "x", "y", "z", "ar", "br", "cr", "dr", "er", "rr", "sr", "tr", "__decorate", "decorators", "target", "key", "desc", "d", "c", "arguments", "length", "r", "Object", "getOwnPropertyDescriptor", "Reflect", "decorate", "i", "defineProperty", "__metadata", "metadataKey", "metadataValue", "metadata", "customInspectSymbol", "Symbol", "for", "addressSep", "parse", "addrStr", "parts", "split", "Error", "chainID", "rawAddr", "hrp", "addr", "parseBech32", "bech32ToBytes", "prefix", "words", "bech32", "decode", "fromWords", "formatBech32", "payload", "toWords", "encode", "number", "n", "Number", "isSafeInteger", "bytes", "b", "lengths", "a", "Uint8Array", "constructor", "name", "includes", "exists", "instance", "checkFinished", "destroyed", "finished", "U32_MASK64", "BigInt", "_32n", "fromBig", "le", "h", "l", "lst", "Ah", "Uint32Array", "Al", "buffer", "toBytes", "data", "str", "TextEncoder", "Hash", "clone", "this", "_cloneInto", "SHA3_PI", "SHA3_ROTL", "_SHA3_IOTA", "_0n", "_1n", "_2n", "_7n", "_256n", "_0x71n", "round", "R", "x", "y", "push", "t", "j", "SHA3_IOTA_H", "SHA3_IOTA_L", "rotlH", "s", "rotlL", "Keccak", "blockLen", "suffix", "outputLen", "enableXOF", "rounds", "super", "pos", "posOut", "arr", "state", "state32", "byteOffset", "Math", "floor", "byteLength", "keccak", "B", "idx1", "idx0", "B0", "B1", "Th", "Tl", "curH", "curL", "shift", "PI", "fill", "len", "take", "min", "finish", "out", "bufferOut", "set", "subarray", "writeInto", "xofInto", "destroy", "digest", "digestInto", "to", "keccak_256", "hashCons", "hashC", "msg", "update", "tmp", "create", "isBytes", "hexes", "Array", "from", "_", "toString", "padStart", "bytesToHex", "hex", "numberToHexUnpadded", "num", "hexToNumber", "asciis", "_0", "_9", "_A", "_F", "_a", "_f", "asciiToBase16", "char", "hexToBytes", "hl", "al", "array", "ai", "hi", "n1", "charCodeAt", "n2", "bytesToNumberBE", "bytesToNumberLE", "reverse", "numberToBytesBE", "numberToBytesLE", "ensureBytes", "title", "expectedLength", "res", "e", "concatBytes", "arrays", "sum", "pad", "utf8ToBytes", "bitLen", "bitGet", "bitMask", "u8n", "u8fr", "createHmacDrbg", "hashLen", "qByteLen", "hmacFn", "v", "k", "reset", "reseed", "seed", "gen", "sl", "slice", "pred", "validatorFns", "bigint", "val", "function", "boolean", "string", "stringOrUint8Array", "isArray", "field", "object", "Fp", "isValid", "hash", "validateObject", "validators", "optValidators", "checkField", "fieldName", "type", "isOptional", "checkVal", "String", "entries", "value", "diff", "_3n", "_4n", "_5n", "_8n", "mod", "result", "pow", "power", "modulo", "pow2", "invert", "u", "m", "FpSqrt", "P", "p1div4", "root", "eql", "sqr", "c1", "mul", "nv", "sub", "ONE", "legendreC", "Q", "S", "Z", "Q1div2", "neg", "g", "ZERO", "t2", "ge", "FIELD_FIELDS", "validateField", "reduce", "map", "ORDER", "MASK", "BYTES", "BITS", "FpPow", "f", "p", "FpInvertBatch", "nums", "lastMultiplied", "acc", "is0", "inverted", "inv", "reduceRight", "nLength", "nBitLength", "_nBitLength", "nByteLength", "ceil", "Field", "isLE", "redef", "sqrtP", "freeze", "isOdd", "lhs", "rhs", "add", "div", "sqrN", "addN", "subN", "mulN", "sqrt", "invertBatch", "cmov", "fromBytes", "getFieldBytesLength", "fieldOrder", "bitLength", "getMinHashLength", "mapHashToField", "fieldLen", "minLen", "reduced", "validateBasic", "curve", "Gx", "Gy", "b2n", "h2b", "ut", "DER", "Err", "E", "ut.isBytes", "sBytes", "_parseInt", "rBytesLeft", "sig", "parseInt", "shl", "rhl", "rl", "weierstrassPoints", "opts", "CURVE", "ut.validateObject", "allowedPrivateKeyLengths", "wrapPrivateKey", "isTorsionFree", "clearCofactor", "allowInfinityPoint", "endo", "beta", "splitScalar", "_c", "point", "_isCompressed", "toAffine", "ut.concatBytes", "tail", "weierstrassEquation", "x2", "x3", "isWithinCurveOrder", "assertGE", "normPrivateKeyToScalar", "ut.bytesToHex", "ut.bytesToNumberBE", "error", "mod.mod", "pointPrecomputes", "Map", "assertPrjPoint", "other", "Point", "px", "py", "pz", "points", "toInv", "fromAffine", "assertValidity", "privateKey", "BASE", "multiply", "windowSize", "_WINDOW_SIZE", "delete", "left", "right", "hasEvenY", "X1", "Y1", "Z1", "X2", "Y2", "Z2", "U1", "U2", "negate", "double", "b3", "X3", "Y3", "Z3", "t0", "t1", "t3", "t4", "t5", "equals", "wnaf", "wNAFCached", "comp", "I", "unsafeLadder", "k1neg", "k1", "k2neg", "k2", "k1p", "k2p", "scalar", "fake", "f1p", "wNAF", "f2p", "constTimeNegate", "normalizeZ", "G", "multiplyUnsafe", "iz", "z", "ax", "ay", "zz", "cofactor", "isCompressed", "toRawBytes", "_bits", "bits", "condition", "item", "W", "windows", "elm", "base", "window", "precomputes", "mask", "maxNumber", "shiftBy", "offset", "wbits", "offset1", "offset2", "abs", "cond1", "cond2", "precomputesMap", "transform", "get", "precomputeWindow", "ProjectivePoint", "weierstrass", "curveDef", "hmac", "randomBytes", "bits2int", "bits2int_modN", "lowS", "CURVE_ORDER", "compressedLen", "uncompressedLen", "modN", "invN", "mod.invert", "cat", "head", "y2", "numToNByteStr", "ut.numberToBytesBE", "isBiggerThanHalfOrder", "slcNum", "Signature", "recovery", "toSig", "msgHash", "rec", "radj", "fromHex", "ir", "u1", "u2", "multiplyAndAddUnsafe", "hasHighS", "normalizeS", "toDERRawBytes", "ut.hexToBytes", "toDERHex", "hexFromSig", "toCompactRawBytes", "toCompactHex", "utils", "randomPrivateKey", "mod.getMinHashLength", "mod.mapHashToField", "precompute", "_setWindowSize", "isProbPub", "delta", "ORDER_MASK", "ut.bitMask", "int2octets", "prepSig", "defaultSigOpts", "some", "prehash", "extraEntropy", "ent", "h1int", "seedArgs", "k2sig", "kBytes", "ik", "q", "normS", "defaultVerOpts", "getPublicKey", "fromPrivateKey", "getSharedSecret", "privateA", "publicB", "sign", "privKey", "C", "ut.createHmacDrbg", "verify", "signature", "publicKey", "sg", "_sig", "fromDER", "derError", "fromCompact", "message", "is", "mapToCurveSimpleSWU", "mod.validateField", "A", "sqrtRatio", "o", "_2n_pow_c1_1", "_2n_pow_c1", "c2", "c3", "c4", "c5", "c6", "c7", "tv1", "tv2", "tv3", "tv5", "tv4", "isQR", "tvv5", "e1", "y1", "tv6", "os2ip", "i2osp", "strxor", "abytes", "isNum", "hash_to_field", "count", "options", "DST", "expand", "_DST", "dst", "log2p", "L", "len_in_bytes", "prb", "lenInBytes", "H", "b_in_bytes", "r_in_bytes", "ell", "DST_prime", "Z_pad", "l_i_b_str", "b_0", "args", "dkLen", "elm_offset", "tv", "isogenyMap", "COEFF", "xNum", "xDen", "yNum", "yDen", "createHasher", "mapToCurve", "def", "u0", "encodeDST", "HMAC", "_key", "iHash", "oHash", "buf", "assertExists", "assertBytes", "getPrototypeOf", "getHash", "msgs", "secp256k1P", "secp256k1N", "divNearest", "undefined", "_6n", "_11n", "_22n", "_23n", "_44n", "_88n", "b2", "b6", "b9", "b11", "b22", "b44", "b88", "b176", "b220", "b223", "secp256k1", "defHash", "a1", "b1", "a2", "POW_2_128", "sha256", "_v", "secp", "priv", "pub", "add0x", "test", "strip0x", "replace", "_hexToBytes", "Address", "fromPublicKey", "checksum", "nonChecksummedAddress", "toLowerCase", "checksummed", "nth", "toUpperCase", "address", "bufferToBigInt", "bufferToHex", "bufferToNumber", "hexToBuffer", "padLeft", "Primitives", "AVM", "EVM", "PVM", "ValidVMs", "TypeSymbols", "Address_1", "_type", "stylize", "toJSON", "toHex", "base58check", "base58", "bytesCompare", "aByte", "bByte", "Id", "Id_1", "idVal", "id1", "id2", "NodeIDPrefix", "NodeId", "NodeId_1", "PrimaryNetworkID", "PlatformChainID", "MainnetHRP", "CascadeHRP", "DenaliHRP", "EverestHRP", "FujiHRP", "UnitTestHRP", "LocalHRP", "FallbackHRP", "NetworkIDToHRP", "getHRP", "networkID", "Transaction", "getVM", "vm", "AvaxTx", "getInputs", "baseTx", "inputs", "getBlockchainId", "BlockchainId", "getSigIndices", "input", "sigIndicies", "filter", "indicies", "Int", "Int_1", "int", "bytesForInt", "unpackList", "serializable", "codec", "unpackListForEach", "callback", "toListStruct", "buff", "unpackCodecList", "UnpackPrefix", "packList", "serializables", "ser", "unpack", "sers", "pack", "packSwitched", "BigIntPr", "BigIntPr_1", "Byte", "Byte_1", "byte", "Bytes", "Bytes_1", "encoding", "bytesToString", "remaining", "Short", "Short_1", "short", "Stringpr", "Stringpr_1", "StringPr", "TextDecoder", "isTransferOut", "TransferOutput", "isStakeableLockOut", "StakeableLockOut", "isRewardsOwner", "OutputOwners", "isStakeableLockIn", "StakeableLockIn", "isTransferInput", "inp", "TransferInput", "Signature_1", "jsonStr", "Credential", "Credential_1", "signatures", "sigs", "credentialsStrings", "fromJSON", "index", "getSignatures", "Input", "Input_1", "sigIndices", "values", "addressesFromBytes", "OutputOwners_1", "locktime", "threshold", "addrs", "addresses", "every", "thisAddr", "idx", "MintOutput", "MintOutput_1", "outputOwners", "SecpMintOutput", "owners", "TransferOutput_1", "amt", "amount", "getLocktime", "getOwners", "getThreshold", "MintOperation", "MintOperation_1", "mintOutput", "transferOutput", "SecpMintOperation", "OutputOwnersList", "OutputOwnersList_1", "TransferInput_1", "fromNative", "TypeRegistry", "UTXOID", "UTXOID_1", "txID", "outputIdx", "txId", "fromString", "txIDRes", "compare", "ID", "TransferableInput", "TransferableInput_1", "utxoID", "assetId", "rest", "utxoId", "utxo", "output", "lockedInput", "transferableInput", "input1", "input2", "getAssetId", "PackPrefix", "TransferableOutput", "TransferableOutput_1", "BaseTx", "BaseTx_1", "NetworkId", "outputs", "memo", "networkId", "blockchainId", "AVMTx", "AvmBaseTx", "AvaxBaseTx", "Codec", "typeIdToType", "typeToTypeID", "agg", "id", "typeId", "entity", "list", "Manager", "codecs", "version", "unpacker", "getCodecFromBuffer", "unpackTransaction", "codecId", "getCodecForVersion", "getDefaultCodec", "getDefaultCodecId", "codecVersion", "codecIdShort", "groupId", "outputOwnerList", "NftFxMintOperation", "NftFxMintOutput", "NftFxTransferOutput", "TransferOperation", "TransferOperation_1", "NftFxTransferOperation", "SepkCredential", "NftFxCredential", "InitialState", "InitialState_1", "fxId", "PackPrefixList", "CreateAssetTx", "CreateAssetTx_1", "symbol", "denomination", "initialStates", "domination", "ExportTx", "ExportTx_1", "destination", "outs", "AvmExportTx", "sourceChain", "ImportTx", "ImportTx_1", "ins", "AvmImportTx", "concat", "TransferableOp", "TransferableOp_1", "UTXOId", "transferOp", "manager", "OperationTx", "OperationTx_1", "ops", "getAVMManager", "RegisterCodec", "Secp256k1Fx.TypeRegistry", "NftFx.TypeRegistry", "EVMTx", "nonce", "EvmInput", "static", "localeCompare", "destinationChain", "exportedOutputs", "EvmExportTx", "Output", "Output_1", "EvmOutput", "importedInputs", "Outs", "EvmImportTx", "Secp256k1Fx.Input", "Secp256k1Fx.OutputOwners", "getEVMManager", "PVMTx", "Validator", "Validator_1", "nodeId", "startTime", "endTime", "weight", "AddDelegatorTx", "AddDelegatorTx_1", "validator", "stake", "rewardsOwner", "getRewardsOwner", "AbstractSubnetTx", "getSubnetAuth", "subnetAuth", "SubnetValidator", "SubnetValidator_1", "subnetId", "AddSubnetValidatorTx", "AddSubnetValidatorTx_1", "subnetValidator", "getSubnetID", "AddValidatorTx", "AddValidatorTx_1", "shares", "AdvanceTimeTx", "AdvanceTimeTx_1", "time", "CreateChainTx", "CreateChainTx_1", "subnetID", "chainName", "vmID", "fxIds", "genesisData", "CreateSubnetTx", "CreateSubnetTx_1", "subnetOwners", "getSubnetOwners", "PvmExportTx", "PvmImportTx", "RewardValidatorTx", "RewardValidatorTx_1", "StakeableLockIn_1", "lockTime", "StakeableLockOut_1", "transferOut", "getStakeableLocktime", "getOutputOwners", "AddPermissionlessValidatorTx", "AddPermissionlessValidatorTx_1", "signer", "validatorRewardsOwner", "delegatorRewardsOwner", "getValidatorRewardsOwner", "getDelegatorRewardsOwner", "stakeOuts", "delegationShares", "AddPermissionlessDelegatorTx", "AddPermissionlessDelegatorTx_1", "B256", "N", "fLen", "crv", "err", "big", "fe", "au8", "toU8", "isPoint", "Gpows", "ok", "toPriv", "aff", "X1Z2", "X2Z1", "Y1Z2", "Y2Z1", "safe", "n2h", "padh", "b2h", "join", "isNaN", "n2b", "concatB", "arrs", "forEach", "md", "moreThanHalfN", "msgh", "mulAddQUns", "i2o", "cr", "globalThis", "crypto", "_hmacSync", "optS", "optV", "async", "signAsync", "h1i", "h1o", "etc", "asynchronous", "_e", "hmacSha256Async", "hmacDrbg", "hashToPrivateKey", "subtle", "importKey", "hmacSha256Sync", "getRandomValues", "isValidPrivateKey", "w", "defineProperties", "configurable", "cnd", "off", "off1", "off2", "cnd1", "cnd2", "signHash", "secp.signAsync", "recoverPublicKey", "recoveryBit", "secp.Signature", "addRecoveryBit", "publicKeyBytesToAddress", "ripemd160", "publicKeyToEthAddress", "secp.utils", "sig_", "rs", "_16n", "Fp_raw", "mod.Field", "Fr", "Fp2Add", "c0", "r0", "r1", "Fp2Subtract", "Fp2Multiply", "Fp2Square", "FP2_ORDER", "Fp2", "mod.FpPow", "mod.FpInvertBatch", "factor", "candidateSqrt", "check", "FP2_ROOTS_OF_UNITY", "divisor", "find", "indexOf", "x1", "re", "re1", "im", "im1", "reim", "re2", "im2", "x0", "mulByNonresidue", "multiplyByB", "fromBigTuple", "tuple", "fps", "frobeniusMap", "FP2_FROBENIUS_COEFFICIENTS", "rv1", "pair", "Fp6Add", "r2", "Fp6Subtract", "Fp6Multiply", "Fp6Square", "Fp6", "fromBigSix", "FP6_FROBENIUS_COEFFICIENTS_1", "FP6_FROBENIUS_COEFFICIENTS_2", "multiplyBy1", "multiplyBy01", "b0", "multiplyByFp2", "BLS_X", "BLS_X_LEN", "Fp12Add", "Fp12Subtract", "Fp12Multiply", "Fp12Square", "ab", "Fp4Square", "first", "second", "Fp12", "fromBigTwelve", "coeff", "FP12_FROBENIUS_COEFFICIENTS", "multiplyBy014", "o0", "o1", "o4", "conjugate", "_cyclotomicSquare", "c0c0", "c0c1", "c0c2", "c1c0", "c1c1", "c1c2", "t6", "t7", "t8", "t9", "finalExponentiate", "_cyclotomicExp", "t2_t5_pow_q2", "t4_t1_pow_q3", "t6_t1c_pow_q1", "t7_t3c_t1", "isogenyMapG2", "isogenyMapG1", "G2_SWU", "G1_SWU", "ut_root", "wsq", "wcu", "wsq_inv", "wcu_inv", "G2psi", "affine", "PSI2_C1", "G2psi2", "htfDefaults", "COMPRESSED_ZERO", "setMask", "infinity", "compressed", "parseMask", "sort", "signatureG1ToRawBytes", "isZero", "bls12_381", "G1", "Boolean", "signatureG2ToRawBytes", "G2", "y0", "z2", "fields", "params", "calcPairingPrecomputes", "Qx", "Qy", "Rx", "Ry", "Rz", "ell_coeff", "millerLoop", "g1", "Px", "Py", "f12", "F", "G1_", "assign", "G2_", "ShortSignature", "pairing", "withFinalExponent", "Qa", "looped", "_PPRECOMPUTES", "normP1", "normP1Hash", "htfOpts", "hashToCurve", "normP2", "normP2Hash", "getPublicKeyForShortSignatures", "msgPoint", "sigPoint", "signShortSignature", "Hm", "ePHm", "eGS", "exp", "verifyBatch", "messages", "publicKeys", "nMessages", "nPublicKeys", "paired", "Set", "groupPublicKey", "subMessage", "product", "verifyShortSignature", "eHmP", "eSG", "aggregatePublicKeys", "aggAffine", "aggregateSignatures", "aggregateShortSignatures", "G1b", "G2b", "cubicRootOfUnityModP", "phi", "scalars", "compressedValue", "aflag", "hEff", "subtract", "slc", "x_1", "x_0", "Y_bit", "flag", "half", "z1", "aflag1", "signatureDST", "proofOfPossessionDST", "publicKeyFromBytes", "pkBytes", "publicKeyToBytes", "pk", "signatureFromBytes", "sigBytes", "verifyProofOfPossession", "skBytes", "sk", "ProofOfPossession", "ProofOfPossession_1", "bls.publicKeyFromBytes", "bls.signatureFromBytes", "bls.verifyProofOfPossession", "bls.publicKeyToBytes", "pubkey", "bls.PUBLIC_KEY_LENGTH", "Signer", "Signer_1", "proof", "SignerEmpty", "SignerEmpty_1", "RemoveSubnetValidatorTx", "RemoveSubnetValidatorTx_1", "TransferSubnetOwnershipTx", "TransferSubnetOwnershipTx_1", "TransformSubnetTx", "TransformSubnetTx_1", "initialSupply", "maximumSupply", "minConsumptionRate", "maxConsumptionRate", "minValidatorStake", "maxValidatorStake", "minStakeDuration", "maxStakeDuration", "minDelegationFee", "minDelegatorStake", "maxValidatorWeightFactor", "uptimeRequirement", "PvmBaseTx", "getPVMManager", "getManagerForVM", "packTx", "tx", "packCodec", "SignedTx", "SignedTx_1", "unsignedTx", "credentials", "AvmSignedTx", "getCredentials", "getAllSignatures", "flatMap", "cred", "isTransferableOutput", "isTransferableInput", "isAvmBaseTx", "isExportTx", "isImportTx", "isEvmTx", "isImportExportTx", "isPvmBaseTx", "isAddDelegatorTx", "isAddPermissionlessDelegatorTx", "isAddPermissionlessValidatorTx", "isAddSubnetValidatorTx", "isAddValidatorTx", "isCreateChainTx", "isCreateSubnetTx", "isRemoveSubnetValidatorTx", "isTransferSubnetOwnershipTx", "isTransformSubnetTx", "Pi", "CTxBytesGas", "CCostPerSignature", "costCorethTx", "calcBytesCost", "UtxoSet", "utxos", "ids", "getUTXOs", "getAssetDict", "dict", "valNow", "finalDict", "assetID", "getAssetIDs", "getUTXOIDs", "newUTXOs", "getTransferOuts", "addChecksum", "matchOwners", "inputAddrs", "minIssuanceTime", "sigindices", "inputAddrSet", "addressMap", "size", "has", "AddressMap", "initialData", "storage", "maps", "addressHex", "cb", "shouldReorderWithoutGaps", "AddressMaps", "addressMaps", "orderedIndex", "forEachHex", "inputUtxos", "fromAddressesBytes", "utxoMap", "fromAddresses", "sigData", "addressMapData", "sigIndex", "getAddresses", "keys", "useReorderedIndices", "coordinates", "toArray", "newMap", "getTransferableInputsByEvmTx", "isEvmExportTx", "getTransferableInputsByTx", "isAvmImportTx", "isPvmImportTx", "getTransferableOutputsByEvmTx", "getTransferableOutputsByTx", "isAvmExportTx", "isPvmExportTx", "_reducer", "assetAmountMap", "previousAmount", "getInputAmounts", "getOutputAmounts", "isEvmImportTx", "getBurnedAmountByTx", "inputAmounts", "outputAmounts", "burnedAmounts", "inputAmount", "outputAmount", "bytes1", "bytes2", "chainIDAlias", "obj", "console", "log", "util", "inspect", "depth", "colors", "JSON", "stringify", "txBytes", "context", "burnedAmount", "evmBaseFee", "evmFeeTolerance", "getTx", "burned", "avaxAssetID", "validate", "expectedAmount", "txFee", "isEvmImportExportTx", "feeToleranceInt", "feeAmount", "max", "addPrimaryNetworkValidatorFee", "addPrimaryNetworkDelegatorFee", "createSubnetTxFee", "createBlockchainTxFee", "addSubnetValidatorFee", "transformSubnetTxFee", "addSubnetDelegatorFee", "baseTxFee", "Utxo", "Utxo_1", "UTXO", "AVAX_PUBLIC_URL", "JrpcProvider", "url", "reqId", "this", "method", "parameters", "fetchOptions", "body", "jsonrpc", "id", "params", "resp", "fetch", "JSON", "stringify", "headers", "then", "async", "r", "json", "data", "error", "Error", "message", "result", "Api", "path", "base", "rpcProvider", "baseURL", "options", "getMethodName", "methodName", "callRpc", "callMethod", "ChainApi", "manager", "super", "input", "encoding", "utxos", "map", "utxoHex", "unpack", "hexToBuffer", "Utxo", "issueTxParams", "tx", "issueTx", "bufferToHex", "addChecksum", "toBytes", "AvaxApi", "assetID", "getTx", "getTxParams", "SignedTx", "getTxJson", "getTxStatus", "includeReason", "getBalanceParams", "GetAddressTxsParams", "AVMApi", "getAVMManager", "buildGenesis", "getAllBalancesParams", "getImportedInputsFromUtxos", "fromAddressesBytes", "minIssuanceTime", "fromAddresses", "addressesFromBytes", "reduce", "agg", "utxo", "importedInputs", "inputUTXOs", "importedAmounts", "out", "output", "isTransferOut", "sigData", "matchOwners", "outputOwners", "push", "TransferableInput", "fromUtxoAndSigindicies", "sigIndicies", "getAssetId", "amount", "compareTransferableOutputs", "output1", "output2", "assetIdRes", "Id", "compare", "assetId", "pvmOutputTypes", "isStakeableLockOut", "avmCodec", "getDefaultCodec", "pvmCodec", "getPVMManager", "codec1", "some", "checker", "codec2", "bytesCompare", "compareEVMOutputs", "a", "b", "address", "value", "localeCompare", "transferableAmounts", "transferables", "transferable", "defaultSpendOptions", "fromAddress", "BigInt", "Math", "floor", "Date", "getTime", "changeAddresses", "threshold", "memo", "Uint8Array", "locktime", "OutputOwners", "BigIntPr", "Int", "emptySignature", "Signature", "Array", "fill", "UnsignedTx", "addressMaps", "credentials", "getSigIndices", "indicies", "Credential", "toJSON", "codec", "getManagerForVM", "vm", "codecId", "getDefaultCodecId", "txBytes", "jsonString", "res", "parse", "fields", "forEach", "field", "join", "ValidVMs", "includes", "rest", "getCodecFromBuffer", "UnpackPrefix", "fromBytes", "AddressMaps", "fromJSON", "credStr", "has", "pubKey", "hasAddress", "Address", "publicKeyBytesToAddress", "getAddresses", "useReorderedIndices", "sigIndices", "credIndex", "signaturesLength", "length", "max", "getSigIndicesForAddress", "pubkey", "addrAvax", "addrEvm", "secp256k1.publicKeyToEthAddress", "coordinatesAvax", "coordinatesEvm", "getInputUtxos", "packTx", "getBlockchainId", "getSignedTx", "getCredentials", "sig", "index", "subIndex", "setSignature", "publicKey", "secp256k1.recoverPublicKey", "sha256", "addSignatureForPubKey", "coordinates", "getSigIndicesForPubKey", "addSignatureAt", "secp256k1.publicKeyBytesToAddress", "hasAllSignatures", "allSigsHex", "cred", "getSignatures", "emptySignatureHex", "toString", "unsignedHash", "every", "valid", "sigBytes", "hasPubkey", "getVM", "defaultSpendResult", "inputs", "stakeOutputs", "changeOutputs", "calculateUTXOSpend", "amountsToBurn", "Map", "amountsToStake", "utxoCalculationFns", "startState", "state", "sort", "fromTransferableInputs", "add", "next", "_amountsToBurn", "_amountsToStake", "_fromAddresses", "_options", "_utxos", "calculationResults", "bigIntMin", "args", "m", "e", "NoSigMatchError", "verifySignaturesMatch", "set", "getTransferOutput", "outs", "acc", "useAvmAndCorethUTXOs", "changeOwner", "filter", "get", "utxoTransferout", "remainingAmountToBurn", "amountToBurn", "amt", "remainingAmount", "TransferableOutput", "TransferOutput", "baseTxUnsafeAvm", "context", "AvaxBaseTx", "fromNative", "networkID", "xBlockchainID", "baseTxUnsafePvm", "pBlockchainID", "exportTxUnsafe", "outputs", "destinationChain", "inputUtxos", "sigMappings", "outputAmts", "inputAmts", "Object", "entries", "ExportTx", "fromString", "utxoSet", "defaultedOptions", "toBurn", "avaxAssetID", "baseTxFee", "allOutputs", "BaseTx", "sourceChainId", "toAddresses", "importedAvax", "inputOutputs", "txFee", "merge", "ImportTx", "EVMUnsignedTx", "addrEVM", "jsonStr", "Info", "getNodeVersion", "getNodeId", "getNodeIp", "getNetworkId", "getNetworkName", "alias", "nodeIDs", "chain", "getTxFee", "createAssetTxFee", "createSubnetTxFee", "transformSubnetTxFee", "createBlockchainTxFee", "addPrimaryNetworkValidatorFee", "addPrimaryNetworkDelegatorFee", "addSubnetValidatorFee", "addSubnetDelegatorFee", "uptime", "getVMs", "assetDescription", "xChainApi", "getAssetDescription", "info", "blockchainID", "cBlockchainID", "freeze", "hrp", "getHRP", "EthereumAPI", "getBaseFee", "defaultEVMExportOptions", "estimateExportCost", "baseFee", "nonce", "costCorethTx", "newExportTx", "fee", "evmInputConfigs", "evmInputs", "Input", "transferableOutputs", "AddressMap", "newImportTx", "toAddress", "atomics", "sourceChain", "feeAssetId", "ins", "feepaid", "atomic", "infeeamount", "xferin", "utxoId", "TransferInput", "assetFeeAmount", "Output", "importTx", "ethAPI", "getEVMManager", "getAtomicTx", "txID", "dummyImportTx", "importCost", "createTransferableOutput", "lockedOutput", "StakeableLockOut", "lockTime", "useSpendableLockedUTXOs", "getLocktime", "remainingAmountToStake", "transferOut", "StakeableLockIn", "amountToStake", "useUnlockedUTXOs", "amountAvailableToStake", "canCombine", "getStakeableLocktime", "getOutputOwners", "equals", "combine", "pvmSerial.StakeableLockOut", "consolidateOutputs", "arr", "consolidated", "el", "combined", "i", "existing", "useConsolidateOutputs", "getCurrentValidatorsParams", "getPendingValidatorsParams", "getRewardUTXOsParams", "bytes", "getStakeParams", "stakedOutputs", "getValidatorsAtParams", "getCurrentSupply", "getMaxStakeAmountParams", "GetBalanceParams", "balance", "unlocked", "lockedStakeable", "lockedNotStakeable", "utxoIDs", "getBlockchains", "getHeight", "getMinStake", "getStakingAssetIDParams", "getSubnetsParams", "getTimestamp", "subnetID", "getTxStatusParams", "sampleValidatorsParams", "validatedByParams", "validatesParams", "nodeID", "start", "end", "weight", "rewardAddresses", "toStake", "addDelegatorTx", "AddDelegatorTx", "Validator", "stakingAssetId", "isPrimaryNetwork", "PrimaryNetworkID", "delegatorTx", "AddPermissionlessDelegatorTx", "SubnetValidator", "delegatorRewardsOwner", "shares", "signature", "validatorTx", "AddPermissionlessValidatorTx", "Signer", "ProofOfPossession", "SignerEmpty", "nodeId", "subnetAuth", "addSubnetValidatorTx", "AddSubnetValidatorTx", "AddValidatorTx", "chainName", "vmID", "fxIds", "genesisData", "createChainTx", "CreateChainTx", "Stringpr", "bind", "Bytes", "TextEncoder", "encode", "subnetOwners", "createSubnetTx", "CreateSubnetTx", "destinationChainID", "PlatformChainID", "spendRes", "removeSubnetValidatorTx", "RemoveSubnetValidatorTx", "NodeId", "TransferSubnetOwnershipTx", "initialSupply", "maximumSupply", "minConsumptionRate", "maxConsumptionRate", "minValidatorStake", "maxValidatorStake", "minStakeDuration", "maxStakeDuration", "minDelegationFee", "minDelegatorStake", "maxValidatorWeightFactor", "uptimeRequirement", "TransformSubnetTx", "Byte", "bytes", "hex", "bytes", "newBuffer", "b", "err", "bytes", "b", "v", "err", "bigInt", "P", "N", "m", "l", "b", "p", "et", "hex", "d", "y", "y2", "u", "v", "x", "I", "A", "B", "C", "D", "E", "G", "F", "H", "f", "z", "j", "h", "q", "x2", "pow", "P", "R", "G", "S", "N", "m", "A", "R", "G", "k", "m", "p", "cr", "crypto", "f", "W", "p", "G", "b", "w", "n", "I", "f", "createHash", "verify", "sign", "str", "b", "bytes", "verify", "bytes", "hex", "sign", "to", "bytes", "isBytes", "bytes", "b", "exists", "output", "bytes", "nc", "crypto", "createView", "rotr", "isLE", "utf8ToBytes", "str", "toBytes", "bytes", "Hash", "toStr", "wrapConstructor", "toBytes", "randomBytes", "crypto", "setBigUint64", "isLE", "h", "l", "Chi", "b", "Maj", "Hash", "createView", "exists", "toBytes", "output", "to", "SHA256_K", "SHA256_W", "SHA256", "A", "B", "C", "D", "E", "F", "G", "H", "W2", "rotr", "Chi", "Maj", "sha256", "wrapConstructor", "SHA256", "bytesToHex", "concatBytes", "hexToBytes", "isBytes", "utf8ToBytes", "hexes", "_", "bytes", "hex", "asciis", "asciiToBase16", "ai", "hi", "b", "str", "u8n", "v", "k", "h", "_0n", "_1n", "_2n", "mod", "b", "invert", "_0n", "mod", "b", "x", "y", "_1n", "u", "v", "q", "m", "gcd", "P", "_2n", "Q", "S", "Z", "Fp", "g", "ge", "f", "_0n", "_1n", "p", "d", "bitLen", "isLE", "_0n", "f", "_1n", "mod", "invert", "b", "bytes", "isLE", "mod", "_1n", "b", "H", "concatBytes", "utf8ToBytes", "k", "p", "m", "L", "u", "j", "mod", "x", "y", "Point", "P", "_0n", "_1n", "wNAF", "W", "p", "d", "f", "P", "Fp", "h2b", "_0n", "_1n", "_2n", "_3n", "_4n", "CURVE", "Fp", "toBytes", "concatBytes", "bytes", "x", "y", "b", "x2", "isBytes", "bytesToHex", "mod", "Point", "p", "hex", "P", "I", "d", "f", "Q", "G", "a", "z", "wNAF", "Fp", "Z", "q", "l", "_0n", "_1n", "_2n", "u", "v", "tv5", "_4n", "_3n", "c1", "c2", "y", "x", "_2n", "_3n", "CURVE", "Fp", "Fr", "Fp2", "Fp6", "Fp12", "BLS_X_LEN", "p", "x", "y", "t0", "t1", "t2", "t3", "t4", "j", "E", "F", "G2", "Signature", "Q", "P", "Qa", "getPublicKey", "sign", "verify", "G", "S", "groupPublicKey", "b", "_0n", "_1n", "_2n", "_3n", "_4n", "_8n", "_16n", "Fr", "b", "R", "x", "concatBytes", "b2", "z", "j", "y", "x2", "y2", "P", "p", "sha256", "bytes", "hex", "bytesToHex", "Q", "L", "to", "randomBytes", "bytes", "hex", "err", "bytes", "err", "str", "base64", "bytes", "sign", "verify", "utils_exports"]
}
